
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000024e8  0000257c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800076  00800076  00002592  2**0
                  ALLOC
  3 .stab         000029f4  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145b  00000000  00000000  00004f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006523  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006693  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a361  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_4>
      14:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__vector_9>
      28:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_10>
      2c:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <main>
      8a:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3e 12 	jmp	0x247c	; 0x247c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_callback>:
void retrievePasswordFromEEPROM(uint8 *password);
void manageFailedAttempts();

volatile uint16 timerTick = 0;  // Global tick counter

void Timer1_callback(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    timerTick++;  // Increment tick every compare match
     b4e:	80 91 77 00 	lds	r24, 0x0077
     b52:	90 91 78 00 	lds	r25, 0x0078
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 78 00 	sts	0x0078, r25
     b5c:	80 93 77 00 	sts	0x0077, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <initTimer1>:

void initTimer1(void) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2c 97       	sbiw	r28, 0x0c	; 12
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
    Timer_ConfigType timerConfig = {0, 7812, TIMER_1, TIMER_CLOCK_1024, TIMER_COMPARE_MODE};  // 1-second interval with 8MHz clock
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	99 87       	std	Y+9, r25	; 0x09
     b80:	88 87       	std	Y+8, r24	; 0x08
     b82:	e8 e6       	ldi	r30, 0x68	; 104
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	fb 87       	std	Y+11, r31	; 0x0b
     b88:	ea 87       	std	Y+10, r30	; 0x0a
     b8a:	f7 e0       	ldi	r31, 0x07	; 7
     b8c:	fc 87       	std	Y+12, r31	; 0x0c
     b8e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b90:	fb 85       	ldd	r31, Y+11	; 0x0b
     b92:	00 80       	ld	r0, Z
     b94:	8a 85       	ldd	r24, Y+10	; 0x0a
     b96:	9b 85       	ldd	r25, Y+11	; 0x0b
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9b 87       	std	Y+11, r25	; 0x0b
     b9c:	8a 87       	std	Y+10, r24	; 0x0a
     b9e:	e8 85       	ldd	r30, Y+8	; 0x08
     ba0:	f9 85       	ldd	r31, Y+9	; 0x09
     ba2:	00 82       	st	Z, r0
     ba4:	88 85       	ldd	r24, Y+8	; 0x08
     ba6:	99 85       	ldd	r25, Y+9	; 0x09
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	99 87       	std	Y+9, r25	; 0x09
     bac:	88 87       	std	Y+8, r24	; 0x08
     bae:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb6:	ee 23       	and	r30, r30
     bb8:	51 f7       	brne	.-44     	; 0xb8e <initTimer1+0x28>
    Timer_init(&timerConfig);
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Timer_init>
    Timer_setCallBack(Timer1_callback, TIMER_1);
     bc2:	83 ea       	ldi	r24, 0xA3	; 163
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <Timer_setCallBack>
}
     bcc:	2c 96       	adiw	r28, 0x0c	; 12
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <stopTimer1>:

void stopTimer1(void) {
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
    Timer_deInit(TIMER_1);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Timer_deInit>
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <main>:

int main(void) {
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	0f 92       	push	r0
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
    systemInitialize();
     bfc:	0e 94 16 06 	call	0xc2c	; 0xc2c <systemInitialize>
    sei();
     c00:	78 94       	sei
    receiveAndCheckPasswords();
     c02:	0e 94 a8 06 	call	0xd50	; 0xd50 <receiveAndCheckPasswords>

    while (1) {
        uint8 command = UART_recieveByte();
     c06:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     c0a:	89 83       	std	Y+1, r24	; 0x01
        if (command == OPEN_DOOR_CMD || command == CHANGE_PASS_CMD) {
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	8b 32       	cpi	r24, 0x2B	; 43
     c10:	19 f0       	breq	.+6      	; 0xc18 <main+0x26>
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	8d 32       	cpi	r24, 0x2D	; 45
     c16:	21 f4       	brne	.+8      	; 0xc20 <main+0x2e>
            receiveAndCheckPasswordForCommand(command);
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	0e 94 06 07 	call	0xe0c	; 0xe0c <receiveAndCheckPasswordForCommand>
     c1e:	f3 cf       	rjmp	.-26     	; 0xc06 <main+0x14>
        }
        else if (command == RETRY_CMD) {
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	81 31       	cpi	r24, 0x11	; 17
     c24:	81 f7       	brne	.-32     	; 0xc06 <main+0x14>
            receiveAndCheckPasswords();
     c26:	0e 94 a8 06 	call	0xd50	; 0xd50 <receiveAndCheckPasswords>
     c2a:	ed cf       	rjmp	.-38     	; 0xc06 <main+0x14>

00000c2c <systemInitialize>:
        }
    }
}

void systemInitialize() {
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	2e 97       	sbiw	r28, 0x0e	; 14
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
    UART_ConfigType uartConfig = {8, 0, 1, 9600};
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	9b 87       	std	Y+11, r25	; 0x0b
     c46:	8a 87       	std	Y+10, r24	; 0x0a
     c48:	ef e6       	ldi	r30, 0x6F	; 111
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	fd 87       	std	Y+13, r31	; 0x0d
     c4e:	ec 87       	std	Y+12, r30	; 0x0c
     c50:	f7 e0       	ldi	r31, 0x07	; 7
     c52:	fe 87       	std	Y+14, r31	; 0x0e
     c54:	ec 85       	ldd	r30, Y+12	; 0x0c
     c56:	fd 85       	ldd	r31, Y+13	; 0x0d
     c58:	00 80       	ld	r0, Z
     c5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     c5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	9d 87       	std	Y+13, r25	; 0x0d
     c62:	8c 87       	std	Y+12, r24	; 0x0c
     c64:	ea 85       	ldd	r30, Y+10	; 0x0a
     c66:	fb 85       	ldd	r31, Y+11	; 0x0b
     c68:	00 82       	st	Z, r0
     c6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	9b 87       	std	Y+11, r25	; 0x0b
     c72:	8a 87       	std	Y+10, r24	; 0x0a
     c74:	9e 85       	ldd	r25, Y+14	; 0x0e
     c76:	91 50       	subi	r25, 0x01	; 1
     c78:	9e 87       	std	Y+14, r25	; 0x0e
     c7a:	ee 85       	ldd	r30, Y+14	; 0x0e
     c7c:	ee 23       	and	r30, r30
     c7e:	51 f7       	brne	.-44     	; 0xc54 <systemInitialize+0x28>
    TWI_ConfigType twiConfig = {0x01, 12};
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	88 87       	std	Y+8, r24	; 0x08
     c84:	8c e0       	ldi	r24, 0x0C	; 12
     c86:	89 87       	std	Y+9, r24	; 0x09
    UART_init(&uartConfig);
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	0e 94 9c 10 	call	0x2138	; 0x2138 <UART_init>
    TWI_init(&twiConfig);
     c90:	ce 01       	movw	r24, r28
     c92:	08 96       	adiw	r24, 0x08	; 8
     c94:	0e 94 19 10 	call	0x2032	; 0x2032 <TWI_init>
    DcMotor_Init();
     c98:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DcMotor_Init>
    Buzzer_init();
     c9c:	0e 94 b8 08 	call	0x1170	; 0x1170 <Buzzer_init>
    PIR_init();
     ca0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <PIR_init>
}
     ca4:	2e 96       	adiw	r28, 0x0e	; 14
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <openDoor>:

void openDoor() {
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
    initTimer1();
     cbe:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
    timerTick = 0;
     cc2:	10 92 78 00 	sts	0x0078, r1
     cc6:	10 92 77 00 	sts	0x0077, r1
    DcMotor_Rotate(CW, 100);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	64 e6       	ldi	r22, 0x64	; 100
     cce:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <DcMotor_Rotate>
    while (timerTick < 15);  // Keep the motor running for 15 seconds
     cd2:	80 91 77 00 	lds	r24, 0x0077
     cd6:	90 91 78 00 	lds	r25, 0x0078
     cda:	8f 30       	cpi	r24, 0x0F	; 15
     cdc:	91 05       	cpc	r25, r1
     cde:	c8 f3       	brcs	.-14     	; 0xcd2 <openDoor+0x1c>
    DcMotor_Rotate(STOP, 100);
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	64 e6       	ldi	r22, 0x64	; 100
     ce4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <DcMotor_Rotate>
    timerTick = 0;
     ce8:	10 92 78 00 	sts	0x0078, r1
     cec:	10 92 77 00 	sts	0x0077, r1
    stopTimer1();
     cf0:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <openDoor+0x46>

    while (PIR_getState()) {
        UART_sendByte(WAIT_CMD);
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
    while (timerTick < 15);  // Keep the motor running for 15 seconds
    DcMotor_Rotate(STOP, 100);
    timerTick = 0;
    stopTimer1();

    while (PIR_getState()) {
     cfc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <PIR_getState>
     d00:	88 23       	and	r24, r24
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <openDoor+0x40>
        UART_sendByte(WAIT_CMD);
    }
    UART_sendByte(0);
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
    closeDoor();
     d0a:	0e 94 8a 06 	call	0xd14	; 0xd14 <closeDoor>
}
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	08 95       	ret

00000d14 <closeDoor>:

void closeDoor() {
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
    initTimer1();
     d1c:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
    timerTick = 0;
     d20:	10 92 78 00 	sts	0x0078, r1
     d24:	10 92 77 00 	sts	0x0077, r1
    DcMotor_Rotate(ACW, 100);
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	64 e6       	ldi	r22, 0x64	; 100
     d2c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <DcMotor_Rotate>
    while (timerTick < 15);  // Keep the motor running for 15 seconds to lock
     d30:	80 91 77 00 	lds	r24, 0x0077
     d34:	90 91 78 00 	lds	r25, 0x0078
     d38:	8f 30       	cpi	r24, 0x0F	; 15
     d3a:	91 05       	cpc	r25, r1
     d3c:	c8 f3       	brcs	.-14     	; 0xd30 <closeDoor+0x1c>
    DcMotor_Rotate(STOP, 100);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	64 e6       	ldi	r22, 0x64	; 100
     d42:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <DcMotor_Rotate>
    stopTimer1();
     d46:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <receiveAndCheckPasswords>:

void receiveAndCheckPasswords() {
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	2c 97       	sbiw	r28, 0x0c	; 12
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
    uint8 password1[PASSWORD_SIZE], password2[PASSWORD_SIZE];

    while (UART_recieveByte() != COMM_START_BYTE);
     d68:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     d6c:	85 31       	cpi	r24, 0x15	; 21
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <receiveAndCheckPasswords+0x18>
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     d70:	1a 82       	std	Y+2, r1	; 0x02
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <receiveAndCheckPasswords+0x42>
        password1[i] = UART_recieveByte();
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	08 2f       	mov	r16, r24
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     d7e:	28 2f       	mov	r18, r24
     d80:	ce 01       	movw	r24, r28
     d82:	03 96       	adiw	r24, 0x03	; 3
     d84:	fc 01       	movw	r30, r24
     d86:	e0 0f       	add	r30, r16
     d88:	f1 1f       	adc	r31, r17
     d8a:	20 83       	st	Z, r18

void receiveAndCheckPasswords() {
    uint8 password1[PASSWORD_SIZE], password2[PASSWORD_SIZE];

    while (UART_recieveByte() != COMM_START_BYTE);
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	70 f3       	brcs	.-36     	; 0xd74 <receiveAndCheckPasswords+0x24>
        password1[i] = UART_recieveByte();
    }

    while (UART_recieveByte() != COMM_START_BYTE);
     d98:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     d9c:	85 31       	cpi	r24, 0x15	; 21
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <receiveAndCheckPasswords+0x48>
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     da0:	19 82       	std	Y+1, r1	; 0x01
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <receiveAndCheckPasswords+0x72>
        password2[i] = UART_recieveByte();
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	08 2f       	mov	r16, r24
     da8:	10 e0       	ldi	r17, 0x00	; 0
     daa:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     dae:	28 2f       	mov	r18, r24
     db0:	ce 01       	movw	r24, r28
     db2:	08 96       	adiw	r24, 0x08	; 8
     db4:	fc 01       	movw	r30, r24
     db6:	e0 0f       	add	r30, r16
     db8:	f1 1f       	adc	r31, r17
     dba:	20 83       	st	Z, r18
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
        password1[i] = UART_recieveByte();
    }

    while (UART_recieveByte() != COMM_START_BYTE);
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	8f 5f       	subi	r24, 0xFF	; 255
     dc0:	89 83       	std	Y+1, r24	; 0x01
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	70 f3       	brcs	.-36     	; 0xda4 <receiveAndCheckPasswords+0x54>
        password2[i] = UART_recieveByte();
    }

    if (memcmp(password1, password2, PASSWORD_SIZE) == 0) {
     dc8:	ce 01       	movw	r24, r28
     dca:	03 96       	adiw	r24, 0x03	; 3
     dcc:	9e 01       	movw	r18, r28
     dce:	28 5f       	subi	r18, 0xF8	; 248
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	b9 01       	movw	r22, r18
     dd4:	45 e0       	ldi	r20, 0x05	; 5
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	0e 94 65 12 	call	0x24ca	; 0x24ca <memcmp>
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	41 f4       	brne	.+16     	; 0xdf0 <receiveAndCheckPasswords+0xa0>
        storePasswordToEEPROM(password1);
     de0:	ce 01       	movw	r24, r28
     de2:	03 96       	adiw	r24, 0x03	; 3
     de4:	0e 94 54 07 	call	0xea8	; 0xea8 <storePasswordToEEPROM>
        UART_sendByte(1);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <receiveAndCheckPasswords+0xa6>
    } else {
        UART_sendByte(0);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
    }
}
     df6:	2c 96       	adiw	r28, 0x0c	; 12
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	08 95       	ret

00000e0c <receiveAndCheckPasswordForCommand>:

void receiveAndCheckPasswordForCommand(uint8 cmd) {
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <receiveAndCheckPasswordForCommand+0xa>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	8a 83       	std	Y+2, r24	; 0x02
    retrievePasswordFromEEPROM(storedPassword);
     e1c:	84 e8       	ldi	r24, 0x84	; 132
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 f7 07 	call	0xfee	; 0xfee <retrievePasswordFromEEPROM>

    while (UART_recieveByte() != COMM_START_BYTE);
     e24:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     e28:	85 31       	cpi	r24, 0x15	; 21
     e2a:	e1 f7       	brne	.-8      	; 0xe24 <receiveAndCheckPasswordForCommand+0x18>
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <receiveAndCheckPasswordForCommand+0x3c>
        inputPassword[i] = UART_recieveByte();
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	08 2f       	mov	r16, r24
     e34:	10 e0       	ldi	r17, 0x00	; 0
     e36:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
     e3a:	f8 01       	movw	r30, r16
     e3c:	e1 58       	subi	r30, 0x81	; 129
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 83       	st	Z, r24

void receiveAndCheckPasswordForCommand(uint8 cmd) {
    retrievePasswordFromEEPROM(storedPassword);

    while (UART_recieveByte() != COMM_START_BYTE);
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	85 30       	cpi	r24, 0x05	; 5
     e4c:	88 f3       	brcs	.-30     	; 0xe30 <receiveAndCheckPasswordForCommand+0x24>
        inputPassword[i] = UART_recieveByte();
    }

    if (memcmp(storedPassword, inputPassword, PASSWORD_SIZE) == 0) {
     e4e:	84 e8       	ldi	r24, 0x84	; 132
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	2f e7       	ldi	r18, 0x7F	; 127
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	b9 01       	movw	r22, r18
     e58:	45 e0       	ldi	r20, 0x05	; 5
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	0e 94 65 12 	call	0x24ca	; 0x24ca <memcmp>
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	89 f4       	brne	.+34     	; 0xe86 <receiveAndCheckPasswordForCommand+0x7a>
        UART_sendByte(1);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
        failedAttempts = 0;
     e6a:	10 92 76 00 	sts	0x0076, r1
        if (cmd == OPEN_DOOR_CMD) openDoor();
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	8b 32       	cpi	r24, 0x2B	; 43
     e72:	19 f4       	brne	.+6      	; 0xe7a <receiveAndCheckPasswordForCommand+0x6e>
     e74:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <openDoor>
     e78:	10 c0       	rjmp	.+32     	; 0xe9a <receiveAndCheckPasswordForCommand+0x8e>
        else if (cmd == CHANGE_PASS_CMD) receiveAndCheckPasswords();
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	8d 32       	cpi	r24, 0x2D	; 45
     e7e:	69 f4       	brne	.+26     	; 0xe9a <receiveAndCheckPasswordForCommand+0x8e>
     e80:	0e 94 a8 06 	call	0xd50	; 0xd50 <receiveAndCheckPasswords>
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <receiveAndCheckPasswordForCommand+0x8e>
    } else {
        UART_sendByte(0);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
        failedAttempts++;
     e8c:	80 91 76 00 	lds	r24, 0x0076
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	80 93 76 00 	sts	0x0076, r24
        manageFailedAttempts();
     e96:	0e 94 98 08 	call	0x1130	; 0x1130 <manageFailedAttempts>
    }
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <storePasswordToEEPROM>:

void storePasswordToEEPROM(uint8 *password) {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	61 97       	sbiw	r28, 0x11	; 17
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	99 8b       	std	Y+17, r25	; 0x11
     ebe:	88 8b       	std	Y+16, r24	; 0x10
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     ec0:	1f 86       	std	Y+15, r1	; 0x0f
     ec2:	88 c0       	rjmp	.+272    	; 0xfd4 <storePasswordToEEPROM+0x12c>
        EEPROM_writeByte(EEPROM_ADDR + i, password[i]);
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	8f 5e       	subi	r24, 0xEF	; 239
     ecc:	9c 4f       	sbci	r25, 0xFC	; 252
     ece:	ac 01       	movw	r20, r24
     ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	88 89       	ldd	r24, Y+16	; 0x10
     ed8:	99 89       	ldd	r25, Y+17	; 0x11
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	20 81       	ld	r18, Z
     ee2:	ca 01       	movw	r24, r20
     ee4:	62 2f       	mov	r22, r18
     ee6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <EEPROM_writeByte>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 e2       	ldi	r26, 0x20	; 32
     ef0:	b1 e4       	ldi	r27, 0x41	; 65
     ef2:	8b 87       	std	Y+11, r24	; 0x0b
     ef4:	9c 87       	std	Y+12, r25	; 0x0c
     ef6:	ad 87       	std	Y+13, r26	; 0x0d
     ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efa:	6b 85       	ldd	r22, Y+11	; 0x0b
     efc:	7c 85       	ldd	r23, Y+12	; 0x0c
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	4a ef       	ldi	r20, 0xFA	; 250
     f08:	54 e4       	ldi	r21, 0x44	; 68
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	8f 83       	std	Y+7, r24	; 0x07
     f14:	98 87       	std	Y+8, r25	; 0x08
     f16:	a9 87       	std	Y+9, r26	; 0x09
     f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	89 85       	ldd	r24, Y+9	; 0x09
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	5f e3       	ldi	r21, 0x3F	; 63
     f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2e:	88 23       	and	r24, r24
     f30:	2c f4       	brge	.+10     	; 0xf3c <storePasswordToEEPROM+0x94>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	3f c0       	rjmp	.+126    	; 0xfba <storePasswordToEEPROM+0x112>
	else if (__tmp > 65535)
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	4c f5       	brge	.+82     	; 0xfa6 <storePasswordToEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f54:	6b 85       	ldd	r22, Y+11	; 0x0b
     f56:	7c 85       	ldd	r23, Y+12	; 0x0c
     f58:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e2       	ldi	r20, 0x20	; 32
     f62:	51 e4       	ldi	r21, 0x41	; 65
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <storePasswordToEEPROM+0xf4>
     f7e:	88 ec       	ldi	r24, 0xC8	; 200
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 83       	std	Y+4, r25	; 0x04
     f84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <storePasswordToEEPROM+0xe2>
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	69 f7       	brne	.-38     	; 0xf7e <storePasswordToEEPROM+0xd6>
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <storePasswordToEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <storePasswordToEEPROM+0x11e>
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
        manageFailedAttempts();
    }
}

void storePasswordToEEPROM(uint8 *password) {
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	8f 87       	std	Y+15, r24	; 0x0f
     fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd6:	85 30       	cpi	r24, 0x05	; 5
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <storePasswordToEEPROM+0x134>
     fda:	74 cf       	rjmp	.-280    	; 0xec4 <storePasswordToEEPROM+0x1c>
        EEPROM_writeByte(EEPROM_ADDR + i, password[i]);
        _delay_ms(10);
    }
}
     fdc:	61 96       	adiw	r28, 0x11	; 17
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <retrievePasswordFromEEPROM>:

void retrievePasswordFromEEPROM(uint8 *password) {
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	61 97       	sbiw	r28, 0x11	; 17
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	99 8b       	std	Y+17, r25	; 0x11
    1004:	88 8b       	std	Y+16, r24	; 0x10
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1006:	1f 86       	std	Y+15, r1	; 0x0f
    1008:	86 c0       	rjmp	.+268    	; 0x1116 <retrievePasswordFromEEPROM+0x128>
        EEPROM_readByte(EEPROM_ADDR + i, &password[i]);
    100a:	8f 85       	ldd	r24, Y+15	; 0x0f
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	8f 5e       	subi	r24, 0xEF	; 239
    1012:	9c 4f       	sbci	r25, 0xFC	; 252
    1014:	ac 01       	movw	r20, r24
    1016:	8f 85       	ldd	r24, Y+15	; 0x0f
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	88 89       	ldd	r24, Y+16	; 0x10
    101e:	99 89       	ldd	r25, Y+17	; 0x11
    1020:	28 0f       	add	r18, r24
    1022:	39 1f       	adc	r19, r25
    1024:	ca 01       	movw	r24, r20
    1026:	b9 01       	movw	r22, r18
    1028:	0e 94 2a 09 	call	0x1254	; 0x1254 <EEPROM_readByte>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e2       	ldi	r26, 0x20	; 32
    1032:	b1 e4       	ldi	r27, 0x41	; 65
    1034:	8b 87       	std	Y+11, r24	; 0x0b
    1036:	9c 87       	std	Y+12, r25	; 0x0c
    1038:	ad 87       	std	Y+13, r26	; 0x0d
    103a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103c:	6b 85       	ldd	r22, Y+11	; 0x0b
    103e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1040:	8d 85       	ldd	r24, Y+13	; 0x0d
    1042:	9e 85       	ldd	r25, Y+14	; 0x0e
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	4a ef       	ldi	r20, 0xFA	; 250
    104a:	54 e4       	ldi	r21, 0x44	; 68
    104c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	8f 83       	std	Y+7, r24	; 0x07
    1056:	98 87       	std	Y+8, r25	; 0x08
    1058:	a9 87       	std	Y+9, r26	; 0x09
    105a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105c:	6f 81       	ldd	r22, Y+7	; 0x07
    105e:	78 85       	ldd	r23, Y+8	; 0x08
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e8       	ldi	r20, 0x80	; 128
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1070:	88 23       	and	r24, r24
    1072:	2c f4       	brge	.+10     	; 0x107e <retrievePasswordFromEEPROM+0x90>
		__ticks = 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	3f c0       	rjmp	.+126    	; 0x10fc <retrievePasswordFromEEPROM+0x10e>
	else if (__tmp > 65535)
    107e:	6f 81       	ldd	r22, Y+7	; 0x07
    1080:	78 85       	ldd	r23, Y+8	; 0x08
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	4c f5       	brge	.+82     	; 0x10e8 <retrievePasswordFromEEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1096:	6b 85       	ldd	r22, Y+11	; 0x0b
    1098:	7c 85       	ldd	r23, Y+12	; 0x0c
    109a:	8d 85       	ldd	r24, Y+13	; 0x0d
    109c:	9e 85       	ldd	r25, Y+14	; 0x0e
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e2       	ldi	r20, 0x20	; 32
    10a4:	51 e4       	ldi	r21, 0x41	; 65
    10a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	0f c0       	rjmp	.+30     	; 0x10de <retrievePasswordFromEEPROM+0xf0>
    10c0:	88 ec       	ldi	r24, 0xC8	; 200
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9c 83       	std	Y+4, r25	; 0x04
    10c6:	8b 83       	std	Y+3, r24	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <retrievePasswordFromEEPROM+0xde>
    10d0:	9c 83       	std	Y+4, r25	; 0x04
    10d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	9e 83       	std	Y+6, r25	; 0x06
    10dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	9e 81       	ldd	r25, Y+6	; 0x06
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <retrievePasswordFromEEPROM+0xd2>
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <retrievePasswordFromEEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	9a 83       	std	Y+2, r25	; 0x02
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <retrievePasswordFromEEPROM+0x11a>
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(10);
    }
}

void retrievePasswordFromEEPROM(uint8 *password) {
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1110:	8f 85       	ldd	r24, Y+15	; 0x0f
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	8f 87       	std	Y+15, r24	; 0x0f
    1116:	8f 85       	ldd	r24, Y+15	; 0x0f
    1118:	85 30       	cpi	r24, 0x05	; 5
    111a:	08 f4       	brcc	.+2      	; 0x111e <retrievePasswordFromEEPROM+0x130>
    111c:	76 cf       	rjmp	.-276    	; 0x100a <retrievePasswordFromEEPROM+0x1c>
        EEPROM_readByte(EEPROM_ADDR + i, &password[i]);
        _delay_ms(10);
    }
}
    111e:	61 96       	adiw	r28, 0x11	; 17
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <manageFailedAttempts>:

void manageFailedAttempts() {
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    if (failedAttempts >= MAX_ATTEMPTS) {
    1138:	80 91 76 00 	lds	r24, 0x0076
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	a8 f0       	brcs	.+42     	; 0x116a <manageFailedAttempts+0x3a>
        initTimer1();
    1140:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
        timerTick = 0;
    1144:	10 92 78 00 	sts	0x0078, r1
    1148:	10 92 77 00 	sts	0x0077, r1
        Buzzer_on();
    114c:	0e 94 cd 08 	call	0x119a	; 0x119a <Buzzer_on>
        while (timerTick < 60);  // Keep buzzer on for 1 minute (60 seconds)
    1150:	80 91 77 00 	lds	r24, 0x0077
    1154:	90 91 78 00 	lds	r25, 0x0078
    1158:	8c 33       	cpi	r24, 0x3C	; 60
    115a:	91 05       	cpc	r25, r1
    115c:	c8 f3       	brcs	.-14     	; 0x1150 <manageFailedAttempts+0x20>
        Buzzer_off();
    115e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Buzzer_off>
        failedAttempts = 0;
    1162:	10 92 76 00 	sts	0x0076, r1
        stopTimer1();
    1166:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
    }
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <Buzzer_init>:
 *
 *  Author: Abdelrahman Bahram
 */ 
#include "buzzer.h"

void Buzzer_init(void) {
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
	// Set the buzzer pin as an output
	BUZZER_DDR |= (1 << BUZZER_PIN);
    1178:	a4 e3       	ldi	r26, 0x34	; 52
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e4 e3       	ldi	r30, 0x34	; 52
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 68       	ori	r24, 0x80	; 128
    1184:	8c 93       	st	X, r24
	// Turn off the buzzer initially
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
    1186:	a5 e3       	ldi	r26, 0x35	; 53
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e5 e3       	ldi	r30, 0x35	; 53
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	8c 93       	st	X, r24
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <Buzzer_on>:

void Buzzer_on(void) {
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	// Activate the buzzer
	BUZZER_PORT |= (1 << BUZZER_PIN);
    11a2:	a5 e3       	ldi	r26, 0x35	; 53
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e3       	ldi	r30, 0x35	; 53
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	8c 93       	st	X, r24
}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <Buzzer_off>:

void Buzzer_off(void) {
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	// Deactivate the buzzer
	BUZZER_PORT &= ~(1 << BUZZER_PIN);
    11be:	a5 e3       	ldi	r26, 0x35	; 53
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 77       	andi	r24, 0x7F	; 127
    11ca:	8c 93       	st	X, r24
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <EEPROM_writeByte+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <EEPROM_writeByte+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11e4:	0e 94 39 10 	call	0x2072	; 0x2072 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11e8:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <EEPROM_writeByte+0x22>
        return ERROR;
    11f0:	1c 82       	std	Y+4, r1	; 0x04
    11f2:	28 c0       	rjmp	.+80     	; 0x1244 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	80 70       	andi	r24, 0x00	; 0
    11fa:	97 70       	andi	r25, 0x07	; 7
    11fc:	88 0f       	add	r24, r24
    11fe:	89 2f       	mov	r24, r25
    1200:	88 1f       	adc	r24, r24
    1202:	99 0b       	sbc	r25, r25
    1204:	91 95       	neg	r25
    1206:	80 6a       	ori	r24, 0xA0	; 160
    1208:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    120c:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    1210:	88 31       	cpi	r24, 0x18	; 24
    1212:	11 f0       	breq	.+4      	; 0x1218 <EEPROM_writeByte+0x46>
        return ERROR; 
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	16 c0       	rjmp	.+44     	; 0x1244 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    121e:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    1222:	88 32       	cpi	r24, 0x28	; 40
    1224:	11 f0       	breq	.+4      	; 0x122a <EEPROM_writeByte+0x58>
        return ERROR;
    1226:	1c 82       	std	Y+4, r1	; 0x04
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1230:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    1234:	88 32       	cpi	r24, 0x28	; 40
    1236:	11 f0       	breq	.+4      	; 0x123c <EEPROM_writeByte+0x6a>
        return ERROR;
    1238:	1c 82       	std	Y+4, r1	; 0x04
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    123c:	0e 94 49 10 	call	0x2092	; 0x2092 <TWI_stop>
	
    return SUCCESS;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	8c 83       	std	Y+4, r24	; 0x04
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <EEPROM_readByte+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <EEPROM_readByte+0x8>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	7c 83       	std	Y+4, r23	; 0x04
    1268:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    126a:	0e 94 39 10 	call	0x2072	; 0x2072 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    126e:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	11 f0       	breq	.+4      	; 0x127a <EEPROM_readByte+0x26>
        return ERROR;
    1276:	1d 82       	std	Y+5, r1	; 0x05
    1278:	44 c0       	rjmp	.+136    	; 0x1302 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	80 70       	andi	r24, 0x00	; 0
    1280:	97 70       	andi	r25, 0x07	; 7
    1282:	88 0f       	add	r24, r24
    1284:	89 2f       	mov	r24, r25
    1286:	88 1f       	adc	r24, r24
    1288:	99 0b       	sbc	r25, r25
    128a:	91 95       	neg	r25
    128c:	80 6a       	ori	r24, 0xA0	; 160
    128e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1292:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    1296:	88 31       	cpi	r24, 0x18	; 24
    1298:	11 f0       	breq	.+4      	; 0x129e <EEPROM_readByte+0x4a>
        return ERROR;
    129a:	1d 82       	std	Y+5, r1	; 0x05
    129c:	32 c0       	rjmp	.+100    	; 0x1302 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12a4:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    12a8:	88 32       	cpi	r24, 0x28	; 40
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <EEPROM_readByte+0x5c>
        return ERROR;
    12ac:	1d 82       	std	Y+5, r1	; 0x05
    12ae:	29 c0       	rjmp	.+82     	; 0x1302 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12b0:	0e 94 39 10 	call	0x2072	; 0x2072 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12b4:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    12b8:	80 31       	cpi	r24, 0x10	; 16
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <EEPROM_readByte+0x6c>
        return ERROR;
    12bc:	1d 82       	std	Y+5, r1	; 0x05
    12be:	21 c0       	rjmp	.+66     	; 0x1302 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	80 70       	andi	r24, 0x00	; 0
    12c6:	97 70       	andi	r25, 0x07	; 7
    12c8:	88 0f       	add	r24, r24
    12ca:	89 2f       	mov	r24, r25
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	91 95       	neg	r25
    12d2:	81 6a       	ori	r24, 0xA1	; 161
    12d4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12d8:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    12dc:	80 34       	cpi	r24, 0x40	; 64
    12de:	11 f0       	breq	.+4      	; 0x12e4 <EEPROM_readByte+0x90>
        return ERROR;
    12e0:	1d 82       	std	Y+5, r1	; 0x05
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12e4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <TWI_readByteWithNACK>
    12e8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ea:	fc 81       	ldd	r31, Y+4	; 0x04
    12ec:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12ee:	0e 94 91 10 	call	0x2122	; 0x2122 <TWI_getStatus>
    12f2:	88 35       	cpi	r24, 0x58	; 88
    12f4:	11 f0       	breq	.+4      	; 0x12fa <EEPROM_readByte+0xa6>
        return ERROR;
    12f6:	1d 82       	std	Y+5, r1	; 0x05
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12fa:	0e 94 49 10 	call	0x2092	; 0x2092 <TWI_stop>

    return SUCCESS;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <GPIO_setupPinDirection+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <GPIO_setupPinDirection+0x8>
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
    1326:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	08 f0       	brcs	.+2      	; 0x1330 <GPIO_setupPinDirection+0x1c>
    132e:	d5 c0       	rjmp	.+426    	; 0x14da <GPIO_setupPinDirection+0x1c6>
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	84 30       	cpi	r24, 0x04	; 4
    1334:	08 f0       	brcs	.+2      	; 0x1338 <GPIO_setupPinDirection+0x24>
    1336:	d1 c0       	rjmp	.+418    	; 0x14da <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3d 83       	std	Y+5, r19	; 0x05
    1340:	2c 83       	std	Y+4, r18	; 0x04
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	9d 81       	ldd	r25, Y+5	; 0x05
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	09 f4       	brne	.+2      	; 0x134e <GPIO_setupPinDirection+0x3a>
    134c:	43 c0       	rjmp	.+134    	; 0x13d4 <GPIO_setupPinDirection+0xc0>
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	3d 81       	ldd	r19, Y+5	; 0x05
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <GPIO_setupPinDirection+0x4e>
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	71 f0       	breq	.+28     	; 0x137c <GPIO_setupPinDirection+0x68>
    1360:	bc c0       	rjmp	.+376    	; 0x14da <GPIO_setupPinDirection+0x1c6>
    1362:	2c 81       	ldd	r18, Y+4	; 0x04
    1364:	3d 81       	ldd	r19, Y+5	; 0x05
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <GPIO_setupPinDirection+0x5a>
    136c:	5f c0       	rjmp	.+190    	; 0x142c <GPIO_setupPinDirection+0x118>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <GPIO_setupPinDirection+0x66>
    1378:	85 c0       	rjmp	.+266    	; 0x1484 <GPIO_setupPinDirection+0x170>
    137a:	af c0       	rjmp	.+350    	; 0x14da <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	a1 f4       	brne	.+40     	; 0x13aa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1382:	aa e3       	ldi	r26, 0x3A	; 58
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ea e3       	ldi	r30, 0x3A	; 58
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <GPIO_setupPinDirection+0x8c>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <GPIO_setupPinDirection+0x88>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	98 c0       	rjmp	.+304    	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13aa:	aa e3       	ldi	r26, 0x3A	; 58
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea e3       	ldi	r30, 0x3A	; 58
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <GPIO_setupPinDirection+0xb4>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <GPIO_setupPinDirection+0xb0>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	83 c0       	rjmp	.+262    	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	a1 f4       	brne	.+40     	; 0x1402 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13da:	a7 e3       	ldi	r26, 0x37	; 55
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e7 e3       	ldi	r30, 0x37	; 55
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_setupPinDirection+0xe4>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_setupPinDirection+0xe0>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	6c c0       	rjmp	.+216    	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1402:	a7 e3       	ldi	r26, 0x37	; 55
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e3       	ldi	r30, 0x37	; 55
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_setupPinDirection+0x10c>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_setupPinDirection+0x108>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	57 c0       	rjmp	.+174    	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	a1 f4       	brne	.+40     	; 0x145a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1432:	a4 e3       	ldi	r26, 0x34	; 52
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e4 e3       	ldi	r30, 0x34	; 52
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <GPIO_setupPinDirection+0x13c>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <GPIO_setupPinDirection+0x138>
    1454:	84 2b       	or	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	40 c0       	rjmp	.+128    	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    145a:	a4 e3       	ldi	r26, 0x34	; 52
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e3       	ldi	r30, 0x34	; 52
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_setupPinDirection+0x164>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_setupPinDirection+0x160>
    147c:	80 95       	com	r24
    147e:	84 23       	and	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	2b c0       	rjmp	.+86     	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	a1 f4       	brne	.+40     	; 0x14b2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    148a:	a1 e3       	ldi	r26, 0x31	; 49
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e1 e3       	ldi	r30, 0x31	; 49
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_setupPinDirection+0x194>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_setupPinDirection+0x190>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_setupPinDirection+0x1bc>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_setupPinDirection+0x1b8>
    14d4:	80 95       	com	r24
    14d6:	84 23       	and	r24, r20
    14d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <GPIO_writePin+0x6>
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <GPIO_writePin+0x8>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
    14fc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 30       	cpi	r24, 0x08	; 8
    1502:	08 f0       	brcs	.+2      	; 0x1506 <GPIO_writePin+0x1c>
    1504:	d5 c0       	rjmp	.+426    	; 0x16b0 <GPIO_writePin+0x1c6>
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	08 f0       	brcs	.+2      	; 0x150e <GPIO_writePin+0x24>
    150c:	d1 c0       	rjmp	.+418    	; 0x16b0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	09 f4       	brne	.+2      	; 0x1524 <GPIO_writePin+0x3a>
    1522:	43 c0       	rjmp	.+134    	; 0x15aa <GPIO_writePin+0xc0>
    1524:	2c 81       	ldd	r18, Y+4	; 0x04
    1526:	3d 81       	ldd	r19, Y+5	; 0x05
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	2c f4       	brge	.+10     	; 0x1538 <GPIO_writePin+0x4e>
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	71 f0       	breq	.+28     	; 0x1552 <GPIO_writePin+0x68>
    1536:	bc c0       	rjmp	.+376    	; 0x16b0 <GPIO_writePin+0x1c6>
    1538:	2c 81       	ldd	r18, Y+4	; 0x04
    153a:	3d 81       	ldd	r19, Y+5	; 0x05
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_writePin+0x5a>
    1542:	5f c0       	rjmp	.+190    	; 0x1602 <GPIO_writePin+0x118>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <GPIO_writePin+0x66>
    154e:	85 c0       	rjmp	.+266    	; 0x165a <GPIO_writePin+0x170>
    1550:	af c0       	rjmp	.+350    	; 0x16b0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	a1 f4       	brne	.+40     	; 0x1580 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1558:	ab e3       	ldi	r26, 0x3B	; 59
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	eb e3       	ldi	r30, 0x3B	; 59
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <GPIO_writePin+0x8c>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <GPIO_writePin+0x88>
    157a:	84 2b       	or	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	98 c0       	rjmp	.+304    	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1580:	ab e3       	ldi	r26, 0x3B	; 59
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_writePin+0xb4>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_writePin+0xb0>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	83 c0       	rjmp	.+262    	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	a1 f4       	brne	.+40     	; 0x15d8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15b0:	a8 e3       	ldi	r26, 0x38	; 56
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e8 e3       	ldi	r30, 0x38	; 56
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_writePin+0xe4>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_writePin+0xe0>
    15d2:	84 2b       	or	r24, r20
    15d4:	8c 93       	st	X, r24
    15d6:	6c c0       	rjmp	.+216    	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15d8:	a8 e3       	ldi	r26, 0x38	; 56
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e8 e3       	ldi	r30, 0x38	; 56
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_writePin+0x10c>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_writePin+0x108>
    15fa:	80 95       	com	r24
    15fc:	84 23       	and	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	57 c0       	rjmp	.+174    	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	a1 f4       	brne	.+40     	; 0x1630 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1608:	a5 e3       	ldi	r26, 0x35	; 53
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e3       	ldi	r30, 0x35	; 53
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <GPIO_writePin+0x13c>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <GPIO_writePin+0x138>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	40 c0       	rjmp	.+128    	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <GPIO_writePin+0x164>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <GPIO_writePin+0x160>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	2b c0       	rjmp	.+86     	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	a1 f4       	brne	.+40     	; 0x1688 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1660:	a2 e3       	ldi	r26, 0x32	; 50
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e2 e3       	ldi	r30, 0x32	; 50
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 2e       	mov	r0, r18
    1678:	02 c0       	rjmp	.+4      	; 0x167e <GPIO_writePin+0x194>
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	0a 94       	dec	r0
    1680:	e2 f7       	brpl	.-8      	; 0x167a <GPIO_writePin+0x190>
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GPIO_writePin+0x1bc>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GPIO_writePin+0x1b8>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <GPIO_readPin+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <GPIO_readPin+0x8>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16d2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 30       	cpi	r24, 0x08	; 8
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <GPIO_readPin+0x1c>
    16da:	84 c0       	rjmp	.+264    	; 0x17e4 <GPIO_readPin+0x124>
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <GPIO_readPin+0x24>
    16e2:	80 c0       	rjmp	.+256    	; 0x17e4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3d 83       	std	Y+5, r19	; 0x05
    16ec:	2c 83       	std	Y+4, r18	; 0x04
    16ee:	4c 81       	ldd	r20, Y+4	; 0x04
    16f0:	5d 81       	ldd	r21, Y+5	; 0x05
    16f2:	41 30       	cpi	r20, 0x01	; 1
    16f4:	51 05       	cpc	r21, r1
    16f6:	79 f1       	breq	.+94     	; 0x1756 <GPIO_readPin+0x96>
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	9d 81       	ldd	r25, Y+5	; 0x05
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	91 05       	cpc	r25, r1
    1700:	34 f4       	brge	.+12     	; 0x170e <GPIO_readPin+0x4e>
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	3d 81       	ldd	r19, Y+5	; 0x05
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	69 f0       	breq	.+26     	; 0x1726 <GPIO_readPin+0x66>
    170c:	6b c0       	rjmp	.+214    	; 0x17e4 <GPIO_readPin+0x124>
    170e:	4c 81       	ldd	r20, Y+4	; 0x04
    1710:	5d 81       	ldd	r21, Y+5	; 0x05
    1712:	42 30       	cpi	r20, 0x02	; 2
    1714:	51 05       	cpc	r21, r1
    1716:	b9 f1       	breq	.+110    	; 0x1786 <GPIO_readPin+0xc6>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	83 30       	cpi	r24, 0x03	; 3
    171e:	91 05       	cpc	r25, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <GPIO_readPin+0x64>
    1722:	49 c0       	rjmp	.+146    	; 0x17b6 <GPIO_readPin+0xf6>
    1724:	5f c0       	rjmp	.+190    	; 0x17e4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1726:	e9 e3       	ldi	r30, 0x39	; 57
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_readPin+0x7e>
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_readPin+0x7a>
    1742:	ca 01       	movw	r24, r20
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	90 70       	andi	r25, 0x00	; 0
    1748:	88 23       	and	r24, r24
    174a:	19 f0       	breq	.+6      	; 0x1752 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	49 c0       	rjmp	.+146    	; 0x17e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	47 c0       	rjmp	.+142    	; 0x17e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_readPin+0xae>
    176a:	55 95       	asr	r21
    176c:	47 95       	ror	r20
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_readPin+0xaa>
    1772:	ca 01       	movw	r24, r20
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	88 23       	and	r24, r24
    177a:	19 f0       	breq	.+6      	; 0x1782 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	31 c0       	rjmp	.+98     	; 0x17e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1782:	19 82       	std	Y+1, r1	; 0x01
    1784:	2f c0       	rjmp	.+94     	; 0x17e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1786:	e3 e3       	ldi	r30, 0x33	; 51
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a9 01       	movw	r20, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <GPIO_readPin+0xde>
    179a:	55 95       	asr	r21
    179c:	47 95       	ror	r20
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <GPIO_readPin+0xda>
    17a2:	ca 01       	movw	r24, r20
    17a4:	81 70       	andi	r24, 0x01	; 1
    17a6:	90 70       	andi	r25, 0x00	; 0
    17a8:	88 23       	and	r24, r24
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17b6:	e0 e3       	ldi	r30, 0x30	; 48
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_readPin+0x10e>
    17ca:	55 95       	asr	r21
    17cc:	47 95       	ror	r20
    17ce:	8a 95       	dec	r24
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_readPin+0x10a>
    17d2:	ca 01       	movw	r24, r20
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	88 23       	and	r24, r24
    17da:	19 f0       	breq	.+6      	; 0x17e2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <GPIO_setupPortDirection+0x6>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <GPIO_setupPortDirection+0x8>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	90 f5       	brcc	.+100    	; 0x1870 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3c 83       	std	Y+4, r19	; 0x04
    1814:	2b 83       	std	Y+3, r18	; 0x03
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	91 05       	cpc	r25, r1
    181e:	d1 f0       	breq	.+52     	; 0x1854 <GPIO_setupPortDirection+0x5e>
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	3c 81       	ldd	r19, Y+4	; 0x04
    1824:	22 30       	cpi	r18, 0x02	; 2
    1826:	31 05       	cpc	r19, r1
    1828:	2c f4       	brge	.+10     	; 0x1834 <GPIO_setupPortDirection+0x3e>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	61 f0       	breq	.+24     	; 0x184a <GPIO_setupPortDirection+0x54>
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <GPIO_setupPortDirection+0x7a>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	81 f0       	breq	.+32     	; 0x185e <GPIO_setupPortDirection+0x68>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	91 05       	cpc	r25, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <GPIO_setupPortDirection+0x72>
    1848:	13 c0       	rjmp	.+38     	; 0x1870 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    184a:	ea e3       	ldi	r30, 0x3A	; 58
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	80 83       	st	Z, r24
    1852:	0e c0       	rjmp	.+28     	; 0x1870 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1854:	e7 e3       	ldi	r30, 0x37	; 55
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 83       	st	Z, r24
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    185e:	e4 e3       	ldi	r30, 0x34	; 52
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	80 83       	st	Z, r24
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1868:	e1 e3       	ldi	r30, 0x31	; 49
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	00 d0       	rcall	.+0      	; 0x1884 <GPIO_writePort+0x6>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <GPIO_writePort+0x8>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	90 f5       	brcc	.+100    	; 0x18f8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3c 83       	std	Y+4, r19	; 0x04
    189c:	2b 83       	std	Y+3, r18	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 05       	cpc	r25, r1
    18a6:	d1 f0       	breq	.+52     	; 0x18dc <GPIO_writePort+0x5e>
    18a8:	2b 81       	ldd	r18, Y+3	; 0x03
    18aa:	3c 81       	ldd	r19, Y+4	; 0x04
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	2c f4       	brge	.+10     	; 0x18bc <GPIO_writePort+0x3e>
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	61 f0       	breq	.+24     	; 0x18d2 <GPIO_writePort+0x54>
    18ba:	1e c0       	rjmp	.+60     	; 0x18f8 <GPIO_writePort+0x7a>
    18bc:	2b 81       	ldd	r18, Y+3	; 0x03
    18be:	3c 81       	ldd	r19, Y+4	; 0x04
    18c0:	22 30       	cpi	r18, 0x02	; 2
    18c2:	31 05       	cpc	r19, r1
    18c4:	81 f0       	breq	.+32     	; 0x18e6 <GPIO_writePort+0x68>
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	91 05       	cpc	r25, r1
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <GPIO_writePort+0x72>
    18d0:	13 c0       	rjmp	.+38     	; 0x18f8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18d2:	eb e3       	ldi	r30, 0x3B	; 59
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	80 83       	st	Z, r24
    18da:	0e c0       	rjmp	.+28     	; 0x18f8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18dc:	e8 e3       	ldi	r30, 0x38	; 56
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	80 83       	st	Z, r24
    18e4:	09 c0       	rjmp	.+18     	; 0x18f8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18e6:	e5 e3       	ldi	r30, 0x35	; 53
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 83       	st	Z, r24
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18f0:	e2 e3       	ldi	r30, 0x32	; 50
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24
			break;
		}
	}
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <GPIO_readPort+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <GPIO_readPort+0x8>
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1914:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	90 f5       	brcc	.+100    	; 0x1980 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	3c 83       	std	Y+4, r19	; 0x04
    1924:	2b 83       	std	Y+3, r18	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	d1 f0       	breq	.+52     	; 0x1964 <GPIO_readPort+0x5e>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	2c f4       	brge	.+10     	; 0x1944 <GPIO_readPort+0x3e>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	61 f0       	breq	.+24     	; 0x195a <GPIO_readPort+0x54>
    1942:	1e c0       	rjmp	.+60     	; 0x1980 <GPIO_readPort+0x7a>
    1944:	2b 81       	ldd	r18, Y+3	; 0x03
    1946:	3c 81       	ldd	r19, Y+4	; 0x04
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <GPIO_readPort+0x68>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	91 05       	cpc	r25, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <GPIO_readPort+0x72>
    1958:	13 c0       	rjmp	.+38     	; 0x1980 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    195a:	e9 e3       	ldi	r30, 0x39	; 57
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1964:	e6 e3       	ldi	r30, 0x36	; 54
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	09 c0       	rjmp	.+18     	; 0x1980 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    196e:	e3 e3       	ldi	r30, 0x33	; 51
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1978:	e0 e3       	ldi	r30, 0x30	; 48
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DcMotor_Init>:

#include "motor.h"

// Initialize the DC Motor (set direction pins and stop the motor initially)
void DcMotor_Init(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	// Set Motor Control Pins as output
	GPIO_setupPinDirection(MOTOR_CTRL_PORT_1,MOTOR_CTRL_PIN_1,PIN_OUTPUT);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	66 e0       	ldi	r22, 0x06	; 6
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_CTRL_PORT_2,MOTOR_CTRL_PIN_2,PIN_OUTPUT);
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	67 e0       	ldi	r22, 0x07	; 7
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PWM_PORT,MOTOR_PWM_PIN,PIN_OUTPUT);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_setupPinDirection>

	// Stop the motor initially
	GPIO_writePin(MOTOR_CTRL_PORT_1,MOTOR_CTRL_PIN_1,LOGIC_LOW);
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	66 e0       	ldi	r22, 0x06	; 6
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
	GPIO_writePin(MOTOR_CTRL_PORT_2,MOTOR_CTRL_PIN_2,LOGIC_LOW);
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	67 e0       	ldi	r22, 0x07	; 7
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>

}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <DcMotor_Rotate>:



void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <DcMotor_Rotate+0x6>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <DcMotor_Rotate+0x8>
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	6a 83       	std	Y+2, r22	; 0x02
	// Ensure speed is between 0 and 100
	if (speed > 100)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	85 36       	cpi	r24, 0x65	; 101
    19e4:	10 f0       	brcs	.+4      	; 0x19ea <DcMotor_Rotate+0x1a>
	{
		speed = 100;
    19e6:	84 e6       	ldi	r24, 0x64	; 100
    19e8:	8a 83       	std	Y+2, r24	; 0x02
	}

	// Set the duty cycle for the PWM
	PWM_Timer0_Start(speed);
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <PWM_Timer0_Start>

	switch (state)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3c 83       	std	Y+4, r19	; 0x04
    19fc:	2b 83       	std	Y+3, r18	; 0x03
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <DcMotor_Rotate+0x44>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <DcMotor_Rotate+0x5a>
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <DcMotor_Rotate+0x70>
	{
	case CW:
		// Set control pins for clockwise rotation
		GPIO_writePin(MOTOR_CTRL_PORT_1,MOTOR_CTRL_PIN_1,LOGIC_LOW);
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	66 e0       	ldi	r22, 0x06	; 6
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
		GPIO_writePin(MOTOR_CTRL_PORT_2,MOTOR_CTRL_PIN_2,LOGIC_HIGH);
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	67 e0       	ldi	r22, 0x07	; 7
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
    1a28:	15 c0       	rjmp	.+42     	; 0x1a54 <DcMotor_Rotate+0x84>
		break;

	case ACW:
		// Set control pins for anti-clockwise rotation
		GPIO_writePin(MOTOR_CTRL_PORT_1,MOTOR_CTRL_PIN_1,LOGIC_LOW);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	66 e0       	ldi	r22, 0x06	; 6
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
		GPIO_writePin(MOTOR_CTRL_PORT_2,MOTOR_CTRL_PIN_2,LOGIC_HIGH);
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	67 e0       	ldi	r22, 0x07	; 7
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <DcMotor_Rotate+0x84>
		break;

	case STOP:
	default:
		// Stop the motor
		GPIO_writePin(MOTOR_CTRL_PORT_1,MOTOR_CTRL_PIN_1,LOGIC_LOW);
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	66 e0       	ldi	r22, 0x06	; 6
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
		GPIO_writePin(MOTOR_CTRL_PORT_2,MOTOR_CTRL_PIN_2,LOGIC_LOW);
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	67 e0       	ldi	r22, 0x07	; 7
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 75 0a 	call	0x14ea	; 0x14ea <GPIO_writePin>
		break;
	}

}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <PIR_init>:

/*
 * Description: Function to initialize the PIR sensor.
 */
void PIR_init(void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    // Set the PIR sensor pin as an input
    GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_INPUT);
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_setupPinDirection>
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <PIR_getState>:
/*
 * Description: Function to get the current state of the PIR sensor.
 *              Returns 1 if motion is detected, 0 if no motion.
 */
uint8 PIR_getState(void)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    // Read and return the state of the PIR sensor pin (1 = motion detected, 0 = no motion)
    return GPIO_readPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN);
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <GPIO_readPin>
}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <PWM_Timer0_Start>:

#include"pwm.h"


void PWM_Timer0_Start(uint8 duty_cycle)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	0f 92       	push	r0
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	if (duty_cycle > 100)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	85 36       	cpi	r24, 0x65	; 101
    1aa0:	10 f0       	brcs	.+4      	; 0x1aa6 <PWM_Timer0_Start+0x16>
	{
		duty_cycle = 100;  // Clamp to 100 if value exceeds 100
    1aa2:	84 e6       	ldi	r24, 0x64	; 100
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	else if (duty_cycle < 0)
	{
		duty_cycle = 0;    // Clamp to 0 if value is less than 0
	}
	// Set OC0 (Pin B3) as output
	 GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	63 e0       	ldi	r22, 0x03	; 3
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_setupPinDirection>

	// Configure Timer0 for Fast PWM mode with non-inverting output
	// Set WGM00 (Waveform Generation Mode) and WGM01 for Fast PWM, and COM01 for non-inverting
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01);
    1ab0:	e3 e5       	ldi	r30, 0x53	; 83
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	88 e6       	ldi	r24, 0x68	; 104
    1ab6:	80 83       	st	Z, r24

	// Set the pre-scaler to F_CPU/64
	TCCR0 |= (1 << CS01) | (1 << CS00);
    1ab8:	a3 e5       	ldi	r26, 0x53	; 83
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e3 e5       	ldi	r30, 0x53	; 83
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	83 60       	ori	r24, 0x03	; 3
    1ac4:	8c 93       	st	X, r24

	// Set the duty cycle (0-100%) by writing to OCR0
	// OCR0 = (duty_cycle / 100) * 255
	OCR0 = (duty_cycle * 255) / 100;
    1ac6:	ec e5       	ldi	r30, 0x5C	; 92
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	48 2f       	mov	r20, r24
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	9c 01       	movw	r18, r24
    1ad4:	22 0f       	add	r18, r18
    1ad6:	33 1f       	adc	r19, r19
    1ad8:	c9 01       	movw	r24, r18
    1ada:	96 95       	lsr	r25
    1adc:	98 2f       	mov	r25, r24
    1ade:	88 27       	eor	r24, r24
    1ae0:	97 95       	ror	r25
    1ae2:	87 95       	ror	r24
    1ae4:	82 1b       	sub	r24, r18
    1ae6:	93 0b       	sbc	r25, r19
    1ae8:	84 0f       	add	r24, r20
    1aea:	95 1f       	adc	r25, r21
    1aec:	24 e6       	ldi	r18, 0x64	; 100
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	b9 01       	movw	r22, r18
    1af2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__divmodhi4>
    1af6:	cb 01       	movw	r24, r22
    1af8:	80 83       	st	Z, r24
}
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <Timer_init>:
static void (*g_timer0CallBackPtr)(void) = NULL_PTR;
static void (*g_timer1CallBackPtr)(void) = NULL_PTR;
static void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/* Timer initialization function */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <Timer_init+0x6>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <Timer_init+0x8>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    1b12:	e9 81       	ldd	r30, Y+1	; 0x01
    1b14:	fa 81       	ldd	r31, Y+2	; 0x02
    1b16:	84 81       	ldd	r24, Z+4	; 0x04
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3c 83       	std	Y+4, r19	; 0x04
    1b1e:	2b 83       	std	Y+3, r18	; 0x03
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <Timer_init+0x2a>
    1b2a:	4c c0       	rjmp	.+152    	; 0x1bc4 <Timer_init+0xc2>
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <Timer_init+0x36>
    1b36:	8b c0       	rjmp	.+278    	; 0x1c4e <Timer_init+0x14c>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <Timer_init+0x40>
    1b40:	c6 c0       	rjmp	.+396    	; 0x1cce <Timer_init+0x1cc>
	case TIMER_0:
		/* Set initial value */
		TCNT0 = Config_Ptr->timer_InitialValue;
    1b42:	a2 e5       	ldi	r26, 0x52	; 82
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    1b50:	e9 81       	ldd	r30, Y+1	; 0x01
    1b52:	fa 81       	ldd	r31, Y+2	; 0x02
    1b54:	86 81       	ldd	r24, Z+6	; 0x06
    1b56:	88 23       	and	r24, r24
    1b58:	41 f4       	brne	.+16     	; 0x1b6a <Timer_init+0x68>
			TCCR0 |= (1 << FOC0);  // Normal mode
    1b5a:	a3 e5       	ldi	r26, 0x53	; 83
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e3 e5       	ldi	r30, 0x53	; 83
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 68       	ori	r24, 0x80	; 128
    1b66:	8c 93       	st	X, r24
    1b68:	0e c0       	rjmp	.+28     	; 0x1b86 <Timer_init+0x84>
		} else {
			TCCR0 |= (1 << WGM01);  // Compare mode
    1b6a:	a3 e5       	ldi	r26, 0x53	; 83
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e3 e5       	ldi	r30, 0x53	; 83
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 60       	ori	r24, 0x08	; 8
    1b76:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1b78:	ac e5       	ldi	r26, 0x5C	; 92
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR0 |= Config_Ptr->timer_clock;
    1b86:	a3 e5       	ldi	r26, 0x53	; 83
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e3 e5       	ldi	r30, 0x53	; 83
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	90 81       	ld	r25, Z
    1b90:	e9 81       	ldd	r30, Y+1	; 0x01
    1b92:	fa 81       	ldd	r31, Y+2	; 0x02
    1b94:	85 81       	ldd	r24, Z+5	; 0x05
    1b96:	89 2b       	or	r24, r25
    1b98:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ba0:	88 23       	and	r24, r24
    1ba2:	41 f4       	brne	.+16     	; 0x1bb4 <Timer_init+0xb2>
			TIMSK |= (1 << TOIE0);  // Overflow interrupt enable for TIMER0
    1ba4:	a9 e5       	ldi	r26, 0x59	; 89
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e9 e5       	ldi	r30, 0x59	; 89
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	81 60       	ori	r24, 0x01	; 1
    1bb0:	8c 93       	st	X, r24
    1bb2:	8d c0       	rjmp	.+282    	; 0x1cce <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE0);  // Output compare match interrupt enable for TIMER0
    1bb4:	a9 e5       	ldi	r26, 0x59	; 89
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e9 e5       	ldi	r30, 0x59	; 89
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	82 60       	ori	r24, 0x02	; 2
    1bc0:	8c 93       	st	X, r24
    1bc2:	85 c0       	rjmp	.+266    	; 0x1cce <Timer_init+0x1cc>
		}
		break;

	case TIMER_1:
		/* Set initial value */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1bc4:	ac e4       	ldi	r26, 0x4C	; 76
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	86 81       	ldd	r24, Z+6	; 0x06
    1bdc:	88 23       	and	r24, r24
    1bde:	41 f4       	brne	.+16     	; 0x1bf0 <Timer_init+0xee>
			TCCR1B |= (1 << FOC1A);  // Normal mode
    1be0:	ae e4       	ldi	r26, 0x4E	; 78
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ee e4       	ldi	r30, 0x4E	; 78
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	88 60       	ori	r24, 0x08	; 8
    1bec:	8c 93       	st	X, r24
    1bee:	10 c0       	rjmp	.+32     	; 0x1c10 <Timer_init+0x10e>
		} else {
			TCCR1B |= (1 << WGM12);  // Compare mode
    1bf0:	ae e4       	ldi	r26, 0x4E	; 78
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ee e4       	ldi	r30, 0x4E	; 78
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1bfe:	aa e4       	ldi	r26, 0x4A	; 74
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 81       	ldd	r30, Y+1	; 0x01
    1c04:	fa 81       	ldd	r31, Y+2	; 0x02
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	8e 93       	st	-X, r24
		}

		/* Set clock source */
		TCCR1B |= Config_Ptr->timer_clock;
    1c10:	ae e4       	ldi	r26, 0x4E	; 78
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	ee e4       	ldi	r30, 0x4E	; 78
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	90 81       	ld	r25, Z
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	85 81       	ldd	r24, Z+5	; 0x05
    1c20:	89 2b       	or	r24, r25
    1c22:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    1c24:	e9 81       	ldd	r30, Y+1	; 0x01
    1c26:	fa 81       	ldd	r31, Y+2	; 0x02
    1c28:	86 81       	ldd	r24, Z+6	; 0x06
    1c2a:	88 23       	and	r24, r24
    1c2c:	41 f4       	brne	.+16     	; 0x1c3e <Timer_init+0x13c>
			TIMSK |= (1 << TOIE1);  // Overflow interrupt enable for TIMER1
    1c2e:	a9 e5       	ldi	r26, 0x59	; 89
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e9 e5       	ldi	r30, 0x59	; 89
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	8c 93       	st	X, r24
    1c3c:	48 c0       	rjmp	.+144    	; 0x1cce <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE1A);  // Output compare match interrupt enable for TIMER1
    1c3e:	a9 e5       	ldi	r26, 0x59	; 89
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e9 e5       	ldi	r30, 0x59	; 89
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 61       	ori	r24, 0x10	; 16
    1c4a:	8c 93       	st	X, r24
    1c4c:	40 c0       	rjmp	.+128    	; 0x1cce <Timer_init+0x1cc>
		}
		break;

	case TIMER_2:
		/* Set initial value */
		TCNT2 = Config_Ptr->timer_InitialValue;
    1c4e:	a4 e4       	ldi	r26, 0x44	; 68
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    1c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c60:	86 81       	ldd	r24, Z+6	; 0x06
    1c62:	88 23       	and	r24, r24
    1c64:	41 f4       	brne	.+16     	; 0x1c76 <Timer_init+0x174>
			TCCR2 |= (1 << FOC2);  // Normal mode
    1c66:	a5 e4       	ldi	r26, 0x45	; 69
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e5 e4       	ldi	r30, 0x45	; 69
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 68       	ori	r24, 0x80	; 128
    1c72:	8c 93       	st	X, r24
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <Timer_init+0x190>
		} else {
			TCCR2 |= (1 << WGM21);  // Compare mode
    1c76:	a5 e4       	ldi	r26, 0x45	; 69
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e5 e4       	ldi	r30, 0x45	; 69
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	88 60       	ori	r24, 0x08	; 8
    1c82:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1c84:	a3 e4       	ldi	r26, 0x43	; 67
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR2 |= Config_Ptr->timer_clock;
    1c92:	a5 e4       	ldi	r26, 0x45	; 69
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e4       	ldi	r30, 0x45	; 69
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	90 81       	ld	r25, Z
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	85 81       	ldd	r24, Z+5	; 0x05
    1ca2:	89 2b       	or	r24, r25
    1ca4:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    1ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    1caa:	86 81       	ldd	r24, Z+6	; 0x06
    1cac:	88 23       	and	r24, r24
    1cae:	41 f4       	brne	.+16     	; 0x1cc0 <Timer_init+0x1be>
			TIMSK |= (1 << TOIE2);  // Overflow interrupt enable for TIMER2
    1cb0:	a9 e5       	ldi	r26, 0x59	; 89
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e9 e5       	ldi	r30, 0x59	; 89
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	80 64       	ori	r24, 0x40	; 64
    1cbc:	8c 93       	st	X, r24
    1cbe:	07 c0       	rjmp	.+14     	; 0x1cce <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE2);  // Output compare match interrupt enable for TIMER2
    1cc0:	a9 e5       	ldi	r26, 0x59	; 89
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e9 e5       	ldi	r30, 0x59	; 89
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 68       	ori	r24, 0x80	; 128
    1ccc:	8c 93       	st	X, r24
		}
		break;
	}
}
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Timer_deInit>:

/* Timer de-initialization function */
void Timer_deInit(Timer_ID_Type timer_type) {
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <Timer_deInit+0x6>
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3b 83       	std	Y+3, r19	; 0x03
    1cf2:	2a 83       	std	Y+2, r18	; 0x02
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	a1 f0       	breq	.+40     	; 0x1d26 <Timer_deInit+0x4a>
    1cfe:	2a 81       	ldd	r18, Y+2	; 0x02
    1d00:	3b 81       	ldd	r19, Y+3	; 0x03
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	d1 f0       	breq	.+52     	; 0x1d3c <Timer_deInit+0x60>
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	01 f5       	brne	.+64     	; 0x1d50 <Timer_deInit+0x74>
	case TIMER_0:
		TCCR0 = 0;
    1d10:	e3 e5       	ldi	r30, 0x53	; 83
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));  // Disable TIMER0 interrupts
    1d16:	a9 e5       	ldi	r26, 0x59	; 89
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e9 e5       	ldi	r30, 0x59	; 89
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8c 7f       	andi	r24, 0xFC	; 252
    1d22:	8c 93       	st	X, r24
    1d24:	15 c0       	rjmp	.+42     	; 0x1d50 <Timer_deInit+0x74>
		break;
	case TIMER_1:
		TCCR1B = 0;
    1d26:	ee e4       	ldi	r30, 0x4E	; 78
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));  // Disable TIMER1 interrupts
    1d2c:	a9 e5       	ldi	r26, 0x59	; 89
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e9 e5       	ldi	r30, 0x59	; 89
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8b 7e       	andi	r24, 0xEB	; 235
    1d38:	8c 93       	st	X, r24
    1d3a:	0a c0       	rjmp	.+20     	; 0x1d50 <Timer_deInit+0x74>
		break;
	case TIMER_2:
		TCCR2 = 0;
    1d3c:	e5 e4       	ldi	r30, 0x45	; 69
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));  // Disable TIMER2 interrupts
    1d42:	a9 e5       	ldi	r26, 0x59	; 89
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e9 e5       	ldi	r30, 0x59	; 89
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8f 73       	andi	r24, 0x3F	; 63
    1d4e:	8c 93       	st	X, r24
		break;
	}
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <Timer_setCallBack>:

/* Set callback function for timer interrupts */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <Timer_setCallBack+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <Timer_setCallBack+0x8>
    1d64:	0f 92       	push	r0
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_timer_ID) {
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3d 83       	std	Y+5, r19	; 0x05
    1d78:	2c 83       	std	Y+4, r18	; 0x04
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	81 f0       	breq	.+32     	; 0x1da4 <Timer_setCallBack+0x48>
    1d84:	2c 81       	ldd	r18, Y+4	; 0x04
    1d86:	3d 81       	ldd	r19, Y+5	; 0x05
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	91 f0       	breq	.+36     	; 0x1db2 <Timer_setCallBack+0x56>
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	a1 f4       	brne	.+40     	; 0x1dbe <Timer_setCallBack+0x62>
	case TIMER_0:
		g_timer0CallBackPtr = a_ptr;
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	90 93 7a 00 	sts	0x007A, r25
    1d9e:	80 93 79 00 	sts	0x0079, r24
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <Timer_setCallBack+0x62>
		break;
	case TIMER_1:
		g_timer1CallBackPtr = a_ptr;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	90 93 7c 00 	sts	0x007C, r25
    1dac:	80 93 7b 00 	sts	0x007B, r24
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <Timer_setCallBack+0x62>
		break;
	case TIMER_2:
		g_timer2CallBackPtr = a_ptr;
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	90 93 7e 00 	sts	0x007E, r25
    1dba:	80 93 7d 00 	sts	0x007D, r24
		break;
	}
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <__vector_11>:

/* ISR for TIMER0 overflow */
ISR(TIMER0_OVF_vect) {
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    1df8:	80 91 79 00 	lds	r24, 0x0079
    1dfc:	90 91 7a 00 	lds	r25, 0x007A
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <__vector_11+0x40>
		(*g_timer0CallBackPtr)();
    1e04:	e0 91 79 00 	lds	r30, 0x0079
    1e08:	f0 91 7a 00 	lds	r31, 0x007A
    1e0c:	09 95       	icall
	}
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	0f 90       	pop	r0
    1e30:	1f 90       	pop	r1
    1e32:	18 95       	reti

00001e34 <__vector_10>:

/* ISR for TIMER0 compare match */
ISR(TIMER0_COMP_vect) {
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    1e5e:	80 91 79 00 	lds	r24, 0x0079
    1e62:	90 91 7a 00 	lds	r25, 0x007A
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <__vector_10+0x40>
		(*g_timer0CallBackPtr)();
    1e6a:	e0 91 79 00 	lds	r30, 0x0079
    1e6e:	f0 91 7a 00 	lds	r31, 0x007A
    1e72:	09 95       	icall
	}
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	ff 91       	pop	r31
    1e7a:	ef 91       	pop	r30
    1e7c:	bf 91       	pop	r27
    1e7e:	af 91       	pop	r26
    1e80:	9f 91       	pop	r25
    1e82:	8f 91       	pop	r24
    1e84:	7f 91       	pop	r23
    1e86:	6f 91       	pop	r22
    1e88:	5f 91       	pop	r21
    1e8a:	4f 91       	pop	r20
    1e8c:	3f 91       	pop	r19
    1e8e:	2f 91       	pop	r18
    1e90:	0f 90       	pop	r0
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	0f 90       	pop	r0
    1e96:	1f 90       	pop	r1
    1e98:	18 95       	reti

00001e9a <__vector_9>:

/* ISR for TIMER1 overflow */
ISR(TIMER1_OVF_vect) {
    1e9a:	1f 92       	push	r1
    1e9c:	0f 92       	push	r0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	0f 92       	push	r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    1ec4:	80 91 7b 00 	lds	r24, 0x007B
    1ec8:	90 91 7c 00 	lds	r25, 0x007C
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	29 f0       	breq	.+10     	; 0x1eda <__vector_9+0x40>
		(*g_timer1CallBackPtr)();
    1ed0:	e0 91 7b 00 	lds	r30, 0x007B
    1ed4:	f0 91 7c 00 	lds	r31, 0x007C
    1ed8:	09 95       	icall
	}
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	0f 90       	pop	r0
    1efc:	1f 90       	pop	r1
    1efe:	18 95       	reti

00001f00 <__vector_7>:

/* ISR for TIMER1 compare match */
ISR(TIMER1_COMPA_vect) {
    1f00:	1f 92       	push	r1
    1f02:	0f 92       	push	r0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	0f 92       	push	r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	2f 93       	push	r18
    1f0c:	3f 93       	push	r19
    1f0e:	4f 93       	push	r20
    1f10:	5f 93       	push	r21
    1f12:	6f 93       	push	r22
    1f14:	7f 93       	push	r23
    1f16:	8f 93       	push	r24
    1f18:	9f 93       	push	r25
    1f1a:	af 93       	push	r26
    1f1c:	bf 93       	push	r27
    1f1e:	ef 93       	push	r30
    1f20:	ff 93       	push	r31
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    1f2a:	80 91 7b 00 	lds	r24, 0x007B
    1f2e:	90 91 7c 00 	lds	r25, 0x007C
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <__vector_7+0x40>
		(*g_timer1CallBackPtr)();
    1f36:	e0 91 7b 00 	lds	r30, 0x007B
    1f3a:	f0 91 7c 00 	lds	r31, 0x007C
    1f3e:	09 95       	icall
	}
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__vector_5>:

/* ISR for TIMER2 overflow */
ISR(TIMER2_OVF_vect) {
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	2f 93       	push	r18
    1f72:	3f 93       	push	r19
    1f74:	4f 93       	push	r20
    1f76:	5f 93       	push	r21
    1f78:	6f 93       	push	r22
    1f7a:	7f 93       	push	r23
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	af 93       	push	r26
    1f82:	bf 93       	push	r27
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    1f90:	80 91 7d 00 	lds	r24, 0x007D
    1f94:	90 91 7e 00 	lds	r25, 0x007E
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <__vector_5+0x40>
		(*g_timer2CallBackPtr)();
    1f9c:	e0 91 7d 00 	lds	r30, 0x007D
    1fa0:	f0 91 7e 00 	lds	r31, 0x007E
    1fa4:	09 95       	icall
	}
}
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	ff 91       	pop	r31
    1fac:	ef 91       	pop	r30
    1fae:	bf 91       	pop	r27
    1fb0:	af 91       	pop	r26
    1fb2:	9f 91       	pop	r25
    1fb4:	8f 91       	pop	r24
    1fb6:	7f 91       	pop	r23
    1fb8:	6f 91       	pop	r22
    1fba:	5f 91       	pop	r21
    1fbc:	4f 91       	pop	r20
    1fbe:	3f 91       	pop	r19
    1fc0:	2f 91       	pop	r18
    1fc2:	0f 90       	pop	r0
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	18 95       	reti

00001fcc <__vector_4>:

/* ISR for TIMER2 compare match */
ISR(TIMER2_COMP_vect) {
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	2f 93       	push	r18
    1fd8:	3f 93       	push	r19
    1fda:	4f 93       	push	r20
    1fdc:	5f 93       	push	r21
    1fde:	6f 93       	push	r22
    1fe0:	7f 93       	push	r23
    1fe2:	8f 93       	push	r24
    1fe4:	9f 93       	push	r25
    1fe6:	af 93       	push	r26
    1fe8:	bf 93       	push	r27
    1fea:	ef 93       	push	r30
    1fec:	ff 93       	push	r31
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    1ff6:	80 91 7d 00 	lds	r24, 0x007D
    1ffa:	90 91 7e 00 	lds	r25, 0x007E
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	29 f0       	breq	.+10     	; 0x200c <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    2002:	e0 91 7d 00 	lds	r30, 0x007D
    2006:	f0 91 7e 00 	lds	r31, 0x007E
    200a:	09 95       	icall
	}
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	bf 91       	pop	r27
    2016:	af 91       	pop	r26
    2018:	9f 91       	pop	r25
    201a:	8f 91       	pop	r24
    201c:	7f 91       	pop	r23
    201e:	6f 91       	pop	r22
    2020:	5f 91       	pop	r21
    2022:	4f 91       	pop	r20
    2024:	3f 91       	pop	r19
    2026:	2f 91       	pop	r18
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	0f 90       	pop	r0
    202e:	1f 90       	pop	r1
    2030:	18 95       	reti

00002032 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	00 d0       	rcall	.+0      	; 0x2038 <TWI_init+0x6>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
    /* Set bit rate register based on input configuration */
    TWBR = Config_Ptr->bit_rate;
    2040:	a0 e2       	ldi	r26, 0x20	; 32
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	81 81       	ldd	r24, Z+1	; 0x01
    204a:	8c 93       	st	X, r24

    /* Set pre-scaler to zero (TWPS = 00) */
    TWSR = 0x00;
    204c:	e1 e2       	ldi	r30, 0x21	; 33
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	10 82       	st	Z, r1

    /* Set device address based on input configuration */
    TWAR = (Config_Ptr->address << 1);  // Left shift for the address position
    2052:	a2 e2       	ldi	r26, 0x22	; 34
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e9 81       	ldd	r30, Y+1	; 0x01
    2058:	fa 81       	ldd	r31, Y+2	; 0x02
    205a:	80 81       	ld	r24, Z
    205c:	88 0f       	add	r24, r24
    205e:	8c 93       	st	X, r24

    /* Enable TWI module */
    TWCR = (1 << TWEN);
    2060:	e6 e5       	ldi	r30, 0x56	; 86
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	80 83       	st	Z, r24
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <TWI_start>:

void TWI_start(void)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    /* 
     * Clear the TWINT flag before sending the start bit TWINT=1
     * Send the start bit by TWSTA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    207a:	e6 e5       	ldi	r30, 0x56	; 86
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	84 ea       	ldi	r24, 0xA4	; 164
    2080:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is sent successfully) */
    while(BIT_IS_CLEAR(TWCR, TWINT));
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 23       	and	r24, r24
    208a:	dc f7       	brge	.-10     	; 0x2082 <TWI_start+0x10>
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <TWI_stop>:

void TWI_stop(void)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    /* 
     * Clear the TWINT flag before sending the stop bit TWINT=1
     * Send the stop bit by TWSTO=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    209a:	e6 e5       	ldi	r30, 0x56	; 86
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	84 e9       	ldi	r24, 0x94	; 148
    20a0:	80 83       	st	Z, r24
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	0f 92       	push	r0
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    20b4:	e3 e2       	ldi	r30, 0x23	; 35
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	80 83       	st	Z, r24

    /* 
     * Clear the TWINT flag before sending the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    20bc:	e6 e5       	ldi	r30, 0x56	; 86
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	84 e8       	ldi	r24, 0x84	; 132
    20c2:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data is sent successfully) */
    while(BIT_IS_CLEAR(TWCR, TWINT));
    20c4:	e6 e5       	ldi	r30, 0x56	; 86
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	88 23       	and	r24, r24
    20cc:	dc f7       	brge	.-10     	; 0x20c4 <TWI_writeByte+0x1c>
}
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable sending ACK after reading or receiving data TWEA=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    20de:	e6 e5       	ldi	r30, 0x56	; 86
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	84 ec       	ldi	r24, 0xC4	; 196
    20e4:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR, TWINT));
    20e6:	e6 e5       	ldi	r30, 0x56	; 86
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	88 23       	and	r24, r24
    20ee:	dc f7       	brge	.-10     	; 0x20e6 <TWI_readByteWithACK+0x10>

    /* Read Data */
    return TWDR;
    20f0:	e3 e2       	ldi	r30, 0x23	; 35
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
}
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    /*
     * Clear the TWINT flag before reading the data TWINT=1
     * Enable TWI Module TWEN=1
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2104:	e6 e5       	ldi	r30, 0x56	; 86
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	84 e8       	ldi	r24, 0x84	; 132
    210a:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR, TWINT));
    210c:	e6 e5       	ldi	r30, 0x56	; 86
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	88 23       	and	r24, r24
    2114:	dc f7       	brge	.-10     	; 0x210c <TWI_readByteWithNACK+0x10>

    /* Read Data */
    return TWDR;
    2116:	e3 e2       	ldi	r30, 0x23	; 35
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    return (TWSR & 0xF8);
    212a:	e1 e2       	ldi	r30, 0x21	; 33
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	88 7f       	andi	r24, 0xF8	; 248
}
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <UART_init>:
 *******************************************************************************/


/* UART_init to use UART_ConfigType */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <UART_init+0x6>
    213e:	00 d0       	rcall	.+0      	; 0x2140 <UART_init+0x8>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    2148:	1a 82       	std	Y+2, r1	; 0x02
    214a:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
    214c:	eb e2       	ldi	r30, 0x2B	; 43
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	80 83       	st	Z, r24

    /* Configure UCSRB based on data bits */
    UCSRB = (1 << RXEN) | (1 << TXEN);
    2154:	ea e2       	ldi	r30, 0x2A	; 42
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	88 e1       	ldi	r24, 0x18	; 24
    215a:	80 83       	st	Z, r24
    if (Config_Ptr->bit_data == 9) {
    215c:	eb 81       	ldd	r30, Y+3	; 0x03
    215e:	fc 81       	ldd	r31, Y+4	; 0x04
    2160:	80 81       	ld	r24, Z
    2162:	89 30       	cpi	r24, 0x09	; 9
    2164:	39 f4       	brne	.+14     	; 0x2174 <UART_init+0x3c>
        UCSRB |= (1<<URSEL) |(1 << UCSZ2);  // Set for 9-bit data mode if specified
    2166:	aa e2       	ldi	r26, 0x2A	; 42
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	ea e2       	ldi	r30, 0x2A	; 42
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	84 68       	ori	r24, 0x84	; 132
    2172:	8c 93       	st	X, r24

    /* Configure UCSRC for frame format, parity, and stop bits */


    /* Configure data bit size */
    if (Config_Ptr->bit_data == 8) {
    2174:	eb 81       	ldd	r30, Y+3	; 0x03
    2176:	fc 81       	ldd	r31, Y+4	; 0x04
    2178:	80 81       	ld	r24, Z
    217a:	88 30       	cpi	r24, 0x08	; 8
    217c:	41 f4       	brne	.+16     	; 0x218e <UART_init+0x56>
        UCSRC |=(1<<URSEL) | (1 << UCSZ1) | (1 << UCSZ0);  // 8-bit data
    217e:	a0 e4       	ldi	r26, 0x40	; 64
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e0 e4       	ldi	r30, 0x40	; 64
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	86 68       	ori	r24, 0x86	; 134
    218a:	8c 93       	st	X, r24
    218c:	34 c0       	rjmp	.+104    	; 0x21f6 <UART_init+0xbe>
    } else if (Config_Ptr->bit_data == 7) {
    218e:	eb 81       	ldd	r30, Y+3	; 0x03
    2190:	fc 81       	ldd	r31, Y+4	; 0x04
    2192:	80 81       	ld	r24, Z
    2194:	87 30       	cpi	r24, 0x07	; 7
    2196:	41 f4       	brne	.+16     	; 0x21a8 <UART_init+0x70>
        UCSRC |= (1<<URSEL) |(1 << UCSZ1);                 // 7-bit data
    2198:	a0 e4       	ldi	r26, 0x40	; 64
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e0 e4       	ldi	r30, 0x40	; 64
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	84 68       	ori	r24, 0x84	; 132
    21a4:	8c 93       	st	X, r24
    21a6:	27 c0       	rjmp	.+78     	; 0x21f6 <UART_init+0xbe>
    }
    else if (Config_Ptr->bit_data == 6) {
    21a8:	eb 81       	ldd	r30, Y+3	; 0x03
    21aa:	fc 81       	ldd	r31, Y+4	; 0x04
    21ac:	80 81       	ld	r24, Z
    21ae:	86 30       	cpi	r24, 0x06	; 6
    21b0:	41 f4       	brne	.+16     	; 0x21c2 <UART_init+0x8a>
            UCSRC |= (1<<URSEL) |(1 << UCSZ0);                 // 6-bit data
    21b2:	a0 e4       	ldi	r26, 0x40	; 64
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e0 e4       	ldi	r30, 0x40	; 64
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	82 68       	ori	r24, 0x82	; 130
    21be:	8c 93       	st	X, r24
    21c0:	1a c0       	rjmp	.+52     	; 0x21f6 <UART_init+0xbe>
        }
    else if (Config_Ptr->bit_data == 5) {
    21c2:	eb 81       	ldd	r30, Y+3	; 0x03
    21c4:	fc 81       	ldd	r31, Y+4	; 0x04
    21c6:	80 81       	ld	r24, Z
    21c8:	85 30       	cpi	r24, 0x05	; 5
    21ca:	a9 f4       	brne	.+42     	; 0x21f6 <UART_init+0xbe>
            UCSRC &=~ (1 << UCSZ0);                 // 5-bit data
    21cc:	a0 e4       	ldi	r26, 0x40	; 64
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e0 e4       	ldi	r30, 0x40	; 64
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	8d 7f       	andi	r24, 0xFD	; 253
    21d8:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ1);
    21da:	a0 e4       	ldi	r26, 0x40	; 64
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e0 e4       	ldi	r30, 0x40	; 64
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8b 7f       	andi	r24, 0xFB	; 251
    21e6:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ2);
    21e8:	a0 e4       	ldi	r26, 0x40	; 64
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e0 e4       	ldi	r30, 0x40	; 64
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8b 7f       	andi	r24, 0xFB	; 251
    21f4:	8c 93       	st	X, r24
        }


    /* Configure parity */
    if (Config_Ptr->parity == 1) {
    21f6:	eb 81       	ldd	r30, Y+3	; 0x03
    21f8:	fc 81       	ldd	r31, Y+4	; 0x04
    21fa:	81 81       	ldd	r24, Z+1	; 0x01
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	41 f4       	brne	.+16     	; 0x2210 <UART_init+0xd8>
        UCSRC |= (1 << UPM1);  // Even parity
    2200:	a0 e4       	ldi	r26, 0x40	; 64
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e0 e4       	ldi	r30, 0x40	; 64
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 62       	ori	r24, 0x20	; 32
    220c:	8c 93       	st	X, r24
    220e:	0c c0       	rjmp	.+24     	; 0x2228 <UART_init+0xf0>
    } else if (Config_Ptr->parity == 2) {
    2210:	eb 81       	ldd	r30, Y+3	; 0x03
    2212:	fc 81       	ldd	r31, Y+4	; 0x04
    2214:	81 81       	ldd	r24, Z+1	; 0x01
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	39 f4       	brne	.+14     	; 0x2228 <UART_init+0xf0>
        UCSRC |= (1 << UPM1) | (1 << UPM0);  // Odd parity
    221a:	a0 e4       	ldi	r26, 0x40	; 64
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e0 e4       	ldi	r30, 0x40	; 64
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 63       	ori	r24, 0x30	; 48
    2226:	8c 93       	st	X, r24
    }

    /* Configure stop bits */
    if (Config_Ptr->stop_bit == 2) {
    2228:	eb 81       	ldd	r30, Y+3	; 0x03
    222a:	fc 81       	ldd	r31, Y+4	; 0x04
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	39 f4       	brne	.+14     	; 0x2240 <UART_init+0x108>
        UCSRC |= (1 << USBS);  // 2 stop bits
    2232:	a0 e4       	ldi	r26, 0x40	; 64
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	88 60       	ori	r24, 0x08	; 8
    223e:	8c 93       	st	X, r24
    }

    /* Calculate the UBRR register value for the specified baud rate */
    ubrr_value = (uint16_t)((F_CPU / (Config_Ptr->baud_rate * 8UL)) - 1);
    2240:	eb 81       	ldd	r30, Y+3	; 0x03
    2242:	fc 81       	ldd	r31, Y+4	; 0x04
    2244:	83 81       	ldd	r24, Z+3	; 0x03
    2246:	94 81       	ldd	r25, Z+4	; 0x04
    2248:	a5 81       	ldd	r26, Z+5	; 0x05
    224a:	b6 81       	ldd	r27, Z+6	; 0x06
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	aa 1f       	adc	r26, r26
    2252:	bb 1f       	adc	r27, r27
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	aa 1f       	adc	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	9c 01       	movw	r18, r24
    2266:	ad 01       	movw	r20, r26
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	92 e1       	ldi	r25, 0x12	; 18
    226c:	aa e7       	ldi	r26, 0x7A	; 122
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodsi4>
    2278:	da 01       	movw	r26, r20
    227a:	c9 01       	movw	r24, r18
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01

    /* Set UBRR register */
    UBRRH = ubrr_value >> 8;
    2282:	e0 e4       	ldi	r30, 0x40	; 64
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	89 2f       	mov	r24, r25
    228c:	99 27       	eor	r25, r25
    228e:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    2290:	e9 e2       	ldi	r30, 0x29	; 41
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	80 83       	st	Z, r24
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22b2:	eb e2       	ldi	r30, 0x2B	; 43
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	80 72       	andi	r24, 0x20	; 32
    22be:	90 70       	andi	r25, 0x00	; 0
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	b9 f3       	breq	.-18     	; 0x22b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22c4:	ec e2       	ldi	r30, 0x2C	; 44
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22dc:	eb e2       	ldi	r30, 0x2B	; 43
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	dc f7       	brge	.-10     	; 0x22dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    22e6:	ec e2       	ldi	r30, 0x2C	; 44
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
}
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <UART_sendString+0x6>
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2302:	19 82       	std	Y+1, r1	; 0x01
    2304:	0e c0       	rjmp	.+28     	; 0x2322 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	9b 81       	ldd	r25, Y+3	; 0x03
    2310:	fc 01       	movw	r30, r24
    2312:	e2 0f       	add	r30, r18
    2314:	f3 1f       	adc	r31, r19
    2316:	80 81       	ld	r24, Z
    2318:	0e 94 53 11 	call	0x22a6	; 0x22a6 <UART_sendByte>
		i++;
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	fc 01       	movw	r30, r24
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	80 81       	ld	r24, Z
    2334:	88 23       	and	r24, r24
    2336:	39 f7       	brne	.-50     	; 0x2306 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <UART_receiveString+0xa>
    234e:	0f 92       	push	r0
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	9b 83       	std	Y+3, r25	; 0x03
    2356:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2358:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	8c 01       	movw	r16, r24
    2366:	02 0f       	add	r16, r18
    2368:	13 1f       	adc	r17, r19
    236a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
    236e:	f8 01       	movw	r30, r16
    2370:	80 83       	st	Z, r24
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	8c 01       	movw	r16, r24
    2386:	02 0f       	add	r16, r18
    2388:	13 1f       	adc	r17, r19
    238a:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <UART_recieveByte>
    238e:	f8 01       	movw	r30, r16
    2390:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	80 81       	ld	r24, Z
    23a4:	83 32       	cpi	r24, 0x23	; 35
    23a6:	31 f7       	brne	.-52     	; 0x2374 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	9b 81       	ldd	r25, Y+3	; 0x03
    23b2:	fc 01       	movw	r30, r24
    23b4:	e2 0f       	add	r30, r18
    23b6:	f3 1f       	adc	r31, r19
    23b8:	10 82       	st	Z, r1
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	08 95       	ret

000023ca <__divmodhi4>:
    23ca:	97 fb       	bst	r25, 7
    23cc:	09 2e       	mov	r0, r25
    23ce:	07 26       	eor	r0, r23
    23d0:	0a d0       	rcall	.+20     	; 0x23e6 <__divmodhi4_neg1>
    23d2:	77 fd       	sbrc	r23, 7
    23d4:	04 d0       	rcall	.+8      	; 0x23de <__divmodhi4_neg2>
    23d6:	2e d0       	rcall	.+92     	; 0x2434 <__udivmodhi4>
    23d8:	06 d0       	rcall	.+12     	; 0x23e6 <__divmodhi4_neg1>
    23da:	00 20       	and	r0, r0
    23dc:	1a f4       	brpl	.+6      	; 0x23e4 <__divmodhi4_exit>

000023de <__divmodhi4_neg2>:
    23de:	70 95       	com	r23
    23e0:	61 95       	neg	r22
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255

000023e4 <__divmodhi4_exit>:
    23e4:	08 95       	ret

000023e6 <__divmodhi4_neg1>:
    23e6:	f6 f7       	brtc	.-4      	; 0x23e4 <__divmodhi4_exit>
    23e8:	90 95       	com	r25
    23ea:	81 95       	neg	r24
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	08 95       	ret

000023f0 <__udivmodsi4>:
    23f0:	a1 e2       	ldi	r26, 0x21	; 33
    23f2:	1a 2e       	mov	r1, r26
    23f4:	aa 1b       	sub	r26, r26
    23f6:	bb 1b       	sub	r27, r27
    23f8:	fd 01       	movw	r30, r26
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__udivmodsi4_ep>

000023fc <__udivmodsi4_loop>:
    23fc:	aa 1f       	adc	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	ee 1f       	adc	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	a2 17       	cp	r26, r18
    2406:	b3 07       	cpc	r27, r19
    2408:	e4 07       	cpc	r30, r20
    240a:	f5 07       	cpc	r31, r21
    240c:	20 f0       	brcs	.+8      	; 0x2416 <__udivmodsi4_ep>
    240e:	a2 1b       	sub	r26, r18
    2410:	b3 0b       	sbc	r27, r19
    2412:	e4 0b       	sbc	r30, r20
    2414:	f5 0b       	sbc	r31, r21

00002416 <__udivmodsi4_ep>:
    2416:	66 1f       	adc	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	88 1f       	adc	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	1a 94       	dec	r1
    2420:	69 f7       	brne	.-38     	; 0x23fc <__udivmodsi4_loop>
    2422:	60 95       	com	r22
    2424:	70 95       	com	r23
    2426:	80 95       	com	r24
    2428:	90 95       	com	r25
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	bd 01       	movw	r22, r26
    2430:	cf 01       	movw	r24, r30
    2432:	08 95       	ret

00002434 <__udivmodhi4>:
    2434:	aa 1b       	sub	r26, r26
    2436:	bb 1b       	sub	r27, r27
    2438:	51 e1       	ldi	r21, 0x11	; 17
    243a:	07 c0       	rjmp	.+14     	; 0x244a <__udivmodhi4_ep>

0000243c <__udivmodhi4_loop>:
    243c:	aa 1f       	adc	r26, r26
    243e:	bb 1f       	adc	r27, r27
    2440:	a6 17       	cp	r26, r22
    2442:	b7 07       	cpc	r27, r23
    2444:	10 f0       	brcs	.+4      	; 0x244a <__udivmodhi4_ep>
    2446:	a6 1b       	sub	r26, r22
    2448:	b7 0b       	sbc	r27, r23

0000244a <__udivmodhi4_ep>:
    244a:	88 1f       	adc	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	5a 95       	dec	r21
    2450:	a9 f7       	brne	.-22     	; 0x243c <__udivmodhi4_loop>
    2452:	80 95       	com	r24
    2454:	90 95       	com	r25
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	08 95       	ret

0000245c <__prologue_saves__>:
    245c:	2f 92       	push	r2
    245e:	3f 92       	push	r3
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	ca 1b       	sub	r28, r26
    2486:	db 0b       	sbc	r29, r27
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	09 94       	ijmp

00002494 <__epilogue_restores__>:
    2494:	2a 88       	ldd	r2, Y+18	; 0x12
    2496:	39 88       	ldd	r3, Y+17	; 0x11
    2498:	48 88       	ldd	r4, Y+16	; 0x10
    249a:	5f 84       	ldd	r5, Y+15	; 0x0f
    249c:	6e 84       	ldd	r6, Y+14	; 0x0e
    249e:	7d 84       	ldd	r7, Y+13	; 0x0d
    24a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a6:	b9 84       	ldd	r11, Y+9	; 0x09
    24a8:	c8 84       	ldd	r12, Y+8	; 0x08
    24aa:	df 80       	ldd	r13, Y+7	; 0x07
    24ac:	ee 80       	ldd	r14, Y+6	; 0x06
    24ae:	fd 80       	ldd	r15, Y+5	; 0x05
    24b0:	0c 81       	ldd	r16, Y+4	; 0x04
    24b2:	1b 81       	ldd	r17, Y+3	; 0x03
    24b4:	aa 81       	ldd	r26, Y+2	; 0x02
    24b6:	b9 81       	ldd	r27, Y+1	; 0x01
    24b8:	ce 0f       	add	r28, r30
    24ba:	d1 1d       	adc	r29, r1
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	ed 01       	movw	r28, r26
    24c8:	08 95       	ret

000024ca <memcmp>:
    24ca:	fb 01       	movw	r30, r22
    24cc:	dc 01       	movw	r26, r24
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <memcmp+0xe>
    24d0:	8d 91       	ld	r24, X+
    24d2:	01 90       	ld	r0, Z+
    24d4:	80 19       	sub	r24, r0
    24d6:	21 f4       	brne	.+8      	; 0x24e0 <memcmp+0x16>
    24d8:	41 50       	subi	r20, 0x01	; 1
    24da:	50 40       	sbci	r21, 0x00	; 0
    24dc:	c8 f7       	brcc	.-14     	; 0x24d0 <memcmp+0x6>
    24de:	88 1b       	sub	r24, r24
    24e0:	99 0b       	sbc	r25, r25
    24e2:	08 95       	ret

000024e4 <_exit>:
    24e4:	f8 94       	cli

000024e6 <__stop_program>:
    24e6:	ff cf       	rjmp	.-2      	; 0x24e6 <__stop_program>
