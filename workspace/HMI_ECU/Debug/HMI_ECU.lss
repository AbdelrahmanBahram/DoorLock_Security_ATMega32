
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003aac  00003b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800170  00800170  00003c50  2**0
                  ALLOC
  3 .stab         00003720  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001396  00000000  00000000  00007370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008706  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a5ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c685  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__vector_4>
      14:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__vector_9>
      28:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__vector_10>
      2c:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <main>
      8a:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e5       	ldi	r26, 0x59	; 89
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e5       	ldi	r24, 0x59	; 89
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_callback>:
void handleLockout();
void showWaitingMessage();
void collectPasswords(uint8 *passBuffer1,uint8 *passBuffer2);
volatile uint16 tickCount = 0;  // Global tick counter

void Timer1_callback(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    tickCount++;  // Increment tick every compare match
     b4e:	80 91 72 01 	lds	r24, 0x0172
     b52:	90 91 73 01 	lds	r25, 0x0173
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 73 01 	sts	0x0173, r25
     b5c:	80 93 72 01 	sts	0x0172, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <initTimer1>:

void initTimer1(void) {
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	2c 97       	sbiw	r28, 0x0c	; 12
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
    Timer_ConfigType timerConfig = {0, 7812, TIMER_1, TIMER_CLOCK_1024, TIMER_COMPARE_MODE};  // 1-second interval with 8MHz clock
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	99 87       	std	Y+9, r25	; 0x09
     b80:	88 87       	std	Y+8, r24	; 0x08
     b82:	e1 e6       	ldi	r30, 0x61	; 97
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	fb 87       	std	Y+11, r31	; 0x0b
     b88:	ea 87       	std	Y+10, r30	; 0x0a
     b8a:	f7 e0       	ldi	r31, 0x07	; 7
     b8c:	fc 87       	std	Y+12, r31	; 0x0c
     b8e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b90:	fb 85       	ldd	r31, Y+11	; 0x0b
     b92:	00 80       	ld	r0, Z
     b94:	8a 85       	ldd	r24, Y+10	; 0x0a
     b96:	9b 85       	ldd	r25, Y+11	; 0x0b
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9b 87       	std	Y+11, r25	; 0x0b
     b9c:	8a 87       	std	Y+10, r24	; 0x0a
     b9e:	e8 85       	ldd	r30, Y+8	; 0x08
     ba0:	f9 85       	ldd	r31, Y+9	; 0x09
     ba2:	00 82       	st	Z, r0
     ba4:	88 85       	ldd	r24, Y+8	; 0x08
     ba6:	99 85       	ldd	r25, Y+9	; 0x09
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	99 87       	std	Y+9, r25	; 0x09
     bac:	88 87       	std	Y+8, r24	; 0x08
     bae:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb6:	ee 23       	and	r30, r30
     bb8:	51 f7       	brne	.-44     	; 0xb8e <initTimer1+0x28>
    Timer_init(&timerConfig);
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 d5 18 	call	0x31aa	; 0x31aa <Timer_init>
    Timer_setCallBack(Timer1_callback, TIMER_1);
     bc2:	83 ea       	ldi	r24, 0xA3	; 163
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	0e 94 02 1a 	call	0x3404	; 0x3404 <Timer_setCallBack>
}
     bcc:	2c 96       	adiw	r28, 0x0c	; 12
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <stopTimer1>:

void stopTimer1(void) {
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
    Timer_deInit(TIMER_1);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 c2 19 	call	0x3384	; 0x3384 <Timer_deInit>
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <main>:

int main(void) {
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	ab 97       	sbiw	r28, 0x2b	; 43
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	f8 94       	cli
     c00:	de bf       	out	0x3e, r29	; 62
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	cd bf       	out	0x3d, r28	; 61
    systemInit();
     c06:	0e 94 8c 07 	call	0xf18	; 0xf18 <systemInit>
    sei();
     c0a:	78 94       	sei
    LCD_displayString("Smart Door");
     c0c:	80 e6       	ldi	r24, 0x60	; 96
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_displayStringRowColumn(1, 0, "locking system");
     c14:	2b e6       	ldi	r18, 0x6B	; 107
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	aa e7       	ldi	r26, 0x7A	; 122
     c28:	b4 e4       	ldi	r27, 0x44	; 68
     c2a:	8f a3       	std	Y+39, r24	; 0x27
     c2c:	98 a7       	std	Y+40, r25	; 0x28
     c2e:	a9 a7       	std	Y+41, r26	; 0x29
     c30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	6f a1       	ldd	r22, Y+39	; 0x27
     c34:	78 a5       	ldd	r23, Y+40	; 0x28
     c36:	89 a5       	ldd	r24, Y+41	; 0x29
     c38:	9a a5       	ldd	r25, Y+42	; 0x2a
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a ef       	ldi	r20, 0xFA	; 250
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	8b a3       	std	Y+35, r24	; 0x23
     c4c:	9c a3       	std	Y+36, r25	; 0x24
     c4e:	ad a3       	std	Y+37, r26	; 0x25
     c50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c52:	6b a1       	ldd	r22, Y+35	; 0x23
     c54:	7c a1       	ldd	r23, Y+36	; 0x24
     c56:	8d a1       	ldd	r24, Y+37	; 0x25
     c58:	9e a1       	ldd	r25, Y+38	; 0x26
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <main+0x82>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9a a3       	std	Y+34, r25	; 0x22
     c70:	89 a3       	std	Y+33, r24	; 0x21
     c72:	3f c0       	rjmp	.+126    	; 0xcf2 <main+0x100>
	else if (__tmp > 65535)
     c74:	6b a1       	ldd	r22, Y+35	; 0x23
     c76:	7c a1       	ldd	r23, Y+36	; 0x24
     c78:	8d a1       	ldd	r24, Y+37	; 0x25
     c7a:	9e a1       	ldd	r25, Y+38	; 0x26
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c88:	18 16       	cp	r1, r24
     c8a:	4c f5       	brge	.+82     	; 0xcde <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8c:	6f a1       	ldd	r22, Y+39	; 0x27
     c8e:	78 a5       	ldd	r23, Y+40	; 0x28
     c90:	89 a5       	ldd	r24, Y+41	; 0x29
     c92:	9a a5       	ldd	r25, Y+42	; 0x2a
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	bc 01       	movw	r22, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	9a a3       	std	Y+34, r25	; 0x22
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <main+0xe2>
     cb6:	88 ec       	ldi	r24, 0xC8	; 200
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	98 a3       	std	Y+32, r25	; 0x20
     cbc:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cc0:	98 a1       	ldd	r25, Y+32	; 0x20
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <main+0xd0>
     cc6:	98 a3       	std	Y+32, r25	; 0x20
     cc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cca:	89 a1       	ldd	r24, Y+33	; 0x21
     ccc:	9a a1       	ldd	r25, Y+34	; 0x22
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	9a a3       	std	Y+34, r25	; 0x22
     cd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	89 a1       	ldd	r24, Y+33	; 0x21
     cd6:	9a a1       	ldd	r25, Y+34	; 0x22
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	69 f7       	brne	.-38     	; 0xcb6 <main+0xc4>
     cdc:	14 c0       	rjmp	.+40     	; 0xd06 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	6b a1       	ldd	r22, Y+35	; 0x23
     ce0:	7c a1       	ldd	r23, Y+36	; 0x24
     ce2:	8d a1       	ldd	r24, Y+37	; 0x25
     ce4:	9e a1       	ldd	r25, Y+38	; 0x26
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9a a3       	std	Y+34, r25	; 0x22
     cf0:	89 a3       	std	Y+33, r24	; 0x21
     cf2:	89 a1       	ldd	r24, Y+33	; 0x21
     cf4:	9a a1       	ldd	r25, Y+34	; 0x22
     cf6:	9e 8f       	std	Y+30, r25	; 0x1e
     cf8:	8d 8f       	std	Y+29, r24	; 0x1d
     cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x10c>
     d02:	9e 8f       	std	Y+30, r25	; 0x1e
     d04:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1000);
    LCD_clearScreen();
     d06:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    setPassword();
     d0a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <setPassword>

    while (1) {
        if (passInitialized) {
     d0e:	80 91 71 01 	lds	r24, 0x0171
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <main+0x126>
     d16:	fd c0       	rjmp	.+506    	; 0xf12 <main+0x320>
            showMainMenu();
     d18:	0e 94 12 09 	call	0x1224	; 0x1224 <showMainMenu>
            uint8 option = KEYPAD_getPressedKey();
     d1c:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
     d20:	8b a7       	std	Y+43, r24	; 0x2b
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	aa ef       	ldi	r26, 0xFA	; 250
     d28:	b3 e4       	ldi	r27, 0x43	; 67
     d2a:	89 8f       	std	Y+25, r24	; 0x19
     d2c:	9a 8f       	std	Y+26, r25	; 0x1a
     d2e:	ab 8f       	std	Y+27, r26	; 0x1b
     d30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d32:	69 8d       	ldd	r22, Y+25	; 0x19
     d34:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	4a ef       	ldi	r20, 0xFA	; 250
     d40:	54 e4       	ldi	r21, 0x44	; 68
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8d 8b       	std	Y+21, r24	; 0x15
     d4c:	9e 8b       	std	Y+22, r25	; 0x16
     d4e:	af 8b       	std	Y+23, r26	; 0x17
     d50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d52:	6d 89       	ldd	r22, Y+21	; 0x15
     d54:	7e 89       	ldd	r23, Y+22	; 0x16
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d66:	88 23       	and	r24, r24
     d68:	2c f4       	brge	.+10     	; 0xd74 <main+0x182>
		__ticks = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 8b       	std	Y+20, r25	; 0x14
     d70:	8b 8b       	std	Y+19, r24	; 0x13
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <main+0x200>
	else if (__tmp > 65535)
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	3f ef       	ldi	r19, 0xFF	; 255
     d80:	4f e7       	ldi	r20, 0x7F	; 127
     d82:	57 e4       	ldi	r21, 0x47	; 71
     d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d88:	18 16       	cp	r1, r24
     d8a:	4c f5       	brge	.+82     	; 0xdde <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8c:	69 8d       	ldd	r22, Y+25	; 0x19
     d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e2       	ldi	r20, 0x20	; 32
     d9a:	51 e4       	ldi	r21, 0x41	; 65
     d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9c 8b       	std	Y+20, r25	; 0x14
     db2:	8b 8b       	std	Y+19, r24	; 0x13
     db4:	0f c0       	rjmp	.+30     	; 0xdd4 <main+0x1e2>
     db6:	88 ec       	ldi	r24, 0xC8	; 200
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9a 8b       	std	Y+18, r25	; 0x12
     dbc:	89 8b       	std	Y+17, r24	; 0x11
     dbe:	89 89       	ldd	r24, Y+17	; 0x11
     dc0:	9a 89       	ldd	r25, Y+18	; 0x12
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <main+0x1d0>
     dc6:	9a 8b       	std	Y+18, r25	; 0x12
     dc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dca:	8b 89       	ldd	r24, Y+19	; 0x13
     dcc:	9c 89       	ldd	r25, Y+20	; 0x14
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	9c 8b       	std	Y+20, r25	; 0x14
     dd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f7       	brne	.-38     	; 0xdb6 <main+0x1c4>
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <main+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dde:	6d 89       	ldd	r22, Y+21	; 0x15
     de0:	7e 89       	ldd	r23, Y+22	; 0x16
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	9c 8b       	std	Y+20, r25	; 0x14
     df0:	8b 8b       	std	Y+19, r24	; 0x13
     df2:	8b 89       	ldd	r24, Y+19	; 0x13
     df4:	9c 89       	ldd	r25, Y+20	; 0x14
     df6:	98 8b       	std	Y+16, r25	; 0x10
     df8:	8f 87       	std	Y+15, r24	; 0x0f
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	98 89       	ldd	r25, Y+16	; 0x10
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <main+0x20c>
     e02:	98 8b       	std	Y+16, r25	; 0x10
     e04:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(500);  // Debounce delay

            if (option == OPEN_DOOR_CMD || option == CHANGE_PASS_CMD) {
     e06:	8b a5       	ldd	r24, Y+43	; 0x2b
     e08:	8b 32       	cpi	r24, 0x2B	; 43
     e0a:	19 f0       	breq	.+6      	; 0xe12 <main+0x220>
     e0c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e0e:	8d 32       	cpi	r24, 0x2D	; 45
     e10:	21 f4       	brne	.+8      	; 0xe1a <main+0x228>
                processCommand(option);
     e12:	8b a5       	ldd	r24, Y+43	; 0x2b
     e14:	0e 94 26 09 	call	0x124c	; 0x124c <processCommand>
     e18:	7a cf       	rjmp	.-268    	; 0xd0e <main+0x11c>
            } else {
                LCD_clearScreen();
     e1a:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
                LCD_displayStringRowColumn(1, 0, "Invalid Option");
     e1e:	2a e7       	ldi	r18, 0x7A	; 122
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	a9 01       	movw	r20, r18
     e28:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	aa e7       	ldi	r26, 0x7A	; 122
     e32:	b4 e4       	ldi	r27, 0x44	; 68
     e34:	8b 87       	std	Y+11, r24	; 0x0b
     e36:	9c 87       	std	Y+12, r25	; 0x0c
     e38:	ad 87       	std	Y+13, r26	; 0x0d
     e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	4a ef       	ldi	r20, 0xFA	; 250
     e4a:	54 e4       	ldi	r21, 0x44	; 68
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	8f 83       	std	Y+7, r24	; 0x07
     e56:	98 87       	std	Y+8, r25	; 0x08
     e58:	a9 87       	std	Y+9, r26	; 0x09
     e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5c:	6f 81       	ldd	r22, Y+7	; 0x07
     e5e:	78 85       	ldd	r23, Y+8	; 0x08
     e60:	89 85       	ldd	r24, Y+9	; 0x09
     e62:	9a 85       	ldd	r25, Y+10	; 0x0a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e70:	88 23       	and	r24, r24
     e72:	2c f4       	brge	.+10     	; 0xe7e <main+0x28c>
		__ticks = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	3f c0       	rjmp	.+126    	; 0xefc <main+0x30a>
	else if (__tmp > 65535)
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	3f ef       	ldi	r19, 0xFF	; 255
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e92:	18 16       	cp	r1, r24
     e94:	4c f5       	brge	.+82     	; 0xee8 <main+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e96:	6b 85       	ldd	r22, Y+11	; 0x0b
     e98:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e2       	ldi	r20, 0x20	; 32
     ea4:	51 e4       	ldi	r21, 0x41	; 65
     ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	0f c0       	rjmp	.+30     	; 0xede <main+0x2ec>
     ec0:	88 ec       	ldi	r24, 0xC8	; 200
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <main+0x2da>
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	69 f7       	brne	.-38     	; 0xec0 <main+0x2ce>
     ee6:	13 cf       	rjmp	.-474    	; 0xd0e <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	9e 81       	ldd	r25, Y+6	; 0x06
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <main+0x316>
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	fe ce       	rjmp	.-516    	; 0xd0e <main+0x11c>
                _delay_ms(1000);
            }
        } else {
            setPassword();
     f12:	0e 94 c5 07 	call	0xf8a	; 0xf8a <setPassword>
     f16:	fb ce       	rjmp	.-522    	; 0xd0e <main+0x11c>

00000f18 <systemInit>:
        }
    }
}

void systemInit() {
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	2c 97       	sbiw	r28, 0x0c	; 12
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
     f2c:	0e 94 aa 13 	call	0x2754	; 0x2754 <LCD_init>
    UART_ConfigType uartConfig = {8, 0, 1, 9600};
     f30:	ce 01       	movw	r24, r28
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	99 87       	std	Y+9, r25	; 0x09
     f36:	88 87       	std	Y+8, r24	; 0x08
     f38:	e8 e6       	ldi	r30, 0x68	; 104
     f3a:	f1 e0       	ldi	r31, 0x01	; 1
     f3c:	fb 87       	std	Y+11, r31	; 0x0b
     f3e:	ea 87       	std	Y+10, r30	; 0x0a
     f40:	f7 e0       	ldi	r31, 0x07	; 7
     f42:	fc 87       	std	Y+12, r31	; 0x0c
     f44:	ea 85       	ldd	r30, Y+10	; 0x0a
     f46:	fb 85       	ldd	r31, Y+11	; 0x0b
     f48:	00 80       	ld	r0, Z
     f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f4c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	9b 87       	std	Y+11, r25	; 0x0b
     f52:	8a 87       	std	Y+10, r24	; 0x0a
     f54:	e8 85       	ldd	r30, Y+8	; 0x08
     f56:	f9 85       	ldd	r31, Y+9	; 0x09
     f58:	00 82       	st	Z, r0
     f5a:	88 85       	ldd	r24, Y+8	; 0x08
     f5c:	99 85       	ldd	r25, Y+9	; 0x09
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	99 87       	std	Y+9, r25	; 0x09
     f62:	88 87       	std	Y+8, r24	; 0x08
     f64:	9c 85       	ldd	r25, Y+12	; 0x0c
     f66:	91 50       	subi	r25, 0x01	; 1
     f68:	9c 87       	std	Y+12, r25	; 0x0c
     f6a:	ec 85       	ldd	r30, Y+12	; 0x0c
     f6c:	ee 23       	and	r30, r30
     f6e:	51 f7       	brne	.-44     	; 0xf44 <systemInit+0x2c>
    UART_init(&uartConfig);
     f70:	ce 01       	movw	r24, r28
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	0e 94 6d 1b 	call	0x36da	; 0x36da <UART_init>
}
     f78:	2c 96       	adiw	r28, 0x0c	; 12
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <setPassword>:

void setPassword() {
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	6f 97       	sbiw	r28, 0x1f	; 31
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
    while (1) {
        collectPasswords(pass1, pass2);
     f9e:	84 e8       	ldi	r24, 0x84	; 132
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	2a e7       	ldi	r18, 0x7A	; 122
     fa4:	31 e0       	ldi	r19, 0x01	; 1
     fa6:	b9 01       	movw	r22, r18
     fa8:	0e 94 97 0a 	call	0x152e	; 0x152e <collectPasswords>

        // Send passwords to Control_ECU
        UART_sendByte(INIT_COMM);
     fac:	85 e1       	ldi	r24, 0x15	; 21
     fae:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
        for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     fb2:	1e 8e       	std	Y+30, r1	; 0x1e
     fb4:	0c c0       	rjmp	.+24     	; 0xfce <setPassword+0x44>
            UART_sendByte(pass1[i]);
     fb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	ec 57       	subi	r30, 0x7C	; 124
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	80 81       	ld	r24, Z
     fc4:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
    while (1) {
        collectPasswords(pass1, pass2);

        // Send passwords to Control_ECU
        UART_sendByte(INIT_COMM);
        for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     fc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	8e 8f       	std	Y+30, r24	; 0x1e
     fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	88 f3       	brcs	.-30     	; 0xfb6 <setPassword+0x2c>
            UART_sendByte(pass1[i]);
        }
        UART_sendByte(INIT_COMM);
     fd4:	85 e1       	ldi	r24, 0x15	; 21
     fd6:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
        for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     fda:	1d 8e       	std	Y+29, r1	; 0x1d
     fdc:	0c c0       	rjmp	.+24     	; 0xff6 <setPassword+0x6c>
            UART_sendByte(pass2[i]);
     fde:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	e6 58       	subi	r30, 0x86	; 134
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 81       	ld	r24, Z
     fec:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
        UART_sendByte(INIT_COMM);
        for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
            UART_sendByte(pass1[i]);
        }
        UART_sendByte(INIT_COMM);
        for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
     ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8d 8f       	std	Y+29, r24	; 0x1d
     ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff8:	85 30       	cpi	r24, 0x05	; 5
     ffa:	88 f3       	brcs	.-30     	; 0xfde <setPassword+0x54>
            UART_sendByte(pass2[i]);
        }

        uint8 matchStatus = UART_recieveByte();
     ffc:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_recieveByte>
    1000:	8f 8f       	std	Y+31, r24	; 0x1f
        if (matchStatus == 1) {
    1002:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	09 f0       	breq	.+2      	; 0x100a <setPassword+0x80>
    1008:	84 c0       	rjmp	.+264    	; 0x1112 <setPassword+0x188>
            LCD_clearScreen();
    100a:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
            LCD_displayString("Password Set!");
    100e:	89 e8       	ldi	r24, 0x89	; 137
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	aa e7       	ldi	r26, 0x7A	; 122
    101c:	b4 e4       	ldi	r27, 0x44	; 68
    101e:	89 8f       	std	Y+25, r24	; 0x19
    1020:	9a 8f       	std	Y+26, r25	; 0x1a
    1022:	ab 8f       	std	Y+27, r26	; 0x1b
    1024:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1026:	69 8d       	ldd	r22, Y+25	; 0x19
    1028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a ef       	ldi	r20, 0xFA	; 250
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8d 8b       	std	Y+21, r24	; 0x15
    1040:	9e 8b       	std	Y+22, r25	; 0x16
    1042:	af 8b       	std	Y+23, r26	; 0x17
    1044:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1046:	6d 89       	ldd	r22, Y+21	; 0x15
    1048:	7e 89       	ldd	r23, Y+22	; 0x16
    104a:	8f 89       	ldd	r24, Y+23	; 0x17
    104c:	98 8d       	ldd	r25, Y+24	; 0x18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105a:	88 23       	and	r24, r24
    105c:	2c f4       	brge	.+10     	; 0x1068 <setPassword+0xde>
		__ticks = 1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <setPassword+0x15c>
	else if (__tmp > 65535)
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107c:	18 16       	cp	r1, r24
    107e:	4c f5       	brge	.+82     	; 0x10d2 <setPassword+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1080:	69 8d       	ldd	r22, Y+25	; 0x19
    1082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <setPassword+0x13e>
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9a 8b       	std	Y+18, r25	; 0x12
    10b0:	89 8b       	std	Y+17, r24	; 0x11
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	9a 89       	ldd	r25, Y+18	; 0x12
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <setPassword+0x12c>
    10ba:	9a 8b       	std	Y+18, r25	; 0x12
    10bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9c 8b       	std	Y+20, r25	; 0x14
    10c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	69 f7       	brne	.-38     	; 0x10aa <setPassword+0x120>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <setPassword+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d2:	6d 89       	ldd	r22, Y+21	; 0x15
    10d4:	7e 89       	ldd	r23, Y+22	; 0x16
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	98 8b       	std	Y+16, r25	; 0x10
    10ec:	8f 87       	std	Y+15, r24	; 0x0f
    10ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f0:	98 89       	ldd	r25, Y+16	; 0x10
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <setPassword+0x168>
    10f6:	98 8b       	std	Y+16, r25	; 0x10
    10f8:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(1000);
            passInitialized = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 71 01 	sts	0x0171, r24
            _delay_ms(1000);
            passInitialized = 0;
            UART_sendByte(RETRY_CMD);
        }
    }
}
    1100:	6f 96       	adiw	r28, 0x1f	; 31
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret
            LCD_clearScreen();
            LCD_displayString("Password Set!");
            _delay_ms(1000);
            passInitialized = 1;
            break;
        } else if (matchStatus == 0) {
    1112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1114:	88 23       	and	r24, r24
    1116:	09 f0       	breq	.+2      	; 0x111a <setPassword+0x190>
    1118:	42 cf       	rjmp	.-380    	; 0xf9e <setPassword+0x14>
            LCD_clearScreen();
    111a:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
            LCD_displayString("Mismatch!");
    111e:	87 e9       	ldi	r24, 0x97	; 151
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
            LCD_displayStringRowColumn(1, 0, "Try Again");
    1126:	21 ea       	ldi	r18, 0xA1	; 161
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	aa e7       	ldi	r26, 0x7A	; 122
    113a:	b4 e4       	ldi	r27, 0x44	; 68
    113c:	8b 87       	std	Y+11, r24	; 0x0b
    113e:	9c 87       	std	Y+12, r25	; 0x0c
    1140:	ad 87       	std	Y+13, r26	; 0x0d
    1142:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1144:	6b 85       	ldd	r22, Y+11	; 0x0b
    1146:	7c 85       	ldd	r23, Y+12	; 0x0c
    1148:	8d 85       	ldd	r24, Y+13	; 0x0d
    114a:	9e 85       	ldd	r25, Y+14	; 0x0e
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	4a ef       	ldi	r20, 0xFA	; 250
    1152:	54 e4       	ldi	r21, 0x44	; 68
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8f 83       	std	Y+7, r24	; 0x07
    115e:	98 87       	std	Y+8, r25	; 0x08
    1160:	a9 87       	std	Y+9, r26	; 0x09
    1162:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1178:	88 23       	and	r24, r24
    117a:	2c f4       	brge	.+10     	; 0x1186 <setPassword+0x1fc>
		__ticks = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <setPassword+0x27a>
	else if (__tmp > 65535)
    1186:	6f 81       	ldd	r22, Y+7	; 0x07
    1188:	78 85       	ldd	r23, Y+8	; 0x08
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	4c f5       	brge	.+82     	; 0x11f0 <setPassword+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119e:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e2       	ldi	r20, 0x20	; 32
    11ac:	51 e4       	ldi	r21, 0x41	; 65
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <setPassword+0x25c>
    11c8:	88 ec       	ldi	r24, 0xC8	; 200
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	9c 83       	std	Y+4, r25	; 0x04
    11ce:	8b 83       	std	Y+3, r24	; 0x03
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <setPassword+0x24a>
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    11e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	69 f7       	brne	.-38     	; 0x11c8 <setPassword+0x23e>
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <setPassword+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f0:	6f 81       	ldd	r22, Y+7	; 0x07
    11f2:	78 85       	ldd	r23, Y+8	; 0x08
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <setPassword+0x286>
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(1000);
            passInitialized = 0;
    1218:	10 92 71 01 	sts	0x0171, r1
            UART_sendByte(RETRY_CMD);
    121c:	81 e1       	ldi	r24, 0x11	; 17
    121e:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
    1222:	bd ce       	rjmp	.-646    	; 0xf9e <setPassword+0x14>

00001224 <showMainMenu>:
        }
    }
}

void showMainMenu() {
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    LCD_clearScreen();
    122c:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    LCD_displayString("(+) Open Door");
    1230:	8b ea       	ldi	r24, 0xAB	; 171
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_displayStringRowColumn(1, 0, "(-) Change Pass");
    1238:	29 eb       	ldi	r18, 0xB9	; 185
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <processCommand>:

void processCommand(uint8 cmd) {
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	6e 97       	sbiw	r28, 0x1e	; 30
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	8e 8f       	std	Y+30, r24	; 0x1e
    failedAttempts = 0;
    1262:	10 92 70 01 	sts	0x0170, r1
    1266:	31 c1       	rjmp	.+610    	; 0x14ca <processCommand+0x27e>
    while (failedAttempts < MAX_ATTEMPTS) {
        inputPassword(enteredPass, "Enter Password:");
    1268:	8f e7       	ldi	r24, 0x7F	; 127
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	29 ec       	ldi	r18, 0xC9	; 201
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	b9 01       	movw	r22, r18
    1272:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <inputPassword>
        UART_sendByte(cmd);  // Send the selected command
    1276:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1278:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a8 ec       	ldi	r26, 0xC8	; 200
    1282:	b2 e4       	ldi	r27, 0x42	; 66
    1284:	89 8f       	std	Y+25, r24	; 0x19
    1286:	9a 8f       	std	Y+26, r25	; 0x1a
    1288:	ab 8f       	std	Y+27, r26	; 0x1b
    128a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128c:	69 8d       	ldd	r22, Y+25	; 0x19
    128e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	4a ef       	ldi	r20, 0xFA	; 250
    129a:	54 e4       	ldi	r21, 0x44	; 68
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	8d 8b       	std	Y+21, r24	; 0x15
    12a6:	9e 8b       	std	Y+22, r25	; 0x16
    12a8:	af 8b       	std	Y+23, r26	; 0x17
    12aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ac:	6d 89       	ldd	r22, Y+21	; 0x15
    12ae:	7e 89       	ldd	r23, Y+22	; 0x16
    12b0:	8f 89       	ldd	r24, Y+23	; 0x17
    12b2:	98 8d       	ldd	r25, Y+24	; 0x18
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e8       	ldi	r20, 0x80	; 128
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c0:	88 23       	and	r24, r24
    12c2:	2c f4       	brge	.+10     	; 0x12ce <processCommand+0x82>
		__ticks = 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 8b       	std	Y+20, r25	; 0x14
    12ca:	8b 8b       	std	Y+19, r24	; 0x13
    12cc:	3f c0       	rjmp	.+126    	; 0x134c <processCommand+0x100>
	else if (__tmp > 65535)
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	3f ef       	ldi	r19, 0xFF	; 255
    12da:	4f e7       	ldi	r20, 0x7F	; 127
    12dc:	57 e4       	ldi	r21, 0x47	; 71
    12de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	4c f5       	brge	.+82     	; 0x1338 <processCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e6:	69 8d       	ldd	r22, Y+25	; 0x19
    12e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e2       	ldi	r20, 0x20	; 32
    12f4:	51 e4       	ldi	r21, 0x41	; 65
    12f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9c 8b       	std	Y+20, r25	; 0x14
    130c:	8b 8b       	std	Y+19, r24	; 0x13
    130e:	0f c0       	rjmp	.+30     	; 0x132e <processCommand+0xe2>
    1310:	88 ec       	ldi	r24, 0xC8	; 200
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9a 8b       	std	Y+18, r25	; 0x12
    1316:	89 8b       	std	Y+17, r24	; 0x11
    1318:	89 89       	ldd	r24, Y+17	; 0x11
    131a:	9a 89       	ldd	r25, Y+18	; 0x12
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <processCommand+0xd0>
    1320:	9a 8b       	std	Y+18, r25	; 0x12
    1322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132e:	8b 89       	ldd	r24, Y+19	; 0x13
    1330:	9c 89       	ldd	r25, Y+20	; 0x14
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	69 f7       	brne	.-38     	; 0x1310 <processCommand+0xc4>
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <processCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1338:	6d 89       	ldd	r22, Y+21	; 0x15
    133a:	7e 89       	ldd	r23, Y+22	; 0x16
    133c:	8f 89       	ldd	r24, Y+23	; 0x17
    133e:	98 8d       	ldd	r25, Y+24	; 0x18
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9c 8b       	std	Y+20, r25	; 0x14
    134a:	8b 8b       	std	Y+19, r24	; 0x13
    134c:	8b 89       	ldd	r24, Y+19	; 0x13
    134e:	9c 89       	ldd	r25, Y+20	; 0x14
    1350:	98 8b       	std	Y+16, r25	; 0x10
    1352:	8f 87       	std	Y+15, r24	; 0x0f
    1354:	8f 85       	ldd	r24, Y+15	; 0x0f
    1356:	98 89       	ldd	r25, Y+16	; 0x10
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <processCommand+0x10c>
    135c:	98 8b       	std	Y+16, r25	; 0x10
    135e:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(100);  // Wait briefly for synchronization
        transmitPasswordToControl(enteredPass);
    1360:	8f e7       	ldi	r24, 0x7F	; 127
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <transmitPasswordToControl>

        uint8 response = UART_recieveByte();
    1368:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_recieveByte>
    136c:	8d 8f       	std	Y+29, r24	; 0x1d
        if (response == 1) {
    136e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	71 f5       	brne	.+92     	; 0x13d0 <processCommand+0x184>
            LCD_clearScreen();
    1374:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
            if (cmd == OPEN_DOOR_CMD) {
    1378:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137a:	8b 32       	cpi	r24, 0x2B	; 43
    137c:	11 f5       	brne	.+68     	; 0x13c2 <processCommand+0x176>
                LCD_displayString("Door is");
    137e:	89 ed       	ldi	r24, 0xD9	; 217
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
                LCD_moveCursor(1, 0);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>
                LCD_displayString("Unlocking...");
    138e:	81 ee       	ldi	r24, 0xE1	; 225
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
                initTimer1();
    1396:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
                tickCount = 0;
    139a:	10 92 73 01 	sts	0x0173, r1
    139e:	10 92 72 01 	sts	0x0172, r1
                while (tickCount < 15);  // Keep the motor running for 15 seconds
    13a2:	80 91 72 01 	lds	r24, 0x0172
    13a6:	90 91 73 01 	lds	r25, 0x0173
    13aa:	8f 30       	cpi	r24, 0x0F	; 15
    13ac:	91 05       	cpc	r25, r1
    13ae:	c8 f3       	brcs	.-14     	; 0x13a2 <processCommand+0x156>
                tickCount = 0;
    13b0:	10 92 73 01 	sts	0x0173, r1
    13b4:	10 92 72 01 	sts	0x0172, r1
                stopTimer1();
    13b8:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
                showWaitingMessage();
    13bc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <showWaitingMessage>
    13c0:	8b c0       	rjmp	.+278    	; 0x14d8 <processCommand+0x28c>
            } else if (cmd == CHANGE_PASS_CMD) {
    13c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c4:	8d 32       	cpi	r24, 0x2D	; 45
    13c6:	09 f0       	breq	.+2      	; 0x13ca <processCommand+0x17e>
    13c8:	87 c0       	rjmp	.+270    	; 0x14d8 <processCommand+0x28c>
                setPassword();  // Re-create password
    13ca:	0e 94 c5 07 	call	0xf8a	; 0xf8a <setPassword>
    13ce:	84 c0       	rjmp	.+264    	; 0x14d8 <processCommand+0x28c>
            }
            return;
        } else {
            LCD_clearScreen();
    13d0:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
            LCD_displayString("Incorrect Pass!");
    13d4:	8e ee       	ldi	r24, 0xEE	; 238
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	aa ef       	ldi	r26, 0xFA	; 250
    13e2:	b3 e4       	ldi	r27, 0x43	; 67
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	ad 87       	std	Y+13, r26	; 0x0d
    13ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a ef       	ldi	r20, 0xFA	; 250
    13fa:	54 e4       	ldi	r21, 0x44	; 68
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	8f 83       	std	Y+7, r24	; 0x07
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	a9 87       	std	Y+9, r26	; 0x09
    140a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <processCommand+0x1e2>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <processCommand+0x260>
	else if (__tmp > 65535)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <processCommand+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <processCommand+0x242>
    1470:	88 ec       	ldi	r24, 0xC8	; 200
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <processCommand+0x230>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <processCommand+0x224>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <processCommand+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <processCommand+0x26c>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            failedAttempts++;
    14c0:	80 91 70 01 	lds	r24, 0x0170
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	80 93 70 01 	sts	0x0170, r24
    LCD_displayStringRowColumn(1, 0, "(-) Change Pass");
}

void processCommand(uint8 cmd) {
    failedAttempts = 0;
    while (failedAttempts < MAX_ATTEMPTS) {
    14ca:	80 91 70 01 	lds	r24, 0x0170
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	08 f4       	brcc	.+2      	; 0x14d4 <processCommand+0x288>
    14d2:	ca ce       	rjmp	.-620    	; 0x1268 <processCommand+0x1c>
            LCD_displayString("Incorrect Pass!");
            _delay_ms(500);
            failedAttempts++;
        }
    }
    handleLockout();
    14d4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <handleLockout>
}
    14d8:	6e 96       	adiw	r28, 0x1e	; 30
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <handleLockout>:

void handleLockout() {
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    if (failedAttempts >= MAX_ATTEMPTS) {
    14f2:	80 91 70 01 	lds	r24, 0x0170
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	b8 f0       	brcs	.+46     	; 0x1528 <handleLockout+0x3e>
        initTimer1();
    14fa:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
        tickCount = 0;
    14fe:	10 92 73 01 	sts	0x0173, r1
    1502:	10 92 72 01 	sts	0x0172, r1
        LCD_clearScreen();
    1506:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
        LCD_displayString("System Locked!");
    150a:	8e ef       	ldi	r24, 0xFE	; 254
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
        while (tickCount < 60);  // Lock the system for 60 seconds (1 minute)
    1512:	80 91 72 01 	lds	r24, 0x0172
    1516:	90 91 73 01 	lds	r25, 0x0173
    151a:	8c 33       	cpi	r24, 0x3C	; 60
    151c:	91 05       	cpc	r25, r1
    151e:	c8 f3       	brcs	.-14     	; 0x1512 <handleLockout+0x28>
        failedAttempts = 0;
    1520:	10 92 70 01 	sts	0x0170, r1
        stopTimer1();
    1524:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
    }
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <collectPasswords>:

void collectPasswords(uint8 *passBuffer1, uint8 *passBuffer2) {
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	c0 54       	subi	r28, 0x40	; 64
    153c:	d0 40       	sbci	r29, 0x00	; 0
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	9e af       	std	Y+62, r25	; 0x3e
    154a:	8d af       	std	Y+61, r24	; 0x3d
    154c:	fe 01       	movw	r30, r28
    154e:	ff 96       	adiw	r30, 0x3f	; 63
    1550:	71 83       	std	Z+1, r23	; 0x01
    1552:	60 83       	st	Z, r22
    uint8 key1, key2;
    LCD_clearScreen();
    1554:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    LCD_displayString("Plz enter pass:");
    1558:	8d e0       	ldi	r24, 0x0D	; 13
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_moveCursor(1, 0);
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>

    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1568:	1a ae       	std	Y+58, r1	; 0x3a
    156a:	84 c0       	rjmp	.+264    	; 0x1674 <collectPasswords+0x146>
        *(passBuffer1 + i) = KEYPAD_getPressedKey();
    156c:	8a ad       	ldd	r24, Y+58	; 0x3a
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	8d ad       	ldd	r24, Y+61	; 0x3d
    1574:	9e ad       	ldd	r25, Y+62	; 0x3e
    1576:	8c 01       	movw	r16, r24
    1578:	02 0f       	add	r16, r18
    157a:	13 1f       	adc	r17, r19
    157c:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    1580:	f8 01       	movw	r30, r16
    1582:	80 83       	st	Z, r24
        LCD_displayCharacter('*');
    1584:	8a e2       	ldi	r24, 0x2A	; 42
    1586:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_displayCharacter>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	a6 e9       	ldi	r26, 0x96	; 150
    1590:	b3 e4       	ldi	r27, 0x43	; 67
    1592:	8d ab       	std	Y+53, r24	; 0x35
    1594:	9e ab       	std	Y+54, r25	; 0x36
    1596:	af ab       	std	Y+55, r26	; 0x37
    1598:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159a:	6d a9       	ldd	r22, Y+53	; 0x35
    159c:	7e a9       	ldd	r23, Y+54	; 0x36
    159e:	8f a9       	ldd	r24, Y+55	; 0x37
    15a0:	98 ad       	ldd	r25, Y+56	; 0x38
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a ef       	ldi	r20, 0xFA	; 250
    15a8:	54 e4       	ldi	r21, 0x44	; 68
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	89 ab       	std	Y+49, r24	; 0x31
    15b4:	9a ab       	std	Y+50, r25	; 0x32
    15b6:	ab ab       	std	Y+51, r26	; 0x33
    15b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ba:	69 a9       	ldd	r22, Y+49	; 0x31
    15bc:	7a a9       	ldd	r23, Y+50	; 0x32
    15be:	8b a9       	ldd	r24, Y+51	; 0x33
    15c0:	9c a9       	ldd	r25, Y+52	; 0x34
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	2c f4       	brge	.+10     	; 0x15dc <collectPasswords+0xae>
		__ticks = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	98 ab       	std	Y+48, r25	; 0x30
    15d8:	8f a7       	std	Y+47, r24	; 0x2f
    15da:	3f c0       	rjmp	.+126    	; 0x165a <collectPasswords+0x12c>
	else if (__tmp > 65535)
    15dc:	69 a9       	ldd	r22, Y+49	; 0x31
    15de:	7a a9       	ldd	r23, Y+50	; 0x32
    15e0:	8b a9       	ldd	r24, Y+51	; 0x33
    15e2:	9c a9       	ldd	r25, Y+52	; 0x34
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f0:	18 16       	cp	r1, r24
    15f2:	4c f5       	brge	.+82     	; 0x1646 <collectPasswords+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	6d a9       	ldd	r22, Y+53	; 0x35
    15f6:	7e a9       	ldd	r23, Y+54	; 0x36
    15f8:	8f a9       	ldd	r24, Y+55	; 0x37
    15fa:	98 ad       	ldd	r25, Y+56	; 0x38
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	98 ab       	std	Y+48, r25	; 0x30
    161a:	8f a7       	std	Y+47, r24	; 0x2f
    161c:	0f c0       	rjmp	.+30     	; 0x163c <collectPasswords+0x10e>
    161e:	88 ec       	ldi	r24, 0xC8	; 200
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e a7       	std	Y+46, r25	; 0x2e
    1624:	8d a7       	std	Y+45, r24	; 0x2d
    1626:	8d a5       	ldd	r24, Y+45	; 0x2d
    1628:	9e a5       	ldd	r25, Y+46	; 0x2e
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <collectPasswords+0xfc>
    162e:	9e a7       	std	Y+46, r25	; 0x2e
    1630:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8f a5       	ldd	r24, Y+47	; 0x2f
    1634:	98 a9       	ldd	r25, Y+48	; 0x30
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	98 ab       	std	Y+48, r25	; 0x30
    163a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8f a5       	ldd	r24, Y+47	; 0x2f
    163e:	98 a9       	ldd	r25, Y+48	; 0x30
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <collectPasswords+0xf0>
    1644:	14 c0       	rjmp	.+40     	; 0x166e <collectPasswords+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	69 a9       	ldd	r22, Y+49	; 0x31
    1648:	7a a9       	ldd	r23, Y+50	; 0x32
    164a:	8b a9       	ldd	r24, Y+51	; 0x33
    164c:	9c a9       	ldd	r25, Y+52	; 0x34
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	98 ab       	std	Y+48, r25	; 0x30
    1658:	8f a7       	std	Y+47, r24	; 0x2f
    165a:	8f a5       	ldd	r24, Y+47	; 0x2f
    165c:	98 a9       	ldd	r25, Y+48	; 0x30
    165e:	9c a7       	std	Y+44, r25	; 0x2c
    1660:	8b a7       	std	Y+43, r24	; 0x2b
    1662:	8b a5       	ldd	r24, Y+43	; 0x2b
    1664:	9c a5       	ldd	r25, Y+44	; 0x2c
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <collectPasswords+0x138>
    166a:	9c a7       	std	Y+44, r25	; 0x2c
    166c:	8b a7       	std	Y+43, r24	; 0x2b
    uint8 key1, key2;
    LCD_clearScreen();
    LCD_displayString("Plz enter pass:");
    LCD_moveCursor(1, 0);

    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    166e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	8a af       	std	Y+58, r24	; 0x3a
    1674:	8a ad       	ldd	r24, Y+58	; 0x3a
    1676:	85 30       	cpi	r24, 0x05	; 5
    1678:	08 f4       	brcc	.+2      	; 0x167c <collectPasswords+0x14e>
    167a:	78 cf       	rjmp	.-272    	; 0x156c <collectPasswords+0x3e>
    167c:	75 c0       	rjmp	.+234    	; 0x1768 <collectPasswords+0x23a>
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key1 != CONFIRM_KEY) {
        key1 = KEYPAD_getPressedKey();
    167e:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    1682:	8c af       	std	Y+60, r24	; 0x3c
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	aa ef       	ldi	r26, 0xFA	; 250
    168a:	b3 e4       	ldi	r27, 0x43	; 67
    168c:	8f a3       	std	Y+39, r24	; 0x27
    168e:	98 a7       	std	Y+40, r25	; 0x28
    1690:	a9 a7       	std	Y+41, r26	; 0x29
    1692:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6f a1       	ldd	r22, Y+39	; 0x27
    1696:	78 a5       	ldd	r23, Y+40	; 0x28
    1698:	89 a5       	ldd	r24, Y+41	; 0x29
    169a:	9a a5       	ldd	r25, Y+42	; 0x2a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8b a3       	std	Y+35, r24	; 0x23
    16ae:	9c a3       	std	Y+36, r25	; 0x24
    16b0:	ad a3       	std	Y+37, r26	; 0x25
    16b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16b4:	6b a1       	ldd	r22, Y+35	; 0x23
    16b6:	7c a1       	ldd	r23, Y+36	; 0x24
    16b8:	8d a1       	ldd	r24, Y+37	; 0x25
    16ba:	9e a1       	ldd	r25, Y+38	; 0x26
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <collectPasswords+0x1a8>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9a a3       	std	Y+34, r25	; 0x22
    16d2:	89 a3       	std	Y+33, r24	; 0x21
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <collectPasswords+0x226>
	else if (__tmp > 65535)
    16d6:	6b a1       	ldd	r22, Y+35	; 0x23
    16d8:	7c a1       	ldd	r23, Y+36	; 0x24
    16da:	8d a1       	ldd	r24, Y+37	; 0x25
    16dc:	9e a1       	ldd	r25, Y+38	; 0x26
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <collectPasswords+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6f a1       	ldd	r22, Y+39	; 0x27
    16f0:	78 a5       	ldd	r23, Y+40	; 0x28
    16f2:	89 a5       	ldd	r24, Y+41	; 0x29
    16f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9a a3       	std	Y+34, r25	; 0x22
    1714:	89 a3       	std	Y+33, r24	; 0x21
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <collectPasswords+0x208>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	98 a3       	std	Y+32, r25	; 0x20
    171e:	8f 8f       	std	Y+31, r24	; 0x1f
    1720:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1722:	98 a1       	ldd	r25, Y+32	; 0x20
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <collectPasswords+0x1f6>
    1728:	98 a3       	std	Y+32, r25	; 0x20
    172a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	89 a1       	ldd	r24, Y+33	; 0x21
    172e:	9a a1       	ldd	r25, Y+34	; 0x22
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9a a3       	std	Y+34, r25	; 0x22
    1734:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	89 a1       	ldd	r24, Y+33	; 0x21
    1738:	9a a1       	ldd	r25, Y+34	; 0x22
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <collectPasswords+0x1ea>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <collectPasswords+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6b a1       	ldd	r22, Y+35	; 0x23
    1742:	7c a1       	ldd	r23, Y+36	; 0x24
    1744:	8d a1       	ldd	r24, Y+37	; 0x25
    1746:	9e a1       	ldd	r25, Y+38	; 0x26
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9a a3       	std	Y+34, r25	; 0x22
    1752:	89 a3       	std	Y+33, r24	; 0x21
    1754:	89 a1       	ldd	r24, Y+33	; 0x21
    1756:	9a a1       	ldd	r25, Y+34	; 0x22
    1758:	9e 8f       	std	Y+30, r25	; 0x1e
    175a:	8d 8f       	std	Y+29, r24	; 0x1d
    175c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    175e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <collectPasswords+0x232>
    1764:	9e 8f       	std	Y+30, r25	; 0x1e
    1766:	8d 8f       	std	Y+29, r24	; 0x1d
        LCD_displayCharacter('*');
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key1 != CONFIRM_KEY) {
    1768:	8c ad       	ldd	r24, Y+60	; 0x3c
    176a:	8d 30       	cpi	r24, 0x0D	; 13
    176c:	09 f0       	breq	.+2      	; 0x1770 <collectPasswords+0x242>
    176e:	87 cf       	rjmp	.-242    	; 0x167e <collectPasswords+0x150>
        key1 = KEYPAD_getPressedKey();
        _delay_ms(500);
    }

    LCD_clearScreen();
    1770:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    LCD_displayString("Plz re-enter");
    1774:	8d e1       	ldi	r24, 0x1D	; 29
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_moveCursor(1, 0);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>
    LCD_displayString("same pass:");
    1784:	8a e2       	ldi	r24, 0x2A	; 42
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_moveCursor(1, 10);
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	6a e0       	ldi	r22, 0x0A	; 10
    1790:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1794:	19 ae       	std	Y+57, r1	; 0x39
    1796:	86 c0       	rjmp	.+268    	; 0x18a4 <collectPasswords+0x376>
        *(passBuffer2 + i) = KEYPAD_getPressedKey();
    1798:	89 ad       	ldd	r24, Y+57	; 0x39
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	fe 01       	movw	r30, r28
    17a0:	ff 96       	adiw	r30, 0x3f	; 63
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	8c 01       	movw	r16, r24
    17a8:	02 0f       	add	r16, r18
    17aa:	13 1f       	adc	r17, r19
    17ac:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 83       	st	Z, r24
        LCD_displayCharacter('*');
    17b4:	8a e2       	ldi	r24, 0x2A	; 42
    17b6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_displayCharacter>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a6 e9       	ldi	r26, 0x96	; 150
    17c0:	b3 e4       	ldi	r27, 0x43	; 67
    17c2:	89 8f       	std	Y+25, r24	; 0x19
    17c4:	9a 8f       	std	Y+26, r25	; 0x1a
    17c6:	ab 8f       	std	Y+27, r26	; 0x1b
    17c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	69 8d       	ldd	r22, Y+25	; 0x19
    17cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a ef       	ldi	r20, 0xFA	; 250
    17d8:	54 e4       	ldi	r21, 0x44	; 68
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8d 8b       	std	Y+21, r24	; 0x15
    17e4:	9e 8b       	std	Y+22, r25	; 0x16
    17e6:	af 8b       	std	Y+23, r26	; 0x17
    17e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <collectPasswords+0x2de>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9c 8b       	std	Y+20, r25	; 0x14
    1808:	8b 8b       	std	Y+19, r24	; 0x13
    180a:	3f c0       	rjmp	.+126    	; 0x188a <collectPasswords+0x35c>
	else if (__tmp > 65535)
    180c:	6d 89       	ldd	r22, Y+21	; 0x15
    180e:	7e 89       	ldd	r23, Y+22	; 0x16
    1810:	8f 89       	ldd	r24, Y+23	; 0x17
    1812:	98 8d       	ldd	r25, Y+24	; 0x18
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <collectPasswords+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	69 8d       	ldd	r22, Y+25	; 0x19
    1826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9c 8b       	std	Y+20, r25	; 0x14
    184a:	8b 8b       	std	Y+19, r24	; 0x13
    184c:	0f c0       	rjmp	.+30     	; 0x186c <collectPasswords+0x33e>
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9a 8b       	std	Y+18, r25	; 0x12
    1854:	89 8b       	std	Y+17, r24	; 0x11
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	9a 89       	ldd	r25, Y+18	; 0x12
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <collectPasswords+0x32c>
    185e:	9a 8b       	std	Y+18, r25	; 0x12
    1860:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8b 89       	ldd	r24, Y+19	; 0x13
    1864:	9c 89       	ldd	r25, Y+20	; 0x14
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8b 89       	ldd	r24, Y+19	; 0x13
    186e:	9c 89       	ldd	r25, Y+20	; 0x14
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <collectPasswords+0x320>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <collectPasswords+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6d 89       	ldd	r22, Y+21	; 0x15
    1878:	7e 89       	ldd	r23, Y+22	; 0x16
    187a:	8f 89       	ldd	r24, Y+23	; 0x17
    187c:	98 8d       	ldd	r25, Y+24	; 0x18
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	8f 87       	std	Y+15, r24	; 0x0f
    1892:	8f 85       	ldd	r24, Y+15	; 0x0f
    1894:	98 89       	ldd	r25, Y+16	; 0x10
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <collectPasswords+0x368>
    189a:	98 8b       	std	Y+16, r25	; 0x10
    189c:	8f 87       	std	Y+15, r24	; 0x0f
    LCD_clearScreen();
    LCD_displayString("Plz re-enter");
    LCD_moveCursor(1, 0);
    LCD_displayString("same pass:");
    LCD_moveCursor(1, 10);
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    189e:	89 ad       	ldd	r24, Y+57	; 0x39
    18a0:	8f 5f       	subi	r24, 0xFF	; 255
    18a2:	89 af       	std	Y+57, r24	; 0x39
    18a4:	89 ad       	ldd	r24, Y+57	; 0x39
    18a6:	85 30       	cpi	r24, 0x05	; 5
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <collectPasswords+0x37e>
    18aa:	76 cf       	rjmp	.-276    	; 0x1798 <collectPasswords+0x26a>
    18ac:	75 c0       	rjmp	.+234    	; 0x1998 <collectPasswords+0x46a>
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key2 != CONFIRM_KEY) {
        key2 = KEYPAD_getPressedKey();
    18ae:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    18b2:	8b af       	std	Y+59, r24	; 0x3b
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	aa ef       	ldi	r26, 0xFA	; 250
    18ba:	b3 e4       	ldi	r27, 0x43	; 67
    18bc:	8b 87       	std	Y+11, r24	; 0x0b
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	ad 87       	std	Y+13, r26	; 0x0d
    18c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a ef       	ldi	r20, 0xFA	; 250
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8f 83       	std	Y+7, r24	; 0x07
    18de:	98 87       	std	Y+8, r25	; 0x08
    18e0:	a9 87       	std	Y+9, r26	; 0x09
    18e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <collectPasswords+0x3d8>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <collectPasswords+0x456>
	else if (__tmp > 65535)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <collectPasswords+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <collectPasswords+0x438>
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <collectPasswords+0x426>
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <collectPasswords+0x41a>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <collectPasswords+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <collectPasswords+0x462>
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
        LCD_displayCharacter('*');
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key2 != CONFIRM_KEY) {
    1998:	8b ad       	ldd	r24, Y+59	; 0x3b
    199a:	8d 30       	cpi	r24, 0x0D	; 13
    199c:	09 f0       	breq	.+2      	; 0x19a0 <collectPasswords+0x472>
    199e:	87 cf       	rjmp	.-242    	; 0x18ae <collectPasswords+0x380>
        key2 = KEYPAD_getPressedKey();
        _delay_ms(500);
    }
}
    19a0:	c0 5c       	subi	r28, 0xC0	; 192
    19a2:	df 4f       	sbci	r29, 0xFF	; 255
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <inputPassword>:

void inputPassword(uint8 *passBuffer, const char *prompt) {
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	a2 97       	sbiw	r28, 0x22	; 34
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	98 a3       	std	Y+32, r25	; 0x20
    19d2:	8f 8f       	std	Y+31, r24	; 0x1f
    19d4:	7a a3       	std	Y+34, r23	; 0x22
    19d6:	69 a3       	std	Y+33, r22	; 0x21
    uint8 key;
    LCD_clearScreen();
    19d8:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    LCD_displayString(prompt);
    19dc:	89 a1       	ldd	r24, Y+33	; 0x21
    19de:	9a a1       	ldd	r25, Y+34	; 0x22
    19e0:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_moveCursor(1, 0);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>

    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    19ec:	1d 8e       	std	Y+29, r1	; 0x1d
    19ee:	84 c0       	rjmp	.+264    	; 0x1af8 <inputPassword+0x140>
        *(passBuffer + i) = KEYPAD_getPressedKey();
    19f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19f8:	98 a1       	ldd	r25, Y+32	; 0x20
    19fa:	8c 01       	movw	r16, r24
    19fc:	02 0f       	add	r16, r18
    19fe:	13 1f       	adc	r17, r19
    1a00:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    1a04:	f8 01       	movw	r30, r16
    1a06:	80 83       	st	Z, r24
        LCD_displayCharacter('*');
    1a08:	8a e2       	ldi	r24, 0x2A	; 42
    1a0a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_displayCharacter>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a6 e9       	ldi	r26, 0x96	; 150
    1a14:	b3 e4       	ldi	r27, 0x43	; 67
    1a16:	89 8f       	std	Y+25, r24	; 0x19
    1a18:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	af 8b       	std	Y+23, r26	; 0x17
    1a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <inputPassword+0xa8>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <inputPassword+0x126>
	else if (__tmp > 65535)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <inputPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <inputPassword+0x108>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	89 8b       	std	Y+17, r24	; 0x11
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <inputPassword+0xf6>
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <inputPassword+0xea>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <inputPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6d 89       	ldd	r22, Y+21	; 0x15
    1acc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ace:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <inputPassword+0x132>
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
    uint8 key;
    LCD_clearScreen();
    LCD_displayString(prompt);
    LCD_moveCursor(1, 0);

    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	8d 8f       	std	Y+29, r24	; 0x1d
    1af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1afa:	85 30       	cpi	r24, 0x05	; 5
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <inputPassword+0x148>
    1afe:	78 cf       	rjmp	.-272    	; 0x19f0 <inputPassword+0x38>
    1b00:	75 c0       	rjmp	.+234    	; 0x1bec <inputPassword+0x234>
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key != CONFIRM_KEY) {
        key = KEYPAD_getPressedKey();
    1b02:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_getPressedKey>
    1b06:	8e 8f       	std	Y+30, r24	; 0x1e
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	aa ef       	ldi	r26, 0xFA	; 250
    1b0e:	b3 e4       	ldi	r27, 0x43	; 67
    1b10:	8b 87       	std	Y+11, r24	; 0x0b
    1b12:	9c 87       	std	Y+12, r25	; 0x0c
    1b14:	ad 87       	std	Y+13, r26	; 0x0d
    1b16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8f 83       	std	Y+7, r24	; 0x07
    1b32:	98 87       	std	Y+8, r25	; 0x08
    1b34:	a9 87       	std	Y+9, r26	; 0x09
    1b36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <inputPassword+0x1a2>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <inputPassword+0x220>
	else if (__tmp > 65535)
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <inputPassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <inputPassword+0x202>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 83       	std	Y+4, r25	; 0x04
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <inputPassword+0x1f0>
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <inputPassword+0x1e4>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <inputPassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc6:	78 85       	ldd	r23, Y+8	; 0x08
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9e 83       	std	Y+6, r25	; 0x06
    1bd6:	8d 83       	std	Y+5, r24	; 0x05
    1bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bda:	9e 81       	ldd	r25, Y+6	; 0x06
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <inputPassword+0x22c>
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
        LCD_displayCharacter('*');
        _delay_ms(300);
    }

    // Wait for Enter key
    while (key != CONFIRM_KEY) {
    1bec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bee:	8d 30       	cpi	r24, 0x0D	; 13
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <inputPassword+0x23c>
    1bf2:	87 cf       	rjmp	.-242    	; 0x1b02 <inputPassword+0x14a>
        key = KEYPAD_getPressedKey();
        _delay_ms(500);
    }
}
    1bf4:	a2 96       	adiw	r28, 0x22	; 34
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	08 95       	ret

00001c0a <transmitPasswordToControl>:

void transmitPasswordToControl(uint8 pass[]) {
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <transmitPasswordToControl+0x6>
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    UART_sendByte(INIT_COMM);
    1c1a:	85 e1       	ldi	r24, 0x15	; 21
    1c1c:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1c20:	19 82       	std	Y+1, r1	; 0x01
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <transmitPasswordToControl+0x36>
        UART_sendByte(pass[i]);
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2e:	fc 01       	movw	r30, r24
    1c30:	e2 0f       	add	r30, r18
    1c32:	f3 1f       	adc	r31, r19
    1c34:	80 81       	ld	r24, Z
    1c36:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
    }
}

void transmitPasswordToControl(uint8 pass[]) {
    UART_sendByte(INIT_COMM);
    for (uint8 i = 0; i < PASSWORD_SIZE; i++) {
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	85 30       	cpi	r24, 0x05	; 5
    1c44:	78 f3       	brcs	.-34     	; 0x1c24 <transmitPasswordToControl+0x1a>
        UART_sendByte(pass[i]);
    }
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <showWaitingMessage>:

void showWaitingMessage() {
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	2f 97       	sbiw	r28, 0x0f	; 15
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    LCD_clearScreen();
    1c66:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
    LCD_displayString("Wait for people");
    1c6a:	85 e3       	ldi	r24, 0x35	; 53
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
    LCD_displayStringRowColumn(1, 0, "to enter");
    1c72:	25 e4       	ldi	r18, 0x45	; 69
    1c74:	31 e0       	ldi	r19, 0x01	; 1
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	a9 01       	movw	r20, r18
    1c7c:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	aa e7       	ldi	r26, 0x7A	; 122
    1c86:	b4 e4       	ldi	r27, 0x44	; 68
    1c88:	8b 87       	std	Y+11, r24	; 0x0b
    1c8a:	9c 87       	std	Y+12, r25	; 0x0c
    1c8c:	ad 87       	std	Y+13, r26	; 0x0d
    1c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8f 83       	std	Y+7, r24	; 0x07
    1caa:	98 87       	std	Y+8, r25	; 0x08
    1cac:	a9 87       	std	Y+9, r26	; 0x09
    1cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <showWaitingMessage+0x80>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <showWaitingMessage+0xfe>
	else if (__tmp > 65535)
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <showWaitingMessage+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <showWaitingMessage+0xe0>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9c 83       	std	Y+4, r25	; 0x04
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <showWaitingMessage+0xce>
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <showWaitingMessage+0xc2>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <showWaitingMessage+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9e 83       	std	Y+6, r25	; 0x06
    1d4e:	8d 83       	std	Y+5, r24	; 0x05
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <showWaitingMessage+0x10a>
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    while (1) {
        uint8 pirStatus = UART_recieveByte();
    1d64:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_recieveByte>
    1d68:	8f 87       	std	Y+15, r24	; 0x0f
        if (pirStatus == 0) {
    1d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6c:	88 23       	and	r24, r24
    1d6e:	d1 f7       	brne	.-12     	; 0x1d64 <showWaitingMessage+0x112>
            LCD_clearScreen();
    1d70:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_clearScreen>
            LCD_displayString("Door is");
    1d74:	89 ed       	ldi	r24, 0xD9	; 217
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
            LCD_displayStringRowColumn(1, 0, "locking...");
    1d7c:	2e e4       	ldi	r18, 0x4E	; 78
    1d7e:	31 e0       	ldi	r19, 0x01	; 1
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_displayStringRowColumn>
            initTimer1();
    1d8a:	0e 94 b3 05 	call	0xb66	; 0xb66 <initTimer1>
            tickCount = 0;
    1d8e:	10 92 73 01 	sts	0x0173, r1
    1d92:	10 92 72 01 	sts	0x0172, r1
            while (tickCount < 15);  // Keep the motor running for 15 seconds
    1d96:	80 91 72 01 	lds	r24, 0x0172
    1d9a:	90 91 73 01 	lds	r25, 0x0173
    1d9e:	8f 30       	cpi	r24, 0x0F	; 15
    1da0:	91 05       	cpc	r25, r1
    1da2:	c8 f3       	brcs	.-14     	; 0x1d96 <showWaitingMessage+0x144>
            tickCount = 0;
    1da4:	10 92 73 01 	sts	0x0173, r1
    1da8:	10 92 72 01 	sts	0x0172, r1
            stopTimer1();
    1dac:	0e 94 ef 05 	call	0xbde	; 0xbde <stopTimer1>
            break;
        }
    }
    1db0:	2f 96       	adiw	r28, 0x0f	; 15
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <GPIO_setupPinDirection+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <GPIO_setupPinDirection+0x8>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	6a 83       	std	Y+2, r22	; 0x02
    1dd4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	88 30       	cpi	r24, 0x08	; 8
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <GPIO_setupPinDirection+0x1c>
    1ddc:	d5 c0       	rjmp	.+426    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <GPIO_setupPinDirection+0x24>
    1de4:	d1 c0       	rjmp	.+418    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <GPIO_setupPinDirection+0x3a>
    1dfa:	43 c0       	rjmp	.+134    	; 0x1e82 <GPIO_setupPinDirection+0xc0>
    1dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <GPIO_setupPinDirection+0x4e>
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	71 f0       	breq	.+28     	; 0x1e2a <GPIO_setupPinDirection+0x68>
    1e0e:	bc c0       	rjmp	.+376    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <GPIO_setupPinDirection+0x5a>
    1e1a:	5f c0       	rjmp	.+190    	; 0x1eda <GPIO_setupPinDirection+0x118>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <GPIO_setupPinDirection+0x66>
    1e26:	85 c0       	rjmp	.+266    	; 0x1f32 <GPIO_setupPinDirection+0x170>
    1e28:	af c0       	rjmp	.+350    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	a1 f4       	brne	.+40     	; 0x1e58 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e30:	aa e3       	ldi	r26, 0x3A	; 58
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ea e3       	ldi	r30, 0x3A	; 58
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <GPIO_setupPinDirection+0x8c>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <GPIO_setupPinDirection+0x88>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	98 c0       	rjmp	.+304    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e58:	aa e3       	ldi	r26, 0x3A	; 58
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ea e3       	ldi	r30, 0x3A	; 58
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_setupPinDirection+0xb4>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_setupPinDirection+0xb0>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	83 c0       	rjmp	.+262    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	a1 f4       	brne	.+40     	; 0x1eb0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e88:	a7 e3       	ldi	r26, 0x37	; 55
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e7 e3       	ldi	r30, 0x37	; 55
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <GPIO_setupPinDirection+0xe4>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <GPIO_setupPinDirection+0xe0>
    1eaa:	84 2b       	or	r24, r20
    1eac:	8c 93       	st	X, r24
    1eae:	6c c0       	rjmp	.+216    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1eb0:	a7 e3       	ldi	r26, 0x37	; 55
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e7 e3       	ldi	r30, 0x37	; 55
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <GPIO_setupPinDirection+0x10c>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <GPIO_setupPinDirection+0x108>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	57 c0       	rjmp	.+174    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	a1 f4       	brne	.+40     	; 0x1f08 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ee0:	a4 e3       	ldi	r26, 0x34	; 52
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e4 e3       	ldi	r30, 0x34	; 52
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	02 2e       	mov	r0, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <GPIO_setupPinDirection+0x13c>
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	0a 94       	dec	r0
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <GPIO_setupPinDirection+0x138>
    1f02:	84 2b       	or	r24, r20
    1f04:	8c 93       	st	X, r24
    1f06:	40 c0       	rjmp	.+128    	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f08:	a4 e3       	ldi	r26, 0x34	; 52
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e4 e3       	ldi	r30, 0x34	; 52
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <GPIO_setupPinDirection+0x164>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <GPIO_setupPinDirection+0x160>
    1f2a:	80 95       	com	r24
    1f2c:	84 23       	and	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	2b c0       	rjmp	.+86     	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	a1 f4       	brne	.+40     	; 0x1f60 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f38:	a1 e3       	ldi	r26, 0x31	; 49
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e1 e3       	ldi	r30, 0x31	; 49
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	48 2f       	mov	r20, r24
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 2e       	mov	r0, r18
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <GPIO_setupPinDirection+0x194>
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	0a 94       	dec	r0
    1f58:	e2 f7       	brpl	.-8      	; 0x1f52 <GPIO_setupPinDirection+0x190>
    1f5a:	84 2b       	or	r24, r20
    1f5c:	8c 93       	st	X, r24
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f60:	a1 e3       	ldi	r26, 0x31	; 49
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e1 e3       	ldi	r30, 0x31	; 49
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	02 2e       	mov	r0, r18
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <GPIO_setupPinDirection+0x1bc>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	0a 94       	dec	r0
    1f80:	e2 f7       	brpl	.-8      	; 0x1f7a <GPIO_setupPinDirection+0x1b8>
    1f82:	80 95       	com	r24
    1f84:	84 23       	and	r24, r20
    1f86:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret

00001f98 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f98:	df 93       	push	r29
    1f9a:	cf 93       	push	r28
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <GPIO_writePin+0x6>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <GPIO_writePin+0x8>
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	6a 83       	std	Y+2, r22	; 0x02
    1faa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	88 30       	cpi	r24, 0x08	; 8
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <GPIO_writePin+0x1c>
    1fb2:	d5 c0       	rjmp	.+426    	; 0x215e <GPIO_writePin+0x1c6>
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <GPIO_writePin+0x24>
    1fba:	d1 c0       	rjmp	.+418    	; 0x215e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	3d 83       	std	Y+5, r19	; 0x05
    1fc4:	2c 83       	std	Y+4, r18	; 0x04
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <GPIO_writePin+0x3a>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <GPIO_writePin+0xc0>
    1fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <GPIO_writePin+0x4e>
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	71 f0       	breq	.+28     	; 0x2000 <GPIO_writePin+0x68>
    1fe4:	bc c0       	rjmp	.+376    	; 0x215e <GPIO_writePin+0x1c6>
    1fe6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <GPIO_writePin+0x5a>
    1ff0:	5f c0       	rjmp	.+190    	; 0x20b0 <GPIO_writePin+0x118>
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <GPIO_writePin+0x66>
    1ffc:	85 c0       	rjmp	.+266    	; 0x2108 <GPIO_writePin+0x170>
    1ffe:	af c0       	rjmp	.+350    	; 0x215e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	a1 f4       	brne	.+40     	; 0x202e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <GPIO_writePin+0x8c>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <GPIO_writePin+0x88>
    2028:	84 2b       	or	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	98 c0       	rjmp	.+304    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    202e:	ab e3       	ldi	r26, 0x3B	; 59
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	eb e3       	ldi	r30, 0x3B	; 59
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_writePin+0xb4>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_writePin+0xb0>
    2050:	80 95       	com	r24
    2052:	84 23       	and	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	83 c0       	rjmp	.+262    	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	a1 f4       	brne	.+40     	; 0x2086 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    205e:	a8 e3       	ldi	r26, 0x38	; 56
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e8 e3       	ldi	r30, 0x38	; 56
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	02 2e       	mov	r0, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <GPIO_writePin+0xe4>
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	0a 94       	dec	r0
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <GPIO_writePin+0xe0>
    2080:	84 2b       	or	r24, r20
    2082:	8c 93       	st	X, r24
    2084:	6c c0       	rjmp	.+216    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2086:	a8 e3       	ldi	r26, 0x38	; 56
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <GPIO_writePin+0x10c>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <GPIO_writePin+0x108>
    20a8:	80 95       	com	r24
    20aa:	84 23       	and	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	57 c0       	rjmp	.+174    	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	81 30       	cpi	r24, 0x01	; 1
    20b4:	a1 f4       	brne	.+40     	; 0x20de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    20b6:	a5 e3       	ldi	r26, 0x35	; 53
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e5 e3       	ldi	r30, 0x35	; 53
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	48 2f       	mov	r20, r24
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 2e       	mov	r0, r18
    20ce:	02 c0       	rjmp	.+4      	; 0x20d4 <GPIO_writePin+0x13c>
    20d0:	88 0f       	add	r24, r24
    20d2:	99 1f       	adc	r25, r25
    20d4:	0a 94       	dec	r0
    20d6:	e2 f7       	brpl	.-8      	; 0x20d0 <GPIO_writePin+0x138>
    20d8:	84 2b       	or	r24, r20
    20da:	8c 93       	st	X, r24
    20dc:	40 c0       	rjmp	.+128    	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    20de:	a5 e3       	ldi	r26, 0x35	; 53
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e3       	ldi	r30, 0x35	; 53
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_writePin+0x164>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_writePin+0x160>
    2100:	80 95       	com	r24
    2102:	84 23       	and	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	2b c0       	rjmp	.+86     	; 0x215e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	81 30       	cpi	r24, 0x01	; 1
    210c:	a1 f4       	brne	.+40     	; 0x2136 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    210e:	a2 e3       	ldi	r26, 0x32	; 50
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e2 e3       	ldi	r30, 0x32	; 50
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <GPIO_writePin+0x194>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <GPIO_writePin+0x190>
    2130:	84 2b       	or	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	14 c0       	rjmp	.+40     	; 0x215e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2136:	a2 e3       	ldi	r26, 0x32	; 50
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e2 e3       	ldi	r30, 0x32	; 50
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <GPIO_writePin+0x1bc>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <GPIO_writePin+0x1b8>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <GPIO_readPin+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <GPIO_readPin+0x8>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2180:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	88 30       	cpi	r24, 0x08	; 8
    2186:	08 f0       	brcs	.+2      	; 0x218a <GPIO_readPin+0x1c>
    2188:	84 c0       	rjmp	.+264    	; 0x2292 <GPIO_readPin+0x124>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	08 f0       	brcs	.+2      	; 0x2192 <GPIO_readPin+0x24>
    2190:	80 c0       	rjmp	.+256    	; 0x2292 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	3d 83       	std	Y+5, r19	; 0x05
    219a:	2c 83       	std	Y+4, r18	; 0x04
    219c:	4c 81       	ldd	r20, Y+4	; 0x04
    219e:	5d 81       	ldd	r21, Y+5	; 0x05
    21a0:	41 30       	cpi	r20, 0x01	; 1
    21a2:	51 05       	cpc	r21, r1
    21a4:	79 f1       	breq	.+94     	; 0x2204 <GPIO_readPin+0x96>
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	91 05       	cpc	r25, r1
    21ae:	34 f4       	brge	.+12     	; 0x21bc <GPIO_readPin+0x4e>
    21b0:	2c 81       	ldd	r18, Y+4	; 0x04
    21b2:	3d 81       	ldd	r19, Y+5	; 0x05
    21b4:	21 15       	cp	r18, r1
    21b6:	31 05       	cpc	r19, r1
    21b8:	69 f0       	breq	.+26     	; 0x21d4 <GPIO_readPin+0x66>
    21ba:	6b c0       	rjmp	.+214    	; 0x2292 <GPIO_readPin+0x124>
    21bc:	4c 81       	ldd	r20, Y+4	; 0x04
    21be:	5d 81       	ldd	r21, Y+5	; 0x05
    21c0:	42 30       	cpi	r20, 0x02	; 2
    21c2:	51 05       	cpc	r21, r1
    21c4:	b9 f1       	breq	.+110    	; 0x2234 <GPIO_readPin+0xc6>
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	83 30       	cpi	r24, 0x03	; 3
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <GPIO_readPin+0x64>
    21d0:	49 c0       	rjmp	.+146    	; 0x2264 <GPIO_readPin+0xf6>
    21d2:	5f c0       	rjmp	.+190    	; 0x2292 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    21d4:	e9 e3       	ldi	r30, 0x39	; 57
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a9 01       	movw	r20, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <GPIO_readPin+0x7e>
    21e8:	55 95       	asr	r21
    21ea:	47 95       	ror	r20
    21ec:	8a 95       	dec	r24
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <GPIO_readPin+0x7a>
    21f0:	ca 01       	movw	r24, r20
    21f2:	81 70       	andi	r24, 0x01	; 1
    21f4:	90 70       	andi	r25, 0x00	; 0
    21f6:	88 23       	and	r24, r24
    21f8:	19 f0       	breq	.+6      	; 0x2200 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	49 c0       	rjmp	.+146    	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	47 c0       	rjmp	.+142    	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2204:	e6 e3       	ldi	r30, 0x36	; 54
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a9 01       	movw	r20, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <GPIO_readPin+0xae>
    2218:	55 95       	asr	r21
    221a:	47 95       	ror	r20
    221c:	8a 95       	dec	r24
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <GPIO_readPin+0xaa>
    2220:	ca 01       	movw	r24, r20
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	88 23       	and	r24, r24
    2228:	19 f0       	breq	.+6      	; 0x2230 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	31 c0       	rjmp	.+98     	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2230:	19 82       	std	Y+1, r1	; 0x01
    2232:	2f c0       	rjmp	.+94     	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2234:	e3 e3       	ldi	r30, 0x33	; 51
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <GPIO_readPin+0xde>
    2248:	55 95       	asr	r21
    224a:	47 95       	ror	r20
    224c:	8a 95       	dec	r24
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <GPIO_readPin+0xda>
    2250:	ca 01       	movw	r24, r20
    2252:	81 70       	andi	r24, 0x01	; 1
    2254:	90 70       	andi	r25, 0x00	; 0
    2256:	88 23       	and	r24, r24
    2258:	19 f0       	breq	.+6      	; 0x2260 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	19 c0       	rjmp	.+50     	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2260:	19 82       	std	Y+1, r1	; 0x01
    2262:	17 c0       	rjmp	.+46     	; 0x2292 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2264:	e0 e3       	ldi	r30, 0x30	; 48
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <GPIO_readPin+0x10e>
    2278:	55 95       	asr	r21
    227a:	47 95       	ror	r20
    227c:	8a 95       	dec	r24
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <GPIO_readPin+0x10a>
    2280:	ca 01       	movw	r24, r20
    2282:	81 70       	andi	r24, 0x01	; 1
    2284:	90 70       	andi	r25, 0x00	; 0
    2286:	88 23       	and	r24, r24
    2288:	19 f0       	breq	.+6      	; 0x2290 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	01 c0       	rjmp	.+2      	; 0x2292 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2290:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2292:	89 81       	ldd	r24, Y+1	; 0x01
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_setupPortDirection+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <GPIO_setupPortDirection+0x8>
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	84 30       	cpi	r24, 0x04	; 4
    22b8:	90 f5       	brcc	.+100    	; 0x231e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	3c 83       	std	Y+4, r19	; 0x04
    22c2:	2b 83       	std	Y+3, r18	; 0x03
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	91 05       	cpc	r25, r1
    22cc:	d1 f0       	breq	.+52     	; 0x2302 <GPIO_setupPortDirection+0x5e>
    22ce:	2b 81       	ldd	r18, Y+3	; 0x03
    22d0:	3c 81       	ldd	r19, Y+4	; 0x04
    22d2:	22 30       	cpi	r18, 0x02	; 2
    22d4:	31 05       	cpc	r19, r1
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <GPIO_setupPortDirection+0x3e>
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	00 97       	sbiw	r24, 0x00	; 0
    22de:	61 f0       	breq	.+24     	; 0x22f8 <GPIO_setupPortDirection+0x54>
    22e0:	1e c0       	rjmp	.+60     	; 0x231e <GPIO_setupPortDirection+0x7a>
    22e2:	2b 81       	ldd	r18, Y+3	; 0x03
    22e4:	3c 81       	ldd	r19, Y+4	; 0x04
    22e6:	22 30       	cpi	r18, 0x02	; 2
    22e8:	31 05       	cpc	r19, r1
    22ea:	81 f0       	breq	.+32     	; 0x230c <GPIO_setupPortDirection+0x68>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	91 05       	cpc	r25, r1
    22f4:	81 f0       	breq	.+32     	; 0x2316 <GPIO_setupPortDirection+0x72>
    22f6:	13 c0       	rjmp	.+38     	; 0x231e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    22f8:	ea e3       	ldi	r30, 0x3A	; 58
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	80 83       	st	Z, r24
    2300:	0e c0       	rjmp	.+28     	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2302:	e7 e3       	ldi	r30, 0x37	; 55
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	80 83       	st	Z, r24
    230a:	09 c0       	rjmp	.+18     	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    230c:	e4 e3       	ldi	r30, 0x34	; 52
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	80 83       	st	Z, r24
    2314:	04 c0       	rjmp	.+8      	; 0x231e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2316:	e1 e3       	ldi	r30, 0x31	; 49
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	80 83       	st	Z, r24
			break;
		}
	}
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	00 d0       	rcall	.+0      	; 0x2332 <GPIO_writePort+0x6>
    2332:	00 d0       	rcall	.+0      	; 0x2334 <GPIO_writePort+0x8>
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	89 83       	std	Y+1, r24	; 0x01
    233a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	84 30       	cpi	r24, 0x04	; 4
    2340:	90 f5       	brcc	.+100    	; 0x23a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	3c 83       	std	Y+4, r19	; 0x04
    234a:	2b 83       	std	Y+3, r18	; 0x03
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	91 05       	cpc	r25, r1
    2354:	d1 f0       	breq	.+52     	; 0x238a <GPIO_writePort+0x5e>
    2356:	2b 81       	ldd	r18, Y+3	; 0x03
    2358:	3c 81       	ldd	r19, Y+4	; 0x04
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	2c f4       	brge	.+10     	; 0x236a <GPIO_writePort+0x3e>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	61 f0       	breq	.+24     	; 0x2380 <GPIO_writePort+0x54>
    2368:	1e c0       	rjmp	.+60     	; 0x23a6 <GPIO_writePort+0x7a>
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	3c 81       	ldd	r19, Y+4	; 0x04
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	31 05       	cpc	r19, r1
    2372:	81 f0       	breq	.+32     	; 0x2394 <GPIO_writePort+0x68>
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	91 05       	cpc	r25, r1
    237c:	81 f0       	breq	.+32     	; 0x239e <GPIO_writePort+0x72>
    237e:	13 c0       	rjmp	.+38     	; 0x23a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2380:	eb e3       	ldi	r30, 0x3B	; 59
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	80 83       	st	Z, r24
    2388:	0e c0       	rjmp	.+28     	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    238a:	e8 e3       	ldi	r30, 0x38	; 56
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	80 83       	st	Z, r24
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2394:	e5 e3       	ldi	r30, 0x35	; 53
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	80 83       	st	Z, r24
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    239e:	e2 e3       	ldi	r30, 0x32	; 50
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <GPIO_readPort+0x6>
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <GPIO_readPort+0x8>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    23c2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	84 30       	cpi	r24, 0x04	; 4
    23c8:	90 f5       	brcc	.+100    	; 0x242e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	3c 83       	std	Y+4, r19	; 0x04
    23d2:	2b 83       	std	Y+3, r18	; 0x03
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	91 05       	cpc	r25, r1
    23dc:	d1 f0       	breq	.+52     	; 0x2412 <GPIO_readPort+0x5e>
    23de:	2b 81       	ldd	r18, Y+3	; 0x03
    23e0:	3c 81       	ldd	r19, Y+4	; 0x04
    23e2:	22 30       	cpi	r18, 0x02	; 2
    23e4:	31 05       	cpc	r19, r1
    23e6:	2c f4       	brge	.+10     	; 0x23f2 <GPIO_readPort+0x3e>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	61 f0       	breq	.+24     	; 0x2408 <GPIO_readPort+0x54>
    23f0:	1e c0       	rjmp	.+60     	; 0x242e <GPIO_readPort+0x7a>
    23f2:	2b 81       	ldd	r18, Y+3	; 0x03
    23f4:	3c 81       	ldd	r19, Y+4	; 0x04
    23f6:	22 30       	cpi	r18, 0x02	; 2
    23f8:	31 05       	cpc	r19, r1
    23fa:	81 f0       	breq	.+32     	; 0x241c <GPIO_readPort+0x68>
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	91 05       	cpc	r25, r1
    2404:	81 f0       	breq	.+32     	; 0x2426 <GPIO_readPort+0x72>
    2406:	13 c0       	rjmp	.+38     	; 0x242e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2408:	e9 e3       	ldi	r30, 0x39	; 57
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	0e c0       	rjmp	.+28     	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2412:	e6 e3       	ldi	r30, 0x36	; 54
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	09 c0       	rjmp	.+18     	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    241c:	e3 e3       	ldi	r30, 0x33	; 51
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	04 c0       	rjmp	.+8      	; 0x242e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2426:	e0 e3       	ldi	r30, 0x30	; 48
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	60 97       	sbiw	r28, 0x10	; 16
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	61 e0       	ldi	r22, 0x01	; 1
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	64 e0       	ldi	r22, 0x04	; 4
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	65 e0       	ldi	r22, 0x05	; 5
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	67 e0       	ldi	r22, 0x07	; 7
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    24a2:	1f 86       	std	Y+15, r1	; 0x0f
    24a4:	ab c0       	rjmp	.+342    	; 0x25fc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24ba:	18 8a       	std	Y+16, r1	; 0x10
    24bc:	22 c0       	rjmp	.+68     	; 0x2502 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    24be:	88 89       	ldd	r24, Y+16	; 0x10
    24c0:	98 2f       	mov	r25, r24
    24c2:	9c 5f       	subi	r25, 0xFC	; 252
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	69 2f       	mov	r22, r25
    24c8:	0e 94 b7 10 	call	0x216e	; 0x216e <GPIO_readPin>
    24cc:	88 23       	and	r24, r24
    24ce:	b1 f4       	brne	.+44     	; 0x24fc <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	98 2f       	mov	r25, r24
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	89 0f       	add	r24, r25
    24e4:	8f 5f       	subi	r24, 0xFF	; 255
    24e6:	0e 94 03 13 	call	0x2606	; 0x2606 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    24ea:	60 96       	adiw	r28, 0x10	; 16
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24fc:	88 89       	ldd	r24, Y+16	; 0x10
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	88 8b       	std	Y+16, r24	; 0x10
    2502:	88 89       	ldd	r24, Y+16	; 0x10
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	d8 f2       	brcs	.-74     	; 0x24be <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	6f 85       	ldd	r22, Y+15	; 0x0f
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 ea       	ldi	r26, 0xA0	; 160
    2518:	b0 e4       	ldi	r27, 0x40	; 64
    251a:	8b 87       	std	Y+11, r24	; 0x0b
    251c:	9c 87       	std	Y+12, r25	; 0x0c
    251e:	ad 87       	std	Y+13, r26	; 0x0d
    2520:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a9 87       	std	Y+9, r26	; 0x09
    2540:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <KEYPAD_getPressedKey+0x186>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <KEYPAD_getPressedKey+0x174>
    25b6:	9c 83       	std	Y+4, r25	; 0x04
    25b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <KEYPAD_getPressedKey+0x168>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <KEYPAD_getPressedKey+0x1b0>
    25f2:	9a 83       	std	Y+2, r25	; 0x02
    25f4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	84 30       	cpi	r24, 0x04	; 4
    2600:	08 f4       	brcc	.+2      	; 0x2604 <KEYPAD_getPressedKey+0x1c6>
    2602:	51 cf       	rjmp	.-350    	; 0x24a6 <KEYPAD_getPressedKey+0x68>
    2604:	4e cf       	rjmp	.-356    	; 0x24a2 <KEYPAD_getPressedKey+0x64>

00002606 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <KEYPAD_4x4_adjustKeyNumber+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <KEYPAD_4x4_adjustKeyNumber+0x8>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2614:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	3c 83       	std	Y+4, r19	; 0x04
    261e:	2b 83       	std	Y+3, r18	; 0x03
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	88 30       	cpi	r24, 0x08	; 8
    2626:	91 05       	cpc	r25, r1
    2628:	09 f4       	brne	.+2      	; 0x262c <KEYPAD_4x4_adjustKeyNumber+0x26>
    262a:	70 c0       	rjmp	.+224    	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x106>
    262c:	2b 81       	ldd	r18, Y+3	; 0x03
    262e:	3c 81       	ldd	r19, Y+4	; 0x04
    2630:	29 30       	cpi	r18, 0x09	; 9
    2632:	31 05       	cpc	r19, r1
    2634:	5c f5       	brge	.+86     	; 0x268c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	91 05       	cpc	r25, r1
    263e:	09 f4       	brne	.+2      	; 0x2642 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2640:	59 c0       	rjmp	.+178    	; 0x26f4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2642:	2b 81       	ldd	r18, Y+3	; 0x03
    2644:	3c 81       	ldd	r19, Y+4	; 0x04
    2646:	25 30       	cpi	r18, 0x05	; 5
    2648:	31 05       	cpc	r19, r1
    264a:	9c f4       	brge	.+38     	; 0x2672 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	91 05       	cpc	r25, r1
    2654:	09 f4       	brne	.+2      	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2656:	48 c0       	rjmp	.+144    	; 0x26e8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2658:	2b 81       	ldd	r18, Y+3	; 0x03
    265a:	3c 81       	ldd	r19, Y+4	; 0x04
    265c:	23 30       	cpi	r18, 0x03	; 3
    265e:	31 05       	cpc	r19, r1
    2660:	0c f0       	brlt	.+2      	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2662:	45 c0       	rjmp	.+138    	; 0x26ee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2664:	8b 81       	ldd	r24, Y+3	; 0x03
    2666:	9c 81       	ldd	r25, Y+4	; 0x04
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	91 05       	cpc	r25, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    266e:	39 c0       	rjmp	.+114    	; 0x26e2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2670:	67 c0       	rjmp	.+206    	; 0x2740 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2672:	2b 81       	ldd	r18, Y+3	; 0x03
    2674:	3c 81       	ldd	r19, Y+4	; 0x04
    2676:	26 30       	cpi	r18, 0x06	; 6
    2678:	31 05       	cpc	r19, r1
    267a:	09 f4       	brne	.+2      	; 0x267e <KEYPAD_4x4_adjustKeyNumber+0x78>
    267c:	41 c0       	rjmp	.+130    	; 0x2700 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	87 30       	cpi	r24, 0x07	; 7
    2684:	91 05       	cpc	r25, r1
    2686:	0c f0       	brlt	.+2      	; 0x268a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2688:	3e c0       	rjmp	.+124    	; 0x2706 <KEYPAD_4x4_adjustKeyNumber+0x100>
    268a:	37 c0       	rjmp	.+110    	; 0x26fa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    268c:	2b 81       	ldd	r18, Y+3	; 0x03
    268e:	3c 81       	ldd	r19, Y+4	; 0x04
    2690:	2c 30       	cpi	r18, 0x0C	; 12
    2692:	31 05       	cpc	r19, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2696:	46 c0       	rjmp	.+140    	; 0x2724 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	8d 30       	cpi	r24, 0x0D	; 13
    269e:	91 05       	cpc	r25, r1
    26a0:	5c f4       	brge	.+22     	; 0x26b8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    26a2:	2b 81       	ldd	r18, Y+3	; 0x03
    26a4:	3c 81       	ldd	r19, Y+4	; 0x04
    26a6:	2a 30       	cpi	r18, 0x0A	; 10
    26a8:	31 05       	cpc	r19, r1
    26aa:	b1 f1       	breq	.+108    	; 0x2718 <KEYPAD_4x4_adjustKeyNumber+0x112>
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	8b 30       	cpi	r24, 0x0B	; 11
    26b2:	91 05       	cpc	r25, r1
    26b4:	a4 f5       	brge	.+104    	; 0x271e <KEYPAD_4x4_adjustKeyNumber+0x118>
    26b6:	2d c0       	rjmp	.+90     	; 0x2712 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	2e 30       	cpi	r18, 0x0E	; 14
    26be:	31 05       	cpc	r19, r1
    26c0:	b9 f1       	breq	.+110    	; 0x2730 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	8e 30       	cpi	r24, 0x0E	; 14
    26c8:	91 05       	cpc	r25, r1
    26ca:	7c f1       	brlt	.+94     	; 0x272a <KEYPAD_4x4_adjustKeyNumber+0x124>
    26cc:	2b 81       	ldd	r18, Y+3	; 0x03
    26ce:	3c 81       	ldd	r19, Y+4	; 0x04
    26d0:	2f 30       	cpi	r18, 0x0F	; 15
    26d2:	31 05       	cpc	r19, r1
    26d4:	79 f1       	breq	.+94     	; 0x2734 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	80 31       	cpi	r24, 0x10	; 16
    26dc:	91 05       	cpc	r25, r1
    26de:	69 f1       	breq	.+90     	; 0x273a <KEYPAD_4x4_adjustKeyNumber+0x134>
    26e0:	2f c0       	rjmp	.+94     	; 0x2740 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    26e2:	87 e0       	ldi	r24, 0x07	; 7
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	2e c0       	rjmp	.+92     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    26e8:	88 e0       	ldi	r24, 0x08	; 8
    26ea:	89 83       	std	Y+1, r24	; 0x01
    26ec:	2b c0       	rjmp	.+86     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    26ee:	89 e0       	ldi	r24, 0x09	; 9
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	28 c0       	rjmp	.+80     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    26f4:	85 e2       	ldi	r24, 0x25	; 37
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	25 c0       	rjmp	.+74     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	89 83       	std	Y+1, r24	; 0x01
    26fe:	22 c0       	rjmp	.+68     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2700:	85 e0       	ldi	r24, 0x05	; 5
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	1f c0       	rjmp	.+62     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2706:	86 e0       	ldi	r24, 0x06	; 6
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	1c c0       	rjmp	.+56     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    270c:	8a e2       	ldi	r24, 0x2A	; 42
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	19 c0       	rjmp	.+50     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	16 c0       	rjmp	.+44     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	13 c0       	rjmp	.+38     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    271e:	83 e0       	ldi	r24, 0x03	; 3
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	10 c0       	rjmp	.+32     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2724:	8d e2       	ldi	r24, 0x2D	; 45
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	0d c0       	rjmp	.+26     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    272a:	8d e0       	ldi	r24, 0x0D	; 13
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	0a c0       	rjmp	.+20     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2730:	19 82       	std	Y+1, r1	; 0x01
    2732:	08 c0       	rjmp	.+16     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2734:	8d e3       	ldi	r24, 0x3D	; 61
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    273a:	8b e2       	ldi	r24, 0x2B	; 43
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	2e 97       	sbiw	r28, 0x0e	; 14
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	41 e0       	ldi	r20, 0x01	; 1
    276e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <GPIO_setupPinDirection>
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a0 ea       	ldi	r26, 0xA0	; 160
    2782:	b1 e4       	ldi	r27, 0x41	; 65
    2784:	8b 87       	std	Y+11, r24	; 0x0b
    2786:	9c 87       	std	Y+12, r25	; 0x0c
    2788:	ad 87       	std	Y+13, r26	; 0x0d
    278a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6b 85       	ldd	r22, Y+11	; 0x0b
    278e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2790:	8d 85       	ldd	r24, Y+13	; 0x0d
    2792:	9e 85       	ldd	r25, Y+14	; 0x0e
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	8f 83       	std	Y+7, r24	; 0x07
    27a6:	98 87       	std	Y+8, r25	; 0x08
    27a8:	a9 87       	std	Y+9, r26	; 0x09
    27aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	78 85       	ldd	r23, Y+8	; 0x08
    27b0:	89 85       	ldd	r24, Y+9	; 0x09
    27b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <LCD_init+0x7a>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9e 83       	std	Y+6, r25	; 0x06
    27ca:	8d 83       	std	Y+5, r24	; 0x05
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <LCD_init+0xf8>
	else if (__tmp > 65535)
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	0f c0       	rjmp	.+30     	; 0x282e <LCD_init+0xda>
    2810:	88 ec       	ldi	r24, 0xC8	; 200
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_init+0xc8>
    2820:	9c 83       	std	Y+4, r25	; 0x04
    2822:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9e 83       	std	Y+6, r25	; 0x06
    282c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <LCD_init+0xbc>
    2836:	14 c0       	rjmp	.+40     	; 0x2860 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_init+0x104>
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	6f ef       	ldi	r22, 0xFF	; 255
    2864:	0e 94 52 11 	call	0x22a4	; 0x22a4 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2868:	88 e3       	ldi	r24, 0x38	; 56
    286a:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    286e:	8c e0       	ldi	r24, 0x0C	; 12
    2870:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_sendCommand>
}
    287a:	2e 96       	adiw	r28, 0x0e	; 14
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	e9 97       	sbiw	r28, 0x39	; 57
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e8       	ldi	r26, 0x80	; 128
    28b2:	bf e3       	ldi	r27, 0x3F	; 63
    28b4:	8d ab       	std	Y+53, r24	; 0x35
    28b6:	9e ab       	std	Y+54, r25	; 0x36
    28b8:	af ab       	std	Y+55, r26	; 0x37
    28ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	6d a9       	ldd	r22, Y+53	; 0x35
    28be:	7e a9       	ldd	r23, Y+54	; 0x36
    28c0:	8f a9       	ldd	r24, Y+55	; 0x37
    28c2:	98 ad       	ldd	r25, Y+56	; 0x38
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a ef       	ldi	r20, 0xFA	; 250
    28ca:	54 e4       	ldi	r21, 0x44	; 68
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	89 ab       	std	Y+49, r24	; 0x31
    28d6:	9a ab       	std	Y+50, r25	; 0x32
    28d8:	ab ab       	std	Y+51, r26	; 0x33
    28da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28dc:	69 a9       	ldd	r22, Y+49	; 0x31
    28de:	7a a9       	ldd	r23, Y+50	; 0x32
    28e0:	8b a9       	ldd	r24, Y+51	; 0x33
    28e2:	9c a9       	ldd	r25, Y+52	; 0x34
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <LCD_sendCommand+0x72>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    28fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2900:	7a a9       	ldd	r23, Y+50	; 0x32
    2902:	8b a9       	ldd	r24, Y+51	; 0x33
    2904:	9c a9       	ldd	r25, Y+52	; 0x34
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	6d a9       	ldd	r22, Y+53	; 0x35
    2918:	7e a9       	ldd	r23, Y+54	; 0x36
    291a:	8f a9       	ldd	r24, Y+55	; 0x37
    291c:	98 ad       	ldd	r25, Y+56	; 0x38
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	98 ab       	std	Y+48, r25	; 0x30
    293c:	8f a7       	std	Y+47, r24	; 0x2f
    293e:	0f c0       	rjmp	.+30     	; 0x295e <LCD_sendCommand+0xd2>
    2940:	88 ec       	ldi	r24, 0xC8	; 200
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9e a7       	std	Y+46, r25	; 0x2e
    2946:	8d a7       	std	Y+45, r24	; 0x2d
    2948:	8d a5       	ldd	r24, Y+45	; 0x2d
    294a:	9e a5       	ldd	r25, Y+46	; 0x2e
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <LCD_sendCommand+0xc0>
    2950:	9e a7       	std	Y+46, r25	; 0x2e
    2952:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8f a5       	ldd	r24, Y+47	; 0x2f
    2956:	98 a9       	ldd	r25, Y+48	; 0x30
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	98 ab       	std	Y+48, r25	; 0x30
    295c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2960:	98 a9       	ldd	r25, Y+48	; 0x30
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <LCD_sendCommand+0xb4>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	98 ab       	std	Y+48, r25	; 0x30
    297a:	8f a7       	std	Y+47, r24	; 0x2f
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	9c a7       	std	Y+44, r25	; 0x2c
    2982:	8b a7       	std	Y+43, r24	; 0x2b
    2984:	8b a5       	ldd	r24, Y+43	; 0x2b
    2986:	9c a5       	ldd	r25, Y+44	; 0x2c
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_sendCommand+0xfc>
    298c:	9c a7       	std	Y+44, r25	; 0x2c
    298e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	61 e0       	ldi	r22, 0x01	; 1
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	8f a3       	std	Y+39, r24	; 0x27
    29a4:	98 a7       	std	Y+40, r25	; 0x28
    29a6:	a9 a7       	std	Y+41, r26	; 0x29
    29a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6f a1       	ldd	r22, Y+39	; 0x27
    29ac:	78 a5       	ldd	r23, Y+40	; 0x28
    29ae:	89 a5       	ldd	r24, Y+41	; 0x29
    29b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8b a3       	std	Y+35, r24	; 0x23
    29c4:	9c a3       	std	Y+36, r25	; 0x24
    29c6:	ad a3       	std	Y+37, r26	; 0x25
    29c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29ca:	6b a1       	ldd	r22, Y+35	; 0x23
    29cc:	7c a1       	ldd	r23, Y+36	; 0x24
    29ce:	8d a1       	ldd	r24, Y+37	; 0x25
    29d0:	9e a1       	ldd	r25, Y+38	; 0x26
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <LCD_sendCommand+0x160>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a a3       	std	Y+34, r25	; 0x22
    29e8:	89 a3       	std	Y+33, r24	; 0x21
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    29ec:	6b a1       	ldd	r22, Y+35	; 0x23
    29ee:	7c a1       	ldd	r23, Y+36	; 0x24
    29f0:	8d a1       	ldd	r24, Y+37	; 0x25
    29f2:	9e a1       	ldd	r25, Y+38	; 0x26
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6f a1       	ldd	r22, Y+39	; 0x27
    2a06:	78 a5       	ldd	r23, Y+40	; 0x28
    2a08:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9a a3       	std	Y+34, r25	; 0x22
    2a2a:	89 a3       	std	Y+33, r24	; 0x21
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_sendCommand+0x1c0>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 a3       	std	Y+32, r25	; 0x20
    2a34:	8f 8f       	std	Y+31, r24	; 0x1f
    2a36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a38:	98 a1       	ldd	r25, Y+32	; 0x20
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_sendCommand+0x1ae>
    2a3e:	98 a3       	std	Y+32, r25	; 0x20
    2a40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	89 a1       	ldd	r24, Y+33	; 0x21
    2a44:	9a a1       	ldd	r25, Y+34	; 0x22
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9a a3       	std	Y+34, r25	; 0x22
    2a4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_sendCommand+0x1a2>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9a a3       	std	Y+34, r25	; 0x22
    2a68:	89 a3       	std	Y+33, r24	; 0x21
    2a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a70:	8d 8f       	std	Y+29, r24	; 0x1d
    2a72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_sendCommand+0x1ea>
    2a7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	69 ad       	ldd	r22, Y+57	; 0x39
    2a82:	0e 94 96 11 	call	0x232c	; 0x232c <GPIO_writePort>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	89 8f       	std	Y+25, r24	; 0x19
    2a90:	9a 8f       	std	Y+26, r25	; 0x1a
    2a92:	ab 8f       	std	Y+27, r26	; 0x1b
    2a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a ef       	ldi	r20, 0xFA	; 250
    2aa4:	54 e4       	ldi	r21, 0x44	; 68
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8d 8b       	std	Y+21, r24	; 0x15
    2ab0:	9e 8b       	std	Y+22, r25	; 0x16
    2ab2:	af 8b       	std	Y+23, r26	; 0x17
    2ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aba:	8f 89       	ldd	r24, Y+23	; 0x17
    2abc:	98 8d       	ldd	r25, Y+24	; 0x18
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	69 8d       	ldd	r22, Y+25	; 0x19
    2af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c 8b       	std	Y+20, r25	; 0x14
    2b16:	8b 8b       	std	Y+19, r24	; 0x13
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <LCD_sendCommand+0x2ac>
    2b1a:	88 ec       	ldi	r24, 0xC8	; 200
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_sendCommand+0x29a>
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9c 8b       	std	Y+20, r25	; 0x14
    2b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <LCD_sendCommand+0x28e>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	8b 89       	ldd	r24, Y+19	; 0x13
    2b58:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	98 89       	ldd	r25, Y+16	; 0x10
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_sendCommand+0x2d6>
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e8       	ldi	r26, 0x80	; 128
    2b7a:	bf e3       	ldi	r27, 0x3F	; 63
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_sendCommand+0x39a>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_sendCommand+0x388>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_sendCommand+0x37c>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_sendCommand+0x3c4>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c58:	e9 96       	adiw	r28, 0x39	; 57
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	e9 97       	sbiw	r28, 0x39	; 57
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2c80:	82 e0       	ldi	r24, 0x02	; 2
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a0 e8       	ldi	r26, 0x80	; 128
    2c90:	bf e3       	ldi	r27, 0x3F	; 63
    2c92:	8d ab       	std	Y+53, r24	; 0x35
    2c94:	9e ab       	std	Y+54, r25	; 0x36
    2c96:	af ab       	std	Y+55, r26	; 0x37
    2c98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c9c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a ef       	ldi	r20, 0xFA	; 250
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	89 ab       	std	Y+49, r24	; 0x31
    2cb4:	9a ab       	std	Y+50, r25	; 0x32
    2cb6:	ab ab       	std	Y+51, r26	; 0x33
    2cb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cba:	69 a9       	ldd	r22, Y+49	; 0x31
    2cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e8       	ldi	r20, 0x80	; 128
    2cc8:	5f e3       	ldi	r21, 0x3F	; 63
    2cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <LCD_displayCharacter+0x72>
		__ticks = 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	98 ab       	std	Y+48, r25	; 0x30
    2cd8:	8f a7       	std	Y+47, r24	; 0x2f
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2cde:	7a a9       	ldd	r23, Y+50	; 0x32
    2ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	4f e7       	ldi	r20, 0x7F	; 127
    2cea:	57 e4       	ldi	r21, 0x47	; 71
    2cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	4c f5       	brge	.+82     	; 0x2d46 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf4:	6d a9       	ldd	r22, Y+53	; 0x35
    2cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    2cf8:	8f a9       	ldd	r24, Y+55	; 0x37
    2cfa:	98 ad       	ldd	r25, Y+56	; 0x38
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	98 ab       	std	Y+48, r25	; 0x30
    2d1a:	8f a7       	std	Y+47, r24	; 0x2f
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <LCD_displayCharacter+0xd2>
    2d1e:	88 ec       	ldi	r24, 0xC8	; 200
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9e a7       	std	Y+46, r25	; 0x2e
    2d24:	8d a7       	std	Y+45, r24	; 0x2d
    2d26:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d28:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <LCD_displayCharacter+0xc0>
    2d2e:	9e a7       	std	Y+46, r25	; 0x2e
    2d30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d34:	98 a9       	ldd	r25, Y+48	; 0x30
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	98 ab       	std	Y+48, r25	; 0x30
    2d3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	69 f7       	brne	.-38     	; 0x2d1e <LCD_displayCharacter+0xb4>
    2d44:	14 c0       	rjmp	.+40     	; 0x2d6e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d46:	69 a9       	ldd	r22, Y+49	; 0x31
    2d48:	7a a9       	ldd	r23, Y+50	; 0x32
    2d4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	98 ab       	std	Y+48, r25	; 0x30
    2d58:	8f a7       	std	Y+47, r24	; 0x2f
    2d5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d5e:	9c a7       	std	Y+44, r25	; 0x2c
    2d60:	8b a7       	std	Y+43, r24	; 0x2b
    2d62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LCD_displayCharacter+0xfc>
    2d6a:	9c a7       	std	Y+44, r25	; 0x2c
    2d6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	41 e0       	ldi	r20, 0x01	; 1
    2d74:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a0 e8       	ldi	r26, 0x80	; 128
    2d7e:	bf e3       	ldi	r27, 0x3F	; 63
    2d80:	8f a3       	std	Y+39, r24	; 0x27
    2d82:	98 a7       	std	Y+40, r25	; 0x28
    2d84:	a9 a7       	std	Y+41, r26	; 0x29
    2d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	6f a1       	ldd	r22, Y+39	; 0x27
    2d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a ef       	ldi	r20, 0xFA	; 250
    2d96:	54 e4       	ldi	r21, 0x44	; 68
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	8b a3       	std	Y+35, r24	; 0x23
    2da2:	9c a3       	std	Y+36, r25	; 0x24
    2da4:	ad a3       	std	Y+37, r26	; 0x25
    2da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2da8:	6b a1       	ldd	r22, Y+35	; 0x23
    2daa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dac:	8d a1       	ldd	r24, Y+37	; 0x25
    2dae:	9e a1       	ldd	r25, Y+38	; 0x26
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <LCD_displayCharacter+0x160>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	9a a3       	std	Y+34, r25	; 0x22
    2dc6:	89 a3       	std	Y+33, r24	; 0x21
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2dca:	6b a1       	ldd	r22, Y+35	; 0x23
    2dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dce:	8d a1       	ldd	r24, Y+37	; 0x25
    2dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	4c f5       	brge	.+82     	; 0x2e34 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	6f a1       	ldd	r22, Y+39	; 0x27
    2de4:	78 a5       	ldd	r23, Y+40	; 0x28
    2de6:	89 a5       	ldd	r24, Y+41	; 0x29
    2de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	9a a3       	std	Y+34, r25	; 0x22
    2e08:	89 a3       	std	Y+33, r24	; 0x21
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <LCD_displayCharacter+0x1c0>
    2e0c:	88 ec       	ldi	r24, 0xC8	; 200
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	98 a3       	std	Y+32, r25	; 0x20
    2e12:	8f 8f       	std	Y+31, r24	; 0x1f
    2e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e16:	98 a1       	ldd	r25, Y+32	; 0x20
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <LCD_displayCharacter+0x1ae>
    2e1c:	98 a3       	std	Y+32, r25	; 0x20
    2e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	89 a1       	ldd	r24, Y+33	; 0x21
    2e22:	9a a1       	ldd	r25, Y+34	; 0x22
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	9a a3       	std	Y+34, r25	; 0x22
    2e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <LCD_displayCharacter+0x1a2>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	6b a1       	ldd	r22, Y+35	; 0x23
    2e36:	7c a1       	ldd	r23, Y+36	; 0x24
    2e38:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9a a3       	std	Y+34, r25	; 0x22
    2e46:	89 a3       	std	Y+33, r24	; 0x21
    2e48:	89 a1       	ldd	r24, Y+33	; 0x21
    2e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <LCD_displayCharacter+0x1ea>
    2e58:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	69 ad       	ldd	r22, Y+57	; 0x39
    2e60:	0e 94 96 11 	call	0x232c	; 0x232c <GPIO_writePort>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a0 e8       	ldi	r26, 0x80	; 128
    2e6a:	bf e3       	ldi	r27, 0x3F	; 63
    2e6c:	89 8f       	std	Y+25, r24	; 0x19
    2e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e70:	ab 8f       	std	Y+27, r26	; 0x1b
    2e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e74:	69 8d       	ldd	r22, Y+25	; 0x19
    2e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	4a ef       	ldi	r20, 0xFA	; 250
    2e82:	54 e4       	ldi	r21, 0x44	; 68
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8d 8b       	std	Y+21, r24	; 0x15
    2e8e:	9e 8b       	std	Y+22, r25	; 0x16
    2e90:	af 8b       	std	Y+23, r26	; 0x17
    2e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e94:	6d 89       	ldd	r22, Y+21	; 0x15
    2e96:	7e 89       	ldd	r23, Y+22	; 0x16
    2e98:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	2c f4       	brge	.+10     	; 0x2eb6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 8b       	std	Y+20, r25	; 0x14
    2eb2:	8b 8b       	std	Y+19, r24	; 0x13
    2eb4:	3f c0       	rjmp	.+126    	; 0x2f34 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eba:	8f 89       	ldd	r24, Y+23	; 0x17
    2ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	4c f5       	brge	.+82     	; 0x2f20 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9c 8b       	std	Y+20, r25	; 0x14
    2ef4:	8b 8b       	std	Y+19, r24	; 0x13
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <LCD_displayCharacter+0x2ac>
    2ef8:	88 ec       	ldi	r24, 0xC8	; 200
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
    2f00:	89 89       	ldd	r24, Y+17	; 0x11
    2f02:	9a 89       	ldd	r25, Y+18	; 0x12
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <LCD_displayCharacter+0x29a>
    2f08:	9a 8b       	std	Y+18, r25	; 0x12
    2f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9c 8b       	std	Y+20, r25	; 0x14
    2f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	8b 89       	ldd	r24, Y+19	; 0x13
    2f18:	9c 89       	ldd	r25, Y+20	; 0x14
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	69 f7       	brne	.-38     	; 0x2ef8 <LCD_displayCharacter+0x28e>
    2f1e:	14 c0       	rjmp	.+40     	; 0x2f48 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	6d 89       	ldd	r22, Y+21	; 0x15
    2f22:	7e 89       	ldd	r23, Y+22	; 0x16
    2f24:	8f 89       	ldd	r24, Y+23	; 0x17
    2f26:	98 8d       	ldd	r25, Y+24	; 0x18
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9c 8b       	std	Y+20, r25	; 0x14
    2f32:	8b 8b       	std	Y+19, r24	; 0x13
    2f34:	8b 89       	ldd	r24, Y+19	; 0x13
    2f36:	9c 89       	ldd	r25, Y+20	; 0x14
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
    2f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3e:	98 89       	ldd	r25, Y+16	; 0x10
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <LCD_displayCharacter+0x2d6>
    2f44:	98 8b       	std	Y+16, r25	; 0x10
    2f46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <GPIO_writePin>
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e8       	ldi	r26, 0x80	; 128
    2f58:	bf e3       	ldi	r27, 0x3F	; 63
    2f5a:	8b 87       	std	Y+11, r24	; 0x0b
    2f5c:	9c 87       	std	Y+12, r25	; 0x0c
    2f5e:	ad 87       	std	Y+13, r26	; 0x0d
    2f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8f 83       	std	Y+7, r24	; 0x07
    2f7c:	98 87       	std	Y+8, r25	; 0x08
    2f7e:	a9 87       	std	Y+9, r26	; 0x09
    2f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa6:	78 85       	ldd	r23, Y+8	; 0x08
    2fa8:	89 85       	ldd	r24, Y+9	; 0x09
    2faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <LCD_displayCharacter+0x39a>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9c 83       	std	Y+4, r25	; 0x04
    2fec:	8b 83       	std	Y+3, r24	; 0x03
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_displayCharacter+0x388>
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <LCD_displayCharacter+0x37c>
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6f 81       	ldd	r22, Y+7	; 0x07
    3010:	78 85       	ldd	r23, Y+8	; 0x08
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	9a 83       	std	Y+2, r25	; 0x02
    3028:	89 83       	std	Y+1, r24	; 0x01
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	9a 81       	ldd	r25, Y+2	; 0x02
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_displayCharacter+0x3c4>
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3036:	e9 96       	adiw	r28, 0x39	; 57
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	00 d0       	rcall	.+0      	; 0x304e <LCD_displayString+0x6>
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	9b 83       	std	Y+3, r25	; 0x03
    3056:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3058:	19 82       	std	Y+1, r1	; 0x01
    305a:	0e c0       	rjmp	.+28     	; 0x3078 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	8a 81       	ldd	r24, Y+2	; 0x02
    3064:	9b 81       	ldd	r25, Y+3	; 0x03
    3066:	fc 01       	movw	r30, r24
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	80 81       	ld	r24, Z
    306e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_displayCharacter>
		i++;
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	8f 5f       	subi	r24, 0xFF	; 255
    3076:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	9b 81       	ldd	r25, Y+3	; 0x03
    3082:	fc 01       	movw	r30, r24
    3084:	e2 0f       	add	r30, r18
    3086:	f3 1f       	adc	r31, r19
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	39 f7       	brne	.-50     	; 0x305c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LCD_moveCursor+0x6>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <LCD_moveCursor+0x8>
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	8a 83       	std	Y+2, r24	; 0x02
    30aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	3d 83       	std	Y+5, r19	; 0x05
    30b4:	2c 83       	std	Y+4, r18	; 0x04
    30b6:	8c 81       	ldd	r24, Y+4	; 0x04
    30b8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	91 05       	cpc	r25, r1
    30be:	c1 f0       	breq	.+48     	; 0x30f0 <LCD_moveCursor+0x56>
    30c0:	2c 81       	ldd	r18, Y+4	; 0x04
    30c2:	3d 81       	ldd	r19, Y+5	; 0x05
    30c4:	22 30       	cpi	r18, 0x02	; 2
    30c6:	31 05       	cpc	r19, r1
    30c8:	2c f4       	brge	.+10     	; 0x30d4 <LCD_moveCursor+0x3a>
    30ca:	8c 81       	ldd	r24, Y+4	; 0x04
    30cc:	9d 81       	ldd	r25, Y+5	; 0x05
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	61 f0       	breq	.+24     	; 0x30ea <LCD_moveCursor+0x50>
    30d2:	19 c0       	rjmp	.+50     	; 0x3106 <LCD_moveCursor+0x6c>
    30d4:	2c 81       	ldd	r18, Y+4	; 0x04
    30d6:	3d 81       	ldd	r19, Y+5	; 0x05
    30d8:	22 30       	cpi	r18, 0x02	; 2
    30da:	31 05       	cpc	r19, r1
    30dc:	69 f0       	breq	.+26     	; 0x30f8 <LCD_moveCursor+0x5e>
    30de:	8c 81       	ldd	r24, Y+4	; 0x04
    30e0:	9d 81       	ldd	r25, Y+5	; 0x05
    30e2:	83 30       	cpi	r24, 0x03	; 3
    30e4:	91 05       	cpc	r25, r1
    30e6:	61 f0       	breq	.+24     	; 0x3100 <LCD_moveCursor+0x66>
    30e8:	0e c0       	rjmp	.+28     	; 0x3106 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	0b c0       	rjmp	.+22     	; 0x3106 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	80 5c       	subi	r24, 0xC0	; 192
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	07 c0       	rjmp	.+14     	; 0x3106 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	80 5f       	subi	r24, 0xF0	; 240
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	03 c0       	rjmp	.+6      	; 0x3106 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	80 5b       	subi	r24, 0xB0	; 176
    3104:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	80 68       	ori	r24, 0x80	; 128
    310a:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_sendCommand>
}
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	00 d0       	rcall	.+0      	; 0x3124 <LCD_displayStringRowColumn+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <LCD_displayStringRowColumn+0x8>
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	89 83       	std	Y+1, r24	; 0x01
    312c:	6a 83       	std	Y+2, r22	; 0x02
    312e:	5c 83       	std	Y+4, r21	; 0x04
    3130:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	6a 81       	ldd	r22, Y+2	; 0x02
    3136:	0e 94 4d 18 	call	0x309a	; 0x309a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
}
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	62 97       	sbiw	r28, 0x12	; 18
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	9a 8b       	std	Y+18, r25	; 0x12
    3166:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3168:	89 89       	ldd	r24, Y+17	; 0x11
    316a:	9a 89       	ldd	r25, Y+18	; 0x12
    316c:	9e 01       	movw	r18, r28
    316e:	2f 5f       	subi	r18, 0xFF	; 255
    3170:	3f 4f       	sbci	r19, 0xFF	; 255
    3172:	b9 01       	movw	r22, r18
    3174:	4a e0       	ldi	r20, 0x0A	; 10
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <itoa>
   LCD_displayString(buff); /* Display the string */
    317c:	ce 01       	movw	r24, r28
    317e:	01 96       	adiw	r24, 0x01	; 1
    3180:	0e 94 24 18 	call	0x3048	; 0x3048 <LCD_displayString>
}
    3184:	62 96       	adiw	r28, 0x12	; 18
    3186:	0f b6       	in	r0, 0x3f	; 63
    3188:	f8 94       	cli
    318a:	de bf       	out	0x3e, r29	; 62
    318c:	0f be       	out	0x3f, r0	; 63
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	0e 94 46 14 	call	0x288c	; 0x288c <LCD_sendCommand>
}
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <Timer_init>:
static void (*g_timer0CallBackPtr)(void) = NULL_PTR;
static void (*g_timer1CallBackPtr)(void) = NULL_PTR;
static void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/* Timer initialization function */
void Timer_init(const Timer_ConfigType *Config_Ptr) {
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <Timer_init+0x6>
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <Timer_init+0x8>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	9a 83       	std	Y+2, r25	; 0x02
    31b8:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->timer_ID) {
    31ba:	e9 81       	ldd	r30, Y+1	; 0x01
    31bc:	fa 81       	ldd	r31, Y+2	; 0x02
    31be:	84 81       	ldd	r24, Z+4	; 0x04
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	3c 83       	std	Y+4, r19	; 0x04
    31c6:	2b 83       	std	Y+3, r18	; 0x03
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	91 05       	cpc	r25, r1
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <Timer_init+0x2a>
    31d2:	4c c0       	rjmp	.+152    	; 0x326c <Timer_init+0xc2>
    31d4:	2b 81       	ldd	r18, Y+3	; 0x03
    31d6:	3c 81       	ldd	r19, Y+4	; 0x04
    31d8:	22 30       	cpi	r18, 0x02	; 2
    31da:	31 05       	cpc	r19, r1
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <Timer_init+0x36>
    31de:	8b c0       	rjmp	.+278    	; 0x32f6 <Timer_init+0x14c>
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	09 f0       	breq	.+2      	; 0x31ea <Timer_init+0x40>
    31e8:	c6 c0       	rjmp	.+396    	; 0x3376 <Timer_init+0x1cc>
	case TIMER_0:
		/* Set initial value */
		TCNT0 = Config_Ptr->timer_InitialValue;
    31ea:	a2 e5       	ldi	r26, 0x52	; 82
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e9 81       	ldd	r30, Y+1	; 0x01
    31f0:	fa 81       	ldd	r31, Y+2	; 0x02
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	86 81       	ldd	r24, Z+6	; 0x06
    31fe:	88 23       	and	r24, r24
    3200:	41 f4       	brne	.+16     	; 0x3212 <Timer_init+0x68>
			TCCR0 |= (1 << FOC0);  // Normal mode
    3202:	a3 e5       	ldi	r26, 0x53	; 83
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e3 e5       	ldi	r30, 0x53	; 83
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	80 68       	ori	r24, 0x80	; 128
    320e:	8c 93       	st	X, r24
    3210:	0e c0       	rjmp	.+28     	; 0x322e <Timer_init+0x84>
		} else {
			TCCR0 |= (1 << WGM01);  // Compare mode
    3212:	a3 e5       	ldi	r26, 0x53	; 83
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	e3 e5       	ldi	r30, 0x53	; 83
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	88 60       	ori	r24, 0x08	; 8
    321e:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->timer_compare_MatchValue;
    3220:	ac e5       	ldi	r26, 0x5C	; 92
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e9 81       	ldd	r30, Y+1	; 0x01
    3226:	fa 81       	ldd	r31, Y+2	; 0x02
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR0 |= Config_Ptr->timer_clock;
    322e:	a3 e5       	ldi	r26, 0x53	; 83
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e3 e5       	ldi	r30, 0x53	; 83
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	90 81       	ld	r25, Z
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	85 81       	ldd	r24, Z+5	; 0x05
    323e:	89 2b       	or	r24, r25
    3240:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    3242:	e9 81       	ldd	r30, Y+1	; 0x01
    3244:	fa 81       	ldd	r31, Y+2	; 0x02
    3246:	86 81       	ldd	r24, Z+6	; 0x06
    3248:	88 23       	and	r24, r24
    324a:	41 f4       	brne	.+16     	; 0x325c <Timer_init+0xb2>
			TIMSK |= (1 << TOIE0);  // Overflow interrupt enable for TIMER0
    324c:	a9 e5       	ldi	r26, 0x59	; 89
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e9 e5       	ldi	r30, 0x59	; 89
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	81 60       	ori	r24, 0x01	; 1
    3258:	8c 93       	st	X, r24
    325a:	8d c0       	rjmp	.+282    	; 0x3376 <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE0);  // Output compare match interrupt enable for TIMER0
    325c:	a9 e5       	ldi	r26, 0x59	; 89
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e9 e5       	ldi	r30, 0x59	; 89
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	82 60       	ori	r24, 0x02	; 2
    3268:	8c 93       	st	X, r24
    326a:	85 c0       	rjmp	.+266    	; 0x3376 <Timer_init+0x1cc>
		}
		break;

	case TIMER_1:
		/* Set initial value */
		TCNT1 = Config_Ptr->timer_InitialValue;
    326c:	ac e4       	ldi	r26, 0x4C	; 76
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e9 81       	ldd	r30, Y+1	; 0x01
    3272:	fa 81       	ldd	r31, Y+2	; 0x02
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	11 96       	adiw	r26, 0x01	; 1
    327a:	9c 93       	st	X, r25
    327c:	8e 93       	st	-X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    327e:	e9 81       	ldd	r30, Y+1	; 0x01
    3280:	fa 81       	ldd	r31, Y+2	; 0x02
    3282:	86 81       	ldd	r24, Z+6	; 0x06
    3284:	88 23       	and	r24, r24
    3286:	41 f4       	brne	.+16     	; 0x3298 <Timer_init+0xee>
			TCCR1B |= (1 << FOC1A);  // Normal mode
    3288:	ae e4       	ldi	r26, 0x4E	; 78
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ee e4       	ldi	r30, 0x4E	; 78
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	88 60       	ori	r24, 0x08	; 8
    3294:	8c 93       	st	X, r24
    3296:	10 c0       	rjmp	.+32     	; 0x32b8 <Timer_init+0x10e>
		} else {
			TCCR1B |= (1 << WGM12);  // Compare mode
    3298:	ae e4       	ldi	r26, 0x4E	; 78
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	ee e4       	ldi	r30, 0x4E	; 78
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	88 60       	ori	r24, 0x08	; 8
    32a4:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    32a6:	aa e4       	ldi	r26, 0x4A	; 74
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	82 81       	ldd	r24, Z+2	; 0x02
    32b0:	93 81       	ldd	r25, Z+3	; 0x03
    32b2:	11 96       	adiw	r26, 0x01	; 1
    32b4:	9c 93       	st	X, r25
    32b6:	8e 93       	st	-X, r24
		}

		/* Set clock source */
		TCCR1B |= Config_Ptr->timer_clock;
    32b8:	ae e4       	ldi	r26, 0x4E	; 78
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	ee e4       	ldi	r30, 0x4E	; 78
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	90 81       	ld	r25, Z
    32c2:	e9 81       	ldd	r30, Y+1	; 0x01
    32c4:	fa 81       	ldd	r31, Y+2	; 0x02
    32c6:	85 81       	ldd	r24, Z+5	; 0x05
    32c8:	89 2b       	or	r24, r25
    32ca:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    32cc:	e9 81       	ldd	r30, Y+1	; 0x01
    32ce:	fa 81       	ldd	r31, Y+2	; 0x02
    32d0:	86 81       	ldd	r24, Z+6	; 0x06
    32d2:	88 23       	and	r24, r24
    32d4:	41 f4       	brne	.+16     	; 0x32e6 <Timer_init+0x13c>
			TIMSK |= (1 << TOIE1);  // Overflow interrupt enable for TIMER1
    32d6:	a9 e5       	ldi	r26, 0x59	; 89
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e9 e5       	ldi	r30, 0x59	; 89
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	84 60       	ori	r24, 0x04	; 4
    32e2:	8c 93       	st	X, r24
    32e4:	48 c0       	rjmp	.+144    	; 0x3376 <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE1A);  // Output compare match interrupt enable for TIMER1
    32e6:	a9 e5       	ldi	r26, 0x59	; 89
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	e9 e5       	ldi	r30, 0x59	; 89
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	80 61       	ori	r24, 0x10	; 16
    32f2:	8c 93       	st	X, r24
    32f4:	40 c0       	rjmp	.+128    	; 0x3376 <Timer_init+0x1cc>
		}
		break;

	case TIMER_2:
		/* Set initial value */
		TCNT2 = Config_Ptr->timer_InitialValue;
    32f6:	a4 e4       	ldi	r26, 0x44	; 68
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	e9 81       	ldd	r30, Y+1	; 0x01
    32fc:	fa 81       	ldd	r31, Y+2	; 0x02
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	8c 93       	st	X, r24

		/* Configure mode (Normal or Compare) */
		if (Config_Ptr->timer_mode == 0) {
    3304:	e9 81       	ldd	r30, Y+1	; 0x01
    3306:	fa 81       	ldd	r31, Y+2	; 0x02
    3308:	86 81       	ldd	r24, Z+6	; 0x06
    330a:	88 23       	and	r24, r24
    330c:	41 f4       	brne	.+16     	; 0x331e <Timer_init+0x174>
			TCCR2 |= (1 << FOC2);  // Normal mode
    330e:	a5 e4       	ldi	r26, 0x45	; 69
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e5 e4       	ldi	r30, 0x45	; 69
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	80 68       	ori	r24, 0x80	; 128
    331a:	8c 93       	st	X, r24
    331c:	0e c0       	rjmp	.+28     	; 0x333a <Timer_init+0x190>
		} else {
			TCCR2 |= (1 << WGM21);  // Compare mode
    331e:	a5 e4       	ldi	r26, 0x45	; 69
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e5 e4       	ldi	r30, 0x45	; 69
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	88 60       	ori	r24, 0x08	; 8
    332a:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->timer_compare_MatchValue;
    332c:	a3 e4       	ldi	r26, 0x43	; 67
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	e9 81       	ldd	r30, Y+1	; 0x01
    3332:	fa 81       	ldd	r31, Y+2	; 0x02
    3334:	82 81       	ldd	r24, Z+2	; 0x02
    3336:	93 81       	ldd	r25, Z+3	; 0x03
    3338:	8c 93       	st	X, r24
		}

		/* Set clock source */
		TCCR2 |= Config_Ptr->timer_clock;
    333a:	a5 e4       	ldi	r26, 0x45	; 69
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e5 e4       	ldi	r30, 0x45	; 69
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	90 81       	ld	r25, Z
    3344:	e9 81       	ldd	r30, Y+1	; 0x01
    3346:	fa 81       	ldd	r31, Y+2	; 0x02
    3348:	85 81       	ldd	r24, Z+5	; 0x05
    334a:	89 2b       	or	r24, r25
    334c:	8c 93       	st	X, r24

		/* Enable interrupts based on mode */
		if (Config_Ptr->timer_mode == 0) {
    334e:	e9 81       	ldd	r30, Y+1	; 0x01
    3350:	fa 81       	ldd	r31, Y+2	; 0x02
    3352:	86 81       	ldd	r24, Z+6	; 0x06
    3354:	88 23       	and	r24, r24
    3356:	41 f4       	brne	.+16     	; 0x3368 <Timer_init+0x1be>
			TIMSK |= (1 << TOIE2);  // Overflow interrupt enable for TIMER2
    3358:	a9 e5       	ldi	r26, 0x59	; 89
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e9 e5       	ldi	r30, 0x59	; 89
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	80 64       	ori	r24, 0x40	; 64
    3364:	8c 93       	st	X, r24
    3366:	07 c0       	rjmp	.+14     	; 0x3376 <Timer_init+0x1cc>
		} else {
			TIMSK |= (1 << OCIE2);  // Output compare match interrupt enable for TIMER2
    3368:	a9 e5       	ldi	r26, 0x59	; 89
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e9 e5       	ldi	r30, 0x59	; 89
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	8c 93       	st	X, r24
		}
		break;
	}
}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <Timer_deInit>:

/* Timer de-initialization function */
void Timer_deInit(Timer_ID_Type timer_type) {
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <Timer_deInit+0x6>
    338a:	0f 92       	push	r0
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type) {
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	3b 83       	std	Y+3, r19	; 0x03
    339a:	2a 83       	std	Y+2, r18	; 0x02
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	81 30       	cpi	r24, 0x01	; 1
    33a2:	91 05       	cpc	r25, r1
    33a4:	a1 f0       	breq	.+40     	; 0x33ce <Timer_deInit+0x4a>
    33a6:	2a 81       	ldd	r18, Y+2	; 0x02
    33a8:	3b 81       	ldd	r19, Y+3	; 0x03
    33aa:	22 30       	cpi	r18, 0x02	; 2
    33ac:	31 05       	cpc	r19, r1
    33ae:	d1 f0       	breq	.+52     	; 0x33e4 <Timer_deInit+0x60>
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	9b 81       	ldd	r25, Y+3	; 0x03
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	01 f5       	brne	.+64     	; 0x33f8 <Timer_deInit+0x74>
	case TIMER_0:
		TCCR0 = 0;
    33b8:	e3 e5       	ldi	r30, 0x53	; 83
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));  // Disable TIMER0 interrupts
    33be:	a9 e5       	ldi	r26, 0x59	; 89
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e9 e5       	ldi	r30, 0x59	; 89
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	8c 7f       	andi	r24, 0xFC	; 252
    33ca:	8c 93       	st	X, r24
    33cc:	15 c0       	rjmp	.+42     	; 0x33f8 <Timer_deInit+0x74>
		break;
	case TIMER_1:
		TCCR1B = 0;
    33ce:	ee e4       	ldi	r30, 0x4E	; 78
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));  // Disable TIMER1 interrupts
    33d4:	a9 e5       	ldi	r26, 0x59	; 89
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	e9 e5       	ldi	r30, 0x59	; 89
    33da:	f0 e0       	ldi	r31, 0x00	; 0
    33dc:	80 81       	ld	r24, Z
    33de:	8b 7e       	andi	r24, 0xEB	; 235
    33e0:	8c 93       	st	X, r24
    33e2:	0a c0       	rjmp	.+20     	; 0x33f8 <Timer_deInit+0x74>
		break;
	case TIMER_2:
		TCCR2 = 0;
    33e4:	e5 e4       	ldi	r30, 0x45	; 69
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	10 82       	st	Z, r1
		TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));  // Disable TIMER2 interrupts
    33ea:	a9 e5       	ldi	r26, 0x59	; 89
    33ec:	b0 e0       	ldi	r27, 0x00	; 0
    33ee:	e9 e5       	ldi	r30, 0x59	; 89
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	8f 73       	andi	r24, 0x3F	; 63
    33f6:	8c 93       	st	X, r24
		break;
	}
}
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <Timer_setCallBack>:

/* Set callback function for timer interrupts */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	00 d0       	rcall	.+0      	; 0x340a <Timer_setCallBack+0x6>
    340a:	00 d0       	rcall	.+0      	; 0x340c <Timer_setCallBack+0x8>
    340c:	0f 92       	push	r0
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_timer_ID) {
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	3d 83       	std	Y+5, r19	; 0x05
    3420:	2c 83       	std	Y+4, r18	; 0x04
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	9d 81       	ldd	r25, Y+5	; 0x05
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	91 05       	cpc	r25, r1
    342a:	81 f0       	breq	.+32     	; 0x344c <Timer_setCallBack+0x48>
    342c:	2c 81       	ldd	r18, Y+4	; 0x04
    342e:	3d 81       	ldd	r19, Y+5	; 0x05
    3430:	22 30       	cpi	r18, 0x02	; 2
    3432:	31 05       	cpc	r19, r1
    3434:	91 f0       	breq	.+36     	; 0x345a <Timer_setCallBack+0x56>
    3436:	8c 81       	ldd	r24, Y+4	; 0x04
    3438:	9d 81       	ldd	r25, Y+5	; 0x05
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	a1 f4       	brne	.+40     	; 0x3466 <Timer_setCallBack+0x62>
	case TIMER_0:
		g_timer0CallBackPtr = a_ptr;
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	90 93 75 01 	sts	0x0175, r25
    3446:	80 93 74 01 	sts	0x0174, r24
    344a:	0d c0       	rjmp	.+26     	; 0x3466 <Timer_setCallBack+0x62>
		break;
	case TIMER_1:
		g_timer1CallBackPtr = a_ptr;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
    3450:	90 93 77 01 	sts	0x0177, r25
    3454:	80 93 76 01 	sts	0x0176, r24
    3458:	06 c0       	rjmp	.+12     	; 0x3466 <Timer_setCallBack+0x62>
		break;
	case TIMER_2:
		g_timer2CallBackPtr = a_ptr;
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	9a 81       	ldd	r25, Y+2	; 0x02
    345e:	90 93 79 01 	sts	0x0179, r25
    3462:	80 93 78 01 	sts	0x0178, r24
		break;
	}
}
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	cf 91       	pop	r28
    3472:	df 91       	pop	r29
    3474:	08 95       	ret

00003476 <__vector_11>:

/* ISR for TIMER0 overflow */
ISR(TIMER0_OVF_vect) {
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	2f 93       	push	r18
    3482:	3f 93       	push	r19
    3484:	4f 93       	push	r20
    3486:	5f 93       	push	r21
    3488:	6f 93       	push	r22
    348a:	7f 93       	push	r23
    348c:	8f 93       	push	r24
    348e:	9f 93       	push	r25
    3490:	af 93       	push	r26
    3492:	bf 93       	push	r27
    3494:	ef 93       	push	r30
    3496:	ff 93       	push	r31
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	cd b7       	in	r28, 0x3d	; 61
    349e:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    34a0:	80 91 74 01 	lds	r24, 0x0174
    34a4:	90 91 75 01 	lds	r25, 0x0175
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	29 f0       	breq	.+10     	; 0x34b6 <__vector_11+0x40>
		(*g_timer0CallBackPtr)();
    34ac:	e0 91 74 01 	lds	r30, 0x0174
    34b0:	f0 91 75 01 	lds	r31, 0x0175
    34b4:	09 95       	icall
	}
}
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	ff 91       	pop	r31
    34bc:	ef 91       	pop	r30
    34be:	bf 91       	pop	r27
    34c0:	af 91       	pop	r26
    34c2:	9f 91       	pop	r25
    34c4:	8f 91       	pop	r24
    34c6:	7f 91       	pop	r23
    34c8:	6f 91       	pop	r22
    34ca:	5f 91       	pop	r21
    34cc:	4f 91       	pop	r20
    34ce:	3f 91       	pop	r19
    34d0:	2f 91       	pop	r18
    34d2:	0f 90       	pop	r0
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	0f 90       	pop	r0
    34d8:	1f 90       	pop	r1
    34da:	18 95       	reti

000034dc <__vector_10>:

/* ISR for TIMER0 compare match */
ISR(TIMER0_COMP_vect) {
    34dc:	1f 92       	push	r1
    34de:	0f 92       	push	r0
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	0f 92       	push	r0
    34e4:	11 24       	eor	r1, r1
    34e6:	2f 93       	push	r18
    34e8:	3f 93       	push	r19
    34ea:	4f 93       	push	r20
    34ec:	5f 93       	push	r21
    34ee:	6f 93       	push	r22
    34f0:	7f 93       	push	r23
    34f2:	8f 93       	push	r24
    34f4:	9f 93       	push	r25
    34f6:	af 93       	push	r26
    34f8:	bf 93       	push	r27
    34fa:	ef 93       	push	r30
    34fc:	ff 93       	push	r31
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
	if (g_timer0CallBackPtr != NULL_PTR) {
    3506:	80 91 74 01 	lds	r24, 0x0174
    350a:	90 91 75 01 	lds	r25, 0x0175
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	29 f0       	breq	.+10     	; 0x351c <__vector_10+0x40>
		(*g_timer0CallBackPtr)();
    3512:	e0 91 74 01 	lds	r30, 0x0174
    3516:	f0 91 75 01 	lds	r31, 0x0175
    351a:	09 95       	icall
	}
}
    351c:	cf 91       	pop	r28
    351e:	df 91       	pop	r29
    3520:	ff 91       	pop	r31
    3522:	ef 91       	pop	r30
    3524:	bf 91       	pop	r27
    3526:	af 91       	pop	r26
    3528:	9f 91       	pop	r25
    352a:	8f 91       	pop	r24
    352c:	7f 91       	pop	r23
    352e:	6f 91       	pop	r22
    3530:	5f 91       	pop	r21
    3532:	4f 91       	pop	r20
    3534:	3f 91       	pop	r19
    3536:	2f 91       	pop	r18
    3538:	0f 90       	pop	r0
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	0f 90       	pop	r0
    353e:	1f 90       	pop	r1
    3540:	18 95       	reti

00003542 <__vector_9>:

/* ISR for TIMER1 overflow */
ISR(TIMER1_OVF_vect) {
    3542:	1f 92       	push	r1
    3544:	0f 92       	push	r0
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	0f 92       	push	r0
    354a:	11 24       	eor	r1, r1
    354c:	2f 93       	push	r18
    354e:	3f 93       	push	r19
    3550:	4f 93       	push	r20
    3552:	5f 93       	push	r21
    3554:	6f 93       	push	r22
    3556:	7f 93       	push	r23
    3558:	8f 93       	push	r24
    355a:	9f 93       	push	r25
    355c:	af 93       	push	r26
    355e:	bf 93       	push	r27
    3560:	ef 93       	push	r30
    3562:	ff 93       	push	r31
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    356c:	80 91 76 01 	lds	r24, 0x0176
    3570:	90 91 77 01 	lds	r25, 0x0177
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	29 f0       	breq	.+10     	; 0x3582 <__vector_9+0x40>
		(*g_timer1CallBackPtr)();
    3578:	e0 91 76 01 	lds	r30, 0x0176
    357c:	f0 91 77 01 	lds	r31, 0x0177
    3580:	09 95       	icall
	}
}
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	ff 91       	pop	r31
    3588:	ef 91       	pop	r30
    358a:	bf 91       	pop	r27
    358c:	af 91       	pop	r26
    358e:	9f 91       	pop	r25
    3590:	8f 91       	pop	r24
    3592:	7f 91       	pop	r23
    3594:	6f 91       	pop	r22
    3596:	5f 91       	pop	r21
    3598:	4f 91       	pop	r20
    359a:	3f 91       	pop	r19
    359c:	2f 91       	pop	r18
    359e:	0f 90       	pop	r0
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	0f 90       	pop	r0
    35a4:	1f 90       	pop	r1
    35a6:	18 95       	reti

000035a8 <__vector_7>:

/* ISR for TIMER1 compare match */
ISR(TIMER1_COMPA_vect) {
    35a8:	1f 92       	push	r1
    35aa:	0f 92       	push	r0
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	0f 92       	push	r0
    35b0:	11 24       	eor	r1, r1
    35b2:	2f 93       	push	r18
    35b4:	3f 93       	push	r19
    35b6:	4f 93       	push	r20
    35b8:	5f 93       	push	r21
    35ba:	6f 93       	push	r22
    35bc:	7f 93       	push	r23
    35be:	8f 93       	push	r24
    35c0:	9f 93       	push	r25
    35c2:	af 93       	push	r26
    35c4:	bf 93       	push	r27
    35c6:	ef 93       	push	r30
    35c8:	ff 93       	push	r31
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
	if (g_timer1CallBackPtr != NULL_PTR) {
    35d2:	80 91 76 01 	lds	r24, 0x0176
    35d6:	90 91 77 01 	lds	r25, 0x0177
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	29 f0       	breq	.+10     	; 0x35e8 <__vector_7+0x40>
		(*g_timer1CallBackPtr)();
    35de:	e0 91 76 01 	lds	r30, 0x0176
    35e2:	f0 91 77 01 	lds	r31, 0x0177
    35e6:	09 95       	icall
	}
}
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	ff 91       	pop	r31
    35ee:	ef 91       	pop	r30
    35f0:	bf 91       	pop	r27
    35f2:	af 91       	pop	r26
    35f4:	9f 91       	pop	r25
    35f6:	8f 91       	pop	r24
    35f8:	7f 91       	pop	r23
    35fa:	6f 91       	pop	r22
    35fc:	5f 91       	pop	r21
    35fe:	4f 91       	pop	r20
    3600:	3f 91       	pop	r19
    3602:	2f 91       	pop	r18
    3604:	0f 90       	pop	r0
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	0f 90       	pop	r0
    360a:	1f 90       	pop	r1
    360c:	18 95       	reti

0000360e <__vector_5>:

/* ISR for TIMER2 overflow */
ISR(TIMER2_OVF_vect) {
    360e:	1f 92       	push	r1
    3610:	0f 92       	push	r0
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	0f 92       	push	r0
    3616:	11 24       	eor	r1, r1
    3618:	2f 93       	push	r18
    361a:	3f 93       	push	r19
    361c:	4f 93       	push	r20
    361e:	5f 93       	push	r21
    3620:	6f 93       	push	r22
    3622:	7f 93       	push	r23
    3624:	8f 93       	push	r24
    3626:	9f 93       	push	r25
    3628:	af 93       	push	r26
    362a:	bf 93       	push	r27
    362c:	ef 93       	push	r30
    362e:	ff 93       	push	r31
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    3638:	80 91 78 01 	lds	r24, 0x0178
    363c:	90 91 79 01 	lds	r25, 0x0179
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	29 f0       	breq	.+10     	; 0x364e <__vector_5+0x40>
		(*g_timer2CallBackPtr)();
    3644:	e0 91 78 01 	lds	r30, 0x0178
    3648:	f0 91 79 01 	lds	r31, 0x0179
    364c:	09 95       	icall
	}
}
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	ff 91       	pop	r31
    3654:	ef 91       	pop	r30
    3656:	bf 91       	pop	r27
    3658:	af 91       	pop	r26
    365a:	9f 91       	pop	r25
    365c:	8f 91       	pop	r24
    365e:	7f 91       	pop	r23
    3660:	6f 91       	pop	r22
    3662:	5f 91       	pop	r21
    3664:	4f 91       	pop	r20
    3666:	3f 91       	pop	r19
    3668:	2f 91       	pop	r18
    366a:	0f 90       	pop	r0
    366c:	0f be       	out	0x3f, r0	; 63
    366e:	0f 90       	pop	r0
    3670:	1f 90       	pop	r1
    3672:	18 95       	reti

00003674 <__vector_4>:

/* ISR for TIMER2 compare match */
ISR(TIMER2_COMP_vect) {
    3674:	1f 92       	push	r1
    3676:	0f 92       	push	r0
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	0f 92       	push	r0
    367c:	11 24       	eor	r1, r1
    367e:	2f 93       	push	r18
    3680:	3f 93       	push	r19
    3682:	4f 93       	push	r20
    3684:	5f 93       	push	r21
    3686:	6f 93       	push	r22
    3688:	7f 93       	push	r23
    368a:	8f 93       	push	r24
    368c:	9f 93       	push	r25
    368e:	af 93       	push	r26
    3690:	bf 93       	push	r27
    3692:	ef 93       	push	r30
    3694:	ff 93       	push	r31
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
	if (g_timer2CallBackPtr != NULL_PTR) {
    369e:	80 91 78 01 	lds	r24, 0x0178
    36a2:	90 91 79 01 	lds	r25, 0x0179
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	29 f0       	breq	.+10     	; 0x36b4 <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    36aa:	e0 91 78 01 	lds	r30, 0x0178
    36ae:	f0 91 79 01 	lds	r31, 0x0179
    36b2:	09 95       	icall
	}
}
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	ff 91       	pop	r31
    36ba:	ef 91       	pop	r30
    36bc:	bf 91       	pop	r27
    36be:	af 91       	pop	r26
    36c0:	9f 91       	pop	r25
    36c2:	8f 91       	pop	r24
    36c4:	7f 91       	pop	r23
    36c6:	6f 91       	pop	r22
    36c8:	5f 91       	pop	r21
    36ca:	4f 91       	pop	r20
    36cc:	3f 91       	pop	r19
    36ce:	2f 91       	pop	r18
    36d0:	0f 90       	pop	r0
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	0f 90       	pop	r0
    36d6:	1f 90       	pop	r1
    36d8:	18 95       	reti

000036da <UART_init>:
 *******************************************************************************/


/* UART_init to use UART_ConfigType */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <UART_init+0x6>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <UART_init+0x8>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9c 83       	std	Y+4, r25	; 0x04
    36e8:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    36ea:	1a 82       	std	Y+2, r1	; 0x02
    36ec:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1 << U2X);
    36ee:	eb e2       	ldi	r30, 0x2B	; 43
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	80 83       	st	Z, r24

    /* Configure UCSRB based on data bits */
    UCSRB = (1 << RXEN) | (1 << TXEN);
    36f6:	ea e2       	ldi	r30, 0x2A	; 42
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	88 e1       	ldi	r24, 0x18	; 24
    36fc:	80 83       	st	Z, r24
    if (Config_Ptr->bit_data == 9) {
    36fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3700:	fc 81       	ldd	r31, Y+4	; 0x04
    3702:	80 81       	ld	r24, Z
    3704:	89 30       	cpi	r24, 0x09	; 9
    3706:	39 f4       	brne	.+14     	; 0x3716 <UART_init+0x3c>
        UCSRB |= (1<<URSEL) |(1 << UCSZ2);  // Set for 9-bit data mode if specified
    3708:	aa e2       	ldi	r26, 0x2A	; 42
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	ea e2       	ldi	r30, 0x2A	; 42
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	84 68       	ori	r24, 0x84	; 132
    3714:	8c 93       	st	X, r24

    /* Configure UCSRC for frame format, parity, and stop bits */


    /* Configure data bit size */
    if (Config_Ptr->bit_data == 8) {
    3716:	eb 81       	ldd	r30, Y+3	; 0x03
    3718:	fc 81       	ldd	r31, Y+4	; 0x04
    371a:	80 81       	ld	r24, Z
    371c:	88 30       	cpi	r24, 0x08	; 8
    371e:	41 f4       	brne	.+16     	; 0x3730 <UART_init+0x56>
        UCSRC |=(1<<URSEL) | (1 << UCSZ1) | (1 << UCSZ0);  // 8-bit data
    3720:	a0 e4       	ldi	r26, 0x40	; 64
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e0 e4       	ldi	r30, 0x40	; 64
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	86 68       	ori	r24, 0x86	; 134
    372c:	8c 93       	st	X, r24
    372e:	34 c0       	rjmp	.+104    	; 0x3798 <UART_init+0xbe>
    } else if (Config_Ptr->bit_data == 7) {
    3730:	eb 81       	ldd	r30, Y+3	; 0x03
    3732:	fc 81       	ldd	r31, Y+4	; 0x04
    3734:	80 81       	ld	r24, Z
    3736:	87 30       	cpi	r24, 0x07	; 7
    3738:	41 f4       	brne	.+16     	; 0x374a <UART_init+0x70>
        UCSRC |= (1<<URSEL) |(1 << UCSZ1);                 // 7-bit data
    373a:	a0 e4       	ldi	r26, 0x40	; 64
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e0 e4       	ldi	r30, 0x40	; 64
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	84 68       	ori	r24, 0x84	; 132
    3746:	8c 93       	st	X, r24
    3748:	27 c0       	rjmp	.+78     	; 0x3798 <UART_init+0xbe>
    }
    else if (Config_Ptr->bit_data == 6) {
    374a:	eb 81       	ldd	r30, Y+3	; 0x03
    374c:	fc 81       	ldd	r31, Y+4	; 0x04
    374e:	80 81       	ld	r24, Z
    3750:	86 30       	cpi	r24, 0x06	; 6
    3752:	41 f4       	brne	.+16     	; 0x3764 <UART_init+0x8a>
            UCSRC |= (1<<URSEL) |(1 << UCSZ0);                 // 6-bit data
    3754:	a0 e4       	ldi	r26, 0x40	; 64
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e0 e4       	ldi	r30, 0x40	; 64
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	80 81       	ld	r24, Z
    375e:	82 68       	ori	r24, 0x82	; 130
    3760:	8c 93       	st	X, r24
    3762:	1a c0       	rjmp	.+52     	; 0x3798 <UART_init+0xbe>
        }
    else if (Config_Ptr->bit_data == 5) {
    3764:	eb 81       	ldd	r30, Y+3	; 0x03
    3766:	fc 81       	ldd	r31, Y+4	; 0x04
    3768:	80 81       	ld	r24, Z
    376a:	85 30       	cpi	r24, 0x05	; 5
    376c:	a9 f4       	brne	.+42     	; 0x3798 <UART_init+0xbe>
            UCSRC &=~ (1 << UCSZ0);                 // 5-bit data
    376e:	a0 e4       	ldi	r26, 0x40	; 64
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	e0 e4       	ldi	r30, 0x40	; 64
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	8d 7f       	andi	r24, 0xFD	; 253
    377a:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ1);
    377c:	a0 e4       	ldi	r26, 0x40	; 64
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	e0 e4       	ldi	r30, 0x40	; 64
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	8b 7f       	andi	r24, 0xFB	; 251
    3788:	8c 93       	st	X, r24
            UCSRC &=~ (1 << UCSZ2);
    378a:	a0 e4       	ldi	r26, 0x40	; 64
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e0 e4       	ldi	r30, 0x40	; 64
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	8b 7f       	andi	r24, 0xFB	; 251
    3796:	8c 93       	st	X, r24
        }


    /* Configure parity */
    if (Config_Ptr->parity == 1) {
    3798:	eb 81       	ldd	r30, Y+3	; 0x03
    379a:	fc 81       	ldd	r31, Y+4	; 0x04
    379c:	81 81       	ldd	r24, Z+1	; 0x01
    379e:	81 30       	cpi	r24, 0x01	; 1
    37a0:	41 f4       	brne	.+16     	; 0x37b2 <UART_init+0xd8>
        UCSRC |= (1 << UPM1);  // Even parity
    37a2:	a0 e4       	ldi	r26, 0x40	; 64
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e0 e4       	ldi	r30, 0x40	; 64
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	80 62       	ori	r24, 0x20	; 32
    37ae:	8c 93       	st	X, r24
    37b0:	0c c0       	rjmp	.+24     	; 0x37ca <UART_init+0xf0>
    } else if (Config_Ptr->parity == 2) {
    37b2:	eb 81       	ldd	r30, Y+3	; 0x03
    37b4:	fc 81       	ldd	r31, Y+4	; 0x04
    37b6:	81 81       	ldd	r24, Z+1	; 0x01
    37b8:	82 30       	cpi	r24, 0x02	; 2
    37ba:	39 f4       	brne	.+14     	; 0x37ca <UART_init+0xf0>
        UCSRC |= (1 << UPM1) | (1 << UPM0);  // Odd parity
    37bc:	a0 e4       	ldi	r26, 0x40	; 64
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	e0 e4       	ldi	r30, 0x40	; 64
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	80 63       	ori	r24, 0x30	; 48
    37c8:	8c 93       	st	X, r24
    }

    /* Configure stop bits */
    if (Config_Ptr->stop_bit == 2) {
    37ca:	eb 81       	ldd	r30, Y+3	; 0x03
    37cc:	fc 81       	ldd	r31, Y+4	; 0x04
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	82 30       	cpi	r24, 0x02	; 2
    37d2:	39 f4       	brne	.+14     	; 0x37e2 <UART_init+0x108>
        UCSRC |= (1 << USBS);  // 2 stop bits
    37d4:	a0 e4       	ldi	r26, 0x40	; 64
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	e0 e4       	ldi	r30, 0x40	; 64
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	88 60       	ori	r24, 0x08	; 8
    37e0:	8c 93       	st	X, r24
    }

    /* Calculate the UBRR register value for the specified baud rate */
    ubrr_value = (uint16_t)((F_CPU / (Config_Ptr->baud_rate * 8UL)) - 1);
    37e2:	eb 81       	ldd	r30, Y+3	; 0x03
    37e4:	fc 81       	ldd	r31, Y+4	; 0x04
    37e6:	83 81       	ldd	r24, Z+3	; 0x03
    37e8:	94 81       	ldd	r25, Z+4	; 0x04
    37ea:	a5 81       	ldd	r26, Z+5	; 0x05
    37ec:	b6 81       	ldd	r27, Z+6	; 0x06
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	aa 1f       	adc	r26, r26
    37f4:	bb 1f       	adc	r27, r27
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	aa 1f       	adc	r26, r26
    37fc:	bb 1f       	adc	r27, r27
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	aa 1f       	adc	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	9c 01       	movw	r18, r24
    3808:	ad 01       	movw	r20, r26
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	92 e1       	ldi	r25, 0x12	; 18
    380e:	aa e7       	ldi	r26, 0x7A	; 122
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 b6 1c 	call	0x396c	; 0x396c <__udivmodsi4>
    381a:	da 01       	movw	r26, r20
    381c:	c9 01       	movw	r24, r18
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	9a 83       	std	Y+2, r25	; 0x02
    3822:	89 83       	std	Y+1, r24	; 0x01

    /* Set UBRR register */
    UBRRH = ubrr_value >> 8;
    3824:	e0 e4       	ldi	r30, 0x40	; 64
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	89 81       	ldd	r24, Y+1	; 0x01
    382a:	9a 81       	ldd	r25, Y+2	; 0x02
    382c:	89 2f       	mov	r24, r25
    382e:	99 27       	eor	r25, r25
    3830:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    3832:	e9 e2       	ldi	r30, 0x29	; 41
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	80 83       	st	Z, r24
}
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	0f 92       	push	r0
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    3852:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3854:	eb e2       	ldi	r30, 0x2B	; 43
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	88 2f       	mov	r24, r24
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	80 72       	andi	r24, 0x20	; 32
    3860:	90 70       	andi	r25, 0x00	; 0
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	b9 f3       	breq	.-18     	; 0x3854 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3866:	ec e2       	ldi	r30, 0x2C	; 44
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    386e:	0f 90       	pop	r0
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    387e:	eb e2       	ldi	r30, 0x2B	; 43
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	88 23       	and	r24, r24
    3886:	dc f7       	brge	.-10     	; 0x387e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3888:	ec e2       	ldi	r30, 0x2C	; 44
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	00 d0       	rcall	.+0      	; 0x389a <UART_sendString+0x6>
    389a:	0f 92       	push	r0
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	9b 83       	std	Y+3, r25	; 0x03
    38a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38a4:	19 82       	std	Y+1, r1	; 0x01
    38a6:	0e c0       	rjmp	.+28     	; 0x38c4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	28 2f       	mov	r18, r24
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	8a 81       	ldd	r24, Y+2	; 0x02
    38b0:	9b 81       	ldd	r25, Y+3	; 0x03
    38b2:	fc 01       	movw	r30, r24
    38b4:	e2 0f       	add	r30, r18
    38b6:	f3 1f       	adc	r31, r19
    38b8:	80 81       	ld	r24, Z
    38ba:	0e 94 24 1c 	call	0x3848	; 0x3848 <UART_sendByte>
		i++;
    38be:	89 81       	ldd	r24, Y+1	; 0x01
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    38c4:	89 81       	ldd	r24, Y+1	; 0x01
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	fc 01       	movw	r30, r24
    38d0:	e2 0f       	add	r30, r18
    38d2:	f3 1f       	adc	r31, r19
    38d4:	80 81       	ld	r24, Z
    38d6:	88 23       	and	r24, r24
    38d8:	39 f7       	brne	.-50     	; 0x38a8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	df 93       	push	r29
    38ec:	cf 93       	push	r28
    38ee:	00 d0       	rcall	.+0      	; 0x38f0 <UART_receiveString+0xa>
    38f0:	0f 92       	push	r0
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	9b 83       	std	Y+3, r25	; 0x03
    38f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38fa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	9b 81       	ldd	r25, Y+3	; 0x03
    3906:	8c 01       	movw	r16, r24
    3908:	02 0f       	add	r16, r18
    390a:	13 1f       	adc	r17, r19
    390c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_recieveByte>
    3910:	f8 01       	movw	r30, r16
    3912:	80 83       	st	Z, r24
    3914:	0f c0       	rjmp	.+30     	; 0x3934 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	8f 5f       	subi	r24, 0xFF	; 255
    391a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	28 2f       	mov	r18, r24
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	9b 81       	ldd	r25, Y+3	; 0x03
    3926:	8c 01       	movw	r16, r24
    3928:	02 0f       	add	r16, r18
    392a:	13 1f       	adc	r17, r19
    392c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <UART_recieveByte>
    3930:	f8 01       	movw	r30, r16
    3932:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	28 2f       	mov	r18, r24
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	9b 81       	ldd	r25, Y+3	; 0x03
    393e:	fc 01       	movw	r30, r24
    3940:	e2 0f       	add	r30, r18
    3942:	f3 1f       	adc	r31, r19
    3944:	80 81       	ld	r24, Z
    3946:	83 32       	cpi	r24, 0x23	; 35
    3948:	31 f7       	brne	.-52     	; 0x3916 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	28 2f       	mov	r18, r24
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	fc 01       	movw	r30, r24
    3956:	e2 0f       	add	r30, r18
    3958:	f3 1f       	adc	r31, r19
    395a:	10 82       	st	Z, r1
}
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	cf 91       	pop	r28
    3964:	df 91       	pop	r29
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <__udivmodsi4>:
    396c:	a1 e2       	ldi	r26, 0x21	; 33
    396e:	1a 2e       	mov	r1, r26
    3970:	aa 1b       	sub	r26, r26
    3972:	bb 1b       	sub	r27, r27
    3974:	fd 01       	movw	r30, r26
    3976:	0d c0       	rjmp	.+26     	; 0x3992 <__udivmodsi4_ep>

00003978 <__udivmodsi4_loop>:
    3978:	aa 1f       	adc	r26, r26
    397a:	bb 1f       	adc	r27, r27
    397c:	ee 1f       	adc	r30, r30
    397e:	ff 1f       	adc	r31, r31
    3980:	a2 17       	cp	r26, r18
    3982:	b3 07       	cpc	r27, r19
    3984:	e4 07       	cpc	r30, r20
    3986:	f5 07       	cpc	r31, r21
    3988:	20 f0       	brcs	.+8      	; 0x3992 <__udivmodsi4_ep>
    398a:	a2 1b       	sub	r26, r18
    398c:	b3 0b       	sbc	r27, r19
    398e:	e4 0b       	sbc	r30, r20
    3990:	f5 0b       	sbc	r31, r21

00003992 <__udivmodsi4_ep>:
    3992:	66 1f       	adc	r22, r22
    3994:	77 1f       	adc	r23, r23
    3996:	88 1f       	adc	r24, r24
    3998:	99 1f       	adc	r25, r25
    399a:	1a 94       	dec	r1
    399c:	69 f7       	brne	.-38     	; 0x3978 <__udivmodsi4_loop>
    399e:	60 95       	com	r22
    39a0:	70 95       	com	r23
    39a2:	80 95       	com	r24
    39a4:	90 95       	com	r25
    39a6:	9b 01       	movw	r18, r22
    39a8:	ac 01       	movw	r20, r24
    39aa:	bd 01       	movw	r22, r26
    39ac:	cf 01       	movw	r24, r30
    39ae:	08 95       	ret

000039b0 <__prologue_saves__>:
    39b0:	2f 92       	push	r2
    39b2:	3f 92       	push	r3
    39b4:	4f 92       	push	r4
    39b6:	5f 92       	push	r5
    39b8:	6f 92       	push	r6
    39ba:	7f 92       	push	r7
    39bc:	8f 92       	push	r8
    39be:	9f 92       	push	r9
    39c0:	af 92       	push	r10
    39c2:	bf 92       	push	r11
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	ca 1b       	sub	r28, r26
    39da:	db 0b       	sbc	r29, r27
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	09 94       	ijmp

000039e8 <__epilogue_restores__>:
    39e8:	2a 88       	ldd	r2, Y+18	; 0x12
    39ea:	39 88       	ldd	r3, Y+17	; 0x11
    39ec:	48 88       	ldd	r4, Y+16	; 0x10
    39ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    39f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    39f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    39f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    39fa:	b9 84       	ldd	r11, Y+9	; 0x09
    39fc:	c8 84       	ldd	r12, Y+8	; 0x08
    39fe:	df 80       	ldd	r13, Y+7	; 0x07
    3a00:	ee 80       	ldd	r14, Y+6	; 0x06
    3a02:	fd 80       	ldd	r15, Y+5	; 0x05
    3a04:	0c 81       	ldd	r16, Y+4	; 0x04
    3a06:	1b 81       	ldd	r17, Y+3	; 0x03
    3a08:	aa 81       	ldd	r26, Y+2	; 0x02
    3a0a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a0c:	ce 0f       	add	r28, r30
    3a0e:	d1 1d       	adc	r29, r1
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	ed 01       	movw	r28, r26
    3a1c:	08 95       	ret

00003a1e <itoa>:
    3a1e:	fb 01       	movw	r30, r22
    3a20:	9f 01       	movw	r18, r30
    3a22:	e8 94       	clt
    3a24:	42 30       	cpi	r20, 0x02	; 2
    3a26:	c4 f0       	brlt	.+48     	; 0x3a58 <itoa+0x3a>
    3a28:	45 32       	cpi	r20, 0x25	; 37
    3a2a:	b4 f4       	brge	.+44     	; 0x3a58 <itoa+0x3a>
    3a2c:	4a 30       	cpi	r20, 0x0A	; 10
    3a2e:	29 f4       	brne	.+10     	; 0x3a3a <itoa+0x1c>
    3a30:	97 fb       	bst	r25, 7
    3a32:	1e f4       	brtc	.+6      	; 0x3a3a <itoa+0x1c>
    3a34:	90 95       	com	r25
    3a36:	81 95       	neg	r24
    3a38:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3a:	64 2f       	mov	r22, r20
    3a3c:	77 27       	eor	r23, r23
    3a3e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__udivmodhi4>
    3a42:	80 5d       	subi	r24, 0xD0	; 208
    3a44:	8a 33       	cpi	r24, 0x3A	; 58
    3a46:	0c f0       	brlt	.+2      	; 0x3a4a <itoa+0x2c>
    3a48:	89 5d       	subi	r24, 0xD9	; 217
    3a4a:	81 93       	st	Z+, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	a1 f7       	brne	.-24     	; 0x3a3a <itoa+0x1c>
    3a52:	16 f4       	brtc	.+4      	; 0x3a58 <itoa+0x3a>
    3a54:	5d e2       	ldi	r21, 0x2D	; 45
    3a56:	51 93       	st	Z+, r21
    3a58:	10 82       	st	Z, r1
    3a5a:	c9 01       	movw	r24, r18
    3a5c:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <strrev>

00003a60 <strrev>:
    3a60:	dc 01       	movw	r26, r24
    3a62:	fc 01       	movw	r30, r24
    3a64:	67 2f       	mov	r22, r23
    3a66:	71 91       	ld	r23, Z+
    3a68:	77 23       	and	r23, r23
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <strrev+0x4>
    3a6c:	32 97       	sbiw	r30, 0x02	; 2
    3a6e:	04 c0       	rjmp	.+8      	; 0x3a78 <strrev+0x18>
    3a70:	7c 91       	ld	r23, X
    3a72:	6d 93       	st	X+, r22
    3a74:	70 83       	st	Z, r23
    3a76:	62 91       	ld	r22, -Z
    3a78:	ae 17       	cp	r26, r30
    3a7a:	bf 07       	cpc	r27, r31
    3a7c:	c8 f3       	brcs	.-14     	; 0x3a70 <strrev+0x10>
    3a7e:	08 95       	ret

00003a80 <__udivmodhi4>:
    3a80:	aa 1b       	sub	r26, r26
    3a82:	bb 1b       	sub	r27, r27
    3a84:	51 e1       	ldi	r21, 0x11	; 17
    3a86:	07 c0       	rjmp	.+14     	; 0x3a96 <__udivmodhi4_ep>

00003a88 <__udivmodhi4_loop>:
    3a88:	aa 1f       	adc	r26, r26
    3a8a:	bb 1f       	adc	r27, r27
    3a8c:	a6 17       	cp	r26, r22
    3a8e:	b7 07       	cpc	r27, r23
    3a90:	10 f0       	brcs	.+4      	; 0x3a96 <__udivmodhi4_ep>
    3a92:	a6 1b       	sub	r26, r22
    3a94:	b7 0b       	sbc	r27, r23

00003a96 <__udivmodhi4_ep>:
    3a96:	88 1f       	adc	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	5a 95       	dec	r21
    3a9c:	a9 f7       	brne	.-22     	; 0x3a88 <__udivmodhi4_loop>
    3a9e:	80 95       	com	r24
    3aa0:	90 95       	com	r25
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	08 95       	ret

00003aa8 <_exit>:
    3aa8:	f8 94       	cli

00003aaa <__stop_program>:
    3aaa:	ff cf       	rjmp	.-2      	; 0x3aaa <__stop_program>
